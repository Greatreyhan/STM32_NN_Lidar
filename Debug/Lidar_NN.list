
Lidar_NN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dd4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000cad0  08009f80  08009f80  00019f80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a50  08016a50  00030900  2**0
                  CONTENTS
  4 .ARM          00000008  08016a50  08016a50  00026a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a58  08016a58  00030900  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a58  08016a58  00026a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a5c  08016a5c  00026a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000900  20000000  08016a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e8  20000900  08017360  00030900  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200011e8  08017360  000311e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030900  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00030930  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf2b  00000000  00000000  000309c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e86  00000000  00000000  0003d8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0003f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c1  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018303  00000000  00000000  00040ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db8e  00000000  00000000  00058ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a1e0  00000000  00000000  00066a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046a8  00000000  00000000  00100c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  001052bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000900 	.word	0x20000900
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f5c 	.word	0x08009f5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000904 	.word	0x20000904
 80001dc:	08009f5c 	.word	0x08009f5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <AI_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void AI_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	ai_error err;

	/* Create a local array with the addresses of the activations buffers */
	const ai_handle act_addr[] = { activations };
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <AI_Init+0x50>)
 8001008:	603b      	str	r3, [r7, #0]
	/* Create an instance of the model */
	err = ai_lidar_model_create_and_init(&lidar_model, act_addr, NULL);
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4810      	ldr	r0, [pc, #64]	; (8001054 <AI_Init+0x54>)
 8001012:	f002 f983 	bl	800331c <ai_lidar_model_create_and_init>
 8001016:	4603      	mov	r3, r0
 8001018:	607b      	str	r3, [r7, #4]
	if (err.type != AI_ERROR_NONE) {
 800101a:	793b      	ldrb	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <AI_Init+0x24>
//		printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
		Error_Handler();
 8001020:	f000 fa32 	bl	8001488 <Error_Handler>
	}
	ai_input = ai_lidar_model_inputs_get(lidar_model, NULL);
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <AI_Init+0x54>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f002 f9ea 	bl	8003404 <ai_lidar_model_inputs_get>
 8001030:	4603      	mov	r3, r0
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <AI_Init+0x58>)
 8001034:	6013      	str	r3, [r2, #0]
	ai_output = ai_lidar_model_outputs_get(lidar_model, NULL);
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <AI_Init+0x54>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f002 f9fb 	bl	8003438 <ai_lidar_model_outputs_get>
 8001042:	4603      	mov	r3, r0
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <AI_Init+0x5c>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000c78 	.word	0x20000c78
 8001054:	200009e8 	.word	0x200009e8
 8001058:	20000ff8 	.word	0x20000ff8
 800105c:	20000ffc 	.word	0x20000ffc

08001060 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	ai_i32 batch;
	ai_error err;

	/* Update IO handlers with the data payload */
	ai_input[0].data = AI_HANDLE_PTR(pIn);
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <AI_Run+0x50>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <AI_Run+0x54>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	605a      	str	r2, [r3, #4]
	/* Run the network */
	batch = ai_lidar_model_run(lidar_model, ai_input, ai_output);
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <AI_Run+0x58>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <AI_Run+0x50>)
 8001080:	6811      	ldr	r1, [r2, #0]
 8001082:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <AI_Run+0x54>)
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fa2c 	bl	80034e4 <ai_lidar_model_run>
 800108c:	60f8      	str	r0, [r7, #12]
	if (batch != 1) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d008      	beq.n	80010a6 <AI_Run+0x46>
		err = ai_lidar_model_get_error(lidar_model);
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <AI_Run+0x58>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f91d 	bl	80032d8 <ai_lidar_model_get_error>
 800109e:	4603      	mov	r3, r0
 80010a0:	60bb      	str	r3, [r7, #8]
//		printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
		Error_Handler();
 80010a2:	f000 f9f1 	bl	8001488 <Error_Handler>
	}
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000ff8 	.word	0x20000ff8
 80010b4:	20000ffc 	.word	0x20000ffc
 80010b8:	200009e8 	.word	0x200009e8

080010bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 80010c2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f000 fb36 	bl	8001734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f8c2 	bl	8001250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f000 f98a 	bl	80013e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010d0:	f000 f95e 	bl	8001390 <MX_USART1_UART_Init>
  MX_CRC_Init();
 80010d4:	f000 f924 	bl	8001320 <MX_CRC_Init>
  MX_TIM11_Init();
 80010d8:	f000 f936 	bl	8001348 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  snprintf(RXBuf, 50, "%s", "Start Interfacing \n");
 80010dc:	4b4f      	ldr	r3, [pc, #316]	; (800121c <main+0x160>)
 80010de:	4a50      	ldr	r2, [pc, #320]	; (8001220 <main+0x164>)
 80010e0:	2132      	movs	r1, #50	; 0x32
 80010e2:	4850      	ldr	r0, [pc, #320]	; (8001224 <main+0x168>)
 80010e4:	f005 f9d8 	bl	8006498 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)RXBuf, sizeof(RXBuf), 100);
 80010e8:	2364      	movs	r3, #100	; 0x64
 80010ea:	2232      	movs	r2, #50	; 0x32
 80010ec:	494d      	ldr	r1, [pc, #308]	; (8001224 <main+0x168>)
 80010ee:	484e      	ldr	r0, [pc, #312]	; (8001228 <main+0x16c>)
 80010f0:	f001 fc34 	bl	800295c <HAL_UART_Transmit>
  // Start timer/counter
  HAL_TIM_Base_Start(&htim11);
 80010f4:	484d      	ldr	r0, [pc, #308]	; (800122c <main+0x170>)
 80010f6:	f001 fafb 	bl	80026f0 <HAL_TIM_Base_Start>

  //Initialize neural network
  AI_Init();
 80010fa:	f7ff ff81 	bl	8001000 <AI_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001104:	484a      	ldr	r0, [pc, #296]	; (8001230 <main+0x174>)
 8001106:	f000 fe31 	bl	8001d6c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Fill Data Input
	  	  float dataDump[] = {5.888865347658078,0,0,0,111.10900872656761,109.05510104045345,108.02071849821927,107.00280918718755,106.00144873875115,105.01670255576785,104.04862516164646,103.09725953891206,103.16130796257711,103.24238864154488,103.34101254014037,103.4576980512243,104.59329824732144,104.74854770575715,104.92364686056774,106.12264764797895,107.34552275569293,108.59345859467574,107.85061884703461,105.10584142016687,104.39666151711577,106.75214792642562,108.12456635380869,109.5280679314614,0,5.01854064183178,0,0,0,0,0,0,0,4.860095636738915,0,4.817967539367538,4.796499408727395,4.774754955371732,0,0,4.707809259236121,4.68490439654601,4.6616949164806085,0,4.6143374695147,0,129.19204174763107,129.21340485906933,128.05942709870376,125.69477828955597,123.30020945397283,122.10358869104591,122.14029821718283,122.19110105540491,122.2553139297535,123.61739961617022,125.0208152927155,126.46622127017896,127.9542909051835,129.48571166589255,131.06118624099184,4.15358660422704,4.12274195624377,0,4.059611147340039,0,3.9944822826865973,0,0,3.89283008838383,3.857838560808834,3.822270492843074,0,3.7493467844483783,0,3.673938123739504,3.637341404983321,21.4837263160774,34.376005432398074,37.16812284932135,35.079749417036716,3.824182244219703,0,36.8057486436688,128.59082187412537,126.86613748235222,125.18569436267624,123.54872550549798,123.38797144406767,121.81716442966959,4.124398943250895,0,0,4.215471727213927,4.2449260761503815,0,0,4.330717398480374,4.3584882256786885,0,4.412843412128965,123.26676221852127,120.79803093340597,119.59906582572016,118.43890499762655,117.31693400309831,116.23254460413912,115.1851340913222,114.17410465370159,114.34121350648587,114.52506882598327,114.72619819194193,114.94510655772227,116.28997197202574,119.83795189018991,122.26842388684635,122.52052564479493,120.63712652154473,120.94630731266078,122.34361644561679,4.881860846001078,0,0,117.60262961675522,115.98994800158142,114.41648837558262,113.91250819576472,111.38136006465773,107.86810994917397,5.056795246213487,5.075091976714749,0,5.111048800188025,5.128716234552549,0,5.163446874326768,5.180516928936709,0,5.21408305483923,0,5.246905076711544,5.263044738296187,0,5.294796155206137,0,5.325862675838405,0,5.356266224145301,5.371225980405345,106.00290845880805,106.0196889675595,106.05098002917522,105.09323674430871,105.15100800802512,105.22179763173466,105.30517102764806};
 800110a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800110e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001112:	4a48      	ldr	r2, [pc, #288]	; (8001234 <main+0x178>)
 8001114:	4618      	mov	r0, r3
 8001116:	4611      	mov	r1, r2
 8001118:	f44f 7320 	mov.w	r3, #640	; 0x280
 800111c:	461a      	mov	r2, r3
 800111e:	f005 fae2 	bl	80066e6 <memcpy>
	  	  for(uint32_t i = 0; i < AI_LIDAR_MODEL_IN_1_SIZE; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8001128:	e013      	b.n	8001152 <main+0x96>
	  	  	  {
	  	  		  aiInData[i] = (float)dataDump[i];
 800112a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800112e:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 8001132:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	493e      	ldr	r1, [pc, #248]	; (8001238 <main+0x17c>)
 800113e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	601a      	str	r2, [r3, #0]
	  	  for(uint32_t i = 0; i < AI_LIDAR_MODEL_IN_1_SIZE; i++)
 8001148:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800114c:	3301      	adds	r3, #1
 800114e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8001152:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001156:	2b9f      	cmp	r3, #159	; 0x9f
 8001158:	d9e7      	bls.n	800112a <main+0x6e>
	  	  	  }

	  	  snprintf(RXBuf, 50, "%s", "Run AI -----------------------------------\n");
 800115a:	4b38      	ldr	r3, [pc, #224]	; (800123c <main+0x180>)
 800115c:	4a30      	ldr	r2, [pc, #192]	; (8001220 <main+0x164>)
 800115e:	2132      	movs	r1, #50	; 0x32
 8001160:	4830      	ldr	r0, [pc, #192]	; (8001224 <main+0x168>)
 8001162:	f005 f999 	bl	8006498 <sniprintf>
	  	  HAL_UART_Transmit(&huart1, (uint8_t*)RXBuf, sizeof(RXBuf), 100);
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	2232      	movs	r2, #50	; 0x32
 800116a:	492e      	ldr	r1, [pc, #184]	; (8001224 <main+0x168>)
 800116c:	482e      	ldr	r0, [pc, #184]	; (8001228 <main+0x16c>)
 800116e:	f001 fbf5 	bl	800295c <HAL_UART_Transmit>

	  	  timestamp = htim11.Instance->CNT;
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <main+0x170>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284

	  	  // Run AI
	  	  AI_Run(aiInData, aiOutData);
 800117c:	4930      	ldr	r1, [pc, #192]	; (8001240 <main+0x184>)
 800117e:	482e      	ldr	r0, [pc, #184]	; (8001238 <main+0x17c>)
 8001180:	f7ff ff6e 	bl	8001060 <AI_Run>

	  	  duration = htim11.Instance->CNT - timestamp;
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <main+0x170>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800118a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

	  	  snprintf(RXBuf, 50, "%s", "Output -----------------------------------\n");
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <main+0x188>)
 8001196:	4a22      	ldr	r2, [pc, #136]	; (8001220 <main+0x164>)
 8001198:	2132      	movs	r1, #50	; 0x32
 800119a:	4822      	ldr	r0, [pc, #136]	; (8001224 <main+0x168>)
 800119c:	f005 f97c 	bl	8006498 <sniprintf>
	      HAL_UART_Transmit(&huart1, (uint8_t*)RXBuf, sizeof(RXBuf), 100);
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	2232      	movs	r2, #50	; 0x32
 80011a4:	491f      	ldr	r1, [pc, #124]	; (8001224 <main+0x168>)
 80011a6:	4820      	ldr	r0, [pc, #128]	; (8001228 <main+0x16c>)
 80011a8:	f001 fbd8 	bl	800295c <HAL_UART_Transmit>
	  	  for(uint32_t i = 0; i < AI_LIDAR_MODEL_OUT_1_SIZE; i++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80011b2:	e01c      	b.n	80011ee <main+0x132>
	  		  {
	  			  snprintf(RXBuf, 50, "%f", aiOutData[i]);
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <main+0x184>)
 80011b6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9c9 	bl	8000558 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	e9cd 2300 	strd	r2, r3, [sp]
 80011ce:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <main+0x18c>)
 80011d0:	2132      	movs	r1, #50	; 0x32
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <main+0x168>)
 80011d4:	f005 f960 	bl	8006498 <sniprintf>
	  			  HAL_UART_Transmit(&huart1, (uint8_t*)RXBuf, sizeof(RXBuf), 100);
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	2232      	movs	r2, #50	; 0x32
 80011dc:	4911      	ldr	r1, [pc, #68]	; (8001224 <main+0x168>)
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <main+0x16c>)
 80011e0:	f001 fbbc 	bl	800295c <HAL_UART_Transmit>
	  	  for(uint32_t i = 0; i < AI_LIDAR_MODEL_OUT_1_SIZE; i++)
 80011e4:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80011e8:	3301      	adds	r3, #1
 80011ea:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80011ee:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d9de      	bls.n	80011b4 <main+0xf8>
	  		  }

	  	  snprintf(RXBuf, 50, "Duration : %d", (uint8_t)duration);
 80011f6:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <main+0x190>)
 80011fe:	2132      	movs	r1, #50	; 0x32
 8001200:	4808      	ldr	r0, [pc, #32]	; (8001224 <main+0x168>)
 8001202:	f005 f949 	bl	8006498 <sniprintf>
	  	  HAL_UART_Transmit(&huart1, (uint8_t*)RXBuf, sizeof(RXBuf), 100);
 8001206:	2364      	movs	r3, #100	; 0x64
 8001208:	2232      	movs	r2, #50	; 0x32
 800120a:	4906      	ldr	r1, [pc, #24]	; (8001224 <main+0x168>)
 800120c:	4806      	ldr	r0, [pc, #24]	; (8001228 <main+0x16c>)
 800120e:	f001 fba5 	bl	800295c <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8001212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001216:	f000 faff 	bl	8001818 <HAL_Delay>
  {
 800121a:	e776      	b.n	800110a <main+0x4e>
 800121c:	08009f80 	.word	0x08009f80
 8001220:	08009f94 	.word	0x08009f94
 8001224:	200009b4 	.word	0x200009b4
 8001228:	2000096c 	.word	0x2000096c
 800122c:	20000924 	.word	0x20000924
 8001230:	40020800 	.word	0x40020800
 8001234:	0800a004 	.word	0x0800a004
 8001238:	200009ec 	.word	0x200009ec
 800123c:	08009f98 	.word	0x08009f98
 8001240:	20000c6c 	.word	0x20000c6c
 8001244:	08009fc4 	.word	0x08009fc4
 8001248:	08009ff0 	.word	0x08009ff0
 800124c:	08009ff4 	.word	0x08009ff4

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	; 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	2230      	movs	r2, #48	; 0x30
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f005 f9b1 	bl	80065c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <SystemClock_Config+0xc8>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a26      	ldr	r2, [pc, #152]	; (8001318 <SystemClock_Config+0xc8>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <SystemClock_Config+0xc8>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <SystemClock_Config+0xcc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a20      	ldr	r2, [pc, #128]	; (800131c <SystemClock_Config+0xcc>)
 800129a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <SystemClock_Config+0xcc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b4:	2310      	movs	r3, #16
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c0:	2308      	movs	r3, #8
 80012c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012c4:	2364      	movs	r3, #100	; 0x64
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012cc:	2304      	movs	r3, #4
 80012ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fd63 	bl	8001da0 <HAL_RCC_OscConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e0:	f000 f8d2 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e4:	230f      	movs	r3, #15
 80012e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	2302      	movs	r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2103      	movs	r1, #3
 8001300:	4618      	mov	r0, r3
 8001302:	f000 ffc5 	bl	8002290 <HAL_RCC_ClockConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800130c:	f000 f8bc 	bl	8001488 <Error_Handler>
  }
}
 8001310:	bf00      	nop
 8001312:	3750      	adds	r7, #80	; 0x50
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_CRC_Init+0x20>)
 8001326:	4a07      	ldr	r2, [pc, #28]	; (8001344 <MX_CRC_Init+0x24>)
 8001328:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_CRC_Init+0x20>)
 800132c:	f000 fb7d 	bl	8001a2a <HAL_CRC_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001336:	f000 f8a7 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000091c 	.word	0x2000091c
 8001344:	40023000 	.word	0x40023000

08001348 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_TIM11_Init+0x40>)
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <MX_TIM11_Init+0x44>)
 8001350:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <MX_TIM11_Init+0x40>)
 8001354:	2263      	movs	r2, #99	; 0x63
 8001356:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_TIM11_Init+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_TIM11_Init+0x40>)
 8001360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001364:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_TIM11_Init+0x40>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_TIM11_Init+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_TIM11_Init+0x40>)
 8001374:	f001 f96c 	bl	8002650 <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800137e:	f000 f883 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000924 	.word	0x20000924
 800138c:	40014800 	.word	0x40014800

08001390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_USART1_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART1_UART_Init+0x4c>)
 80013c8:	f001 fa78 	bl	80028bc <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013d2:	f000 f859 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000096c 	.word	0x2000096c
 80013e0:	40011000 	.word	0x40011000

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_GPIO_Init+0x9c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <MX_GPIO_Init+0x9c>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_GPIO_Init+0x9c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_GPIO_Init+0x9c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <MX_GPIO_Init+0x9c>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_GPIO_Init+0x9c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_GPIO_Init+0x9c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <MX_GPIO_Init+0x9c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_GPIO_Init+0x9c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <MX_GPIO_Init+0xa0>)
 8001456:	f000 fc89 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800145a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_GPIO_Init+0xa0>)
 8001474:	f000 faf6 	bl	8001a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	40020800 	.word	0x40020800

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_MspInit+0x4c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_MspInit+0x4c>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_MspInit+0x4c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_MspInit+0x4c>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <HAL_CRC_MspInit+0x3c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10d      	bne.n	8001512 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_CRC_MspInit+0x40>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_CRC_MspInit+0x40>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <HAL_CRC_MspInit+0x40>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023000 	.word	0x40023000
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <HAL_TIM_Base_MspInit+0x3c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10d      	bne.n	8001556 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_TIM_Base_MspInit+0x40>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_TIM_Base_MspInit+0x40>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40014800 	.word	0x40014800
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0x84>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d12c      	bne.n	80015e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_UART_MspInit+0x88>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <HAL_UART_MspInit+0x88>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_UART_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015d8:	2307      	movs	r3, #7
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_UART_MspInit+0x8c>)
 80015e4:	f000 fa3e 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40011000 	.word	0x40011000
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 f8c6 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <_sbrk+0x5c>)
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <_sbrk+0x60>)
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_sbrk+0x64>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <_sbrk+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	d207      	bcs.n	8001690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001680:	f005 f804 	bl	800668c <__errno>
 8001684:	4603      	mov	r3, r0
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	e009      	b.n	80016a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_sbrk+0x64>)
 80016a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20020000 	.word	0x20020000
 80016b0:	00000800 	.word	0x00000800
 80016b4:	20001000 	.word	0x20001000
 80016b8:	200011e8 	.word	0x200011e8

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <SystemInit+0x20>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <SystemInit+0x20>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001718 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e4:	f7ff ffea 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ea:	490d      	ldr	r1, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001700:	4c0a      	ldr	r4, [pc, #40]	; (800172c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170e:	f004 ffc3 	bl	8006698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001712:	f7ff fcd3 	bl	80010bc <main>
  bx  lr    
 8001716:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001718:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800171c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001720:	20000900 	.word	0x20000900
  ldr r2, =_sidata
 8001724:	08016a60 	.word	0x08016a60
  ldr r2, =_sbss
 8001728:	20000900 	.word	0x20000900
  ldr r4, =_ebss
 800172c:	200011e8 	.word	0x200011e8

08001730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC_IRQHandler>
	...

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <HAL_Init+0x40>)
 800173e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_Init+0x40>)
 800174a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_Init+0x40>)
 8001756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 f931 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001762:	200f      	movs	r0, #15
 8001764:	f000 f808 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001768:	f7ff fe94 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x54>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f93b 	bl	8001a12 <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f000 f911 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <HAL_InitTick+0x5c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20001004 	.word	0x20001004

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20001004 	.word	0x20001004

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff47 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff5c 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffb0 	bl	8001980 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e00e      	b.n	8001a5a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	795b      	ldrb	r3, [r3, #5]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d105      	bne.n	8001a52 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fd49 	bl	80014e4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	e159      	b.n	8001d34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8148 	bne.w	8001d2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d005      	beq.n	8001ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d130      	bne.n	8001b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aec:	2201      	movs	r2, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 0201 	and.w	r2, r3, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d017      	beq.n	8001b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d123      	bne.n	8001ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	08da      	lsrs	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80a2 	beq.w	8001d2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <HAL_GPIO_Init+0x2e8>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <HAL_GPIO_Init+0x2e8>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b54      	ldr	r3, [pc, #336]	; (8001d4c <HAL_GPIO_Init+0x2e8>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c06:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_GPIO_Init+0x2ec>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a49      	ldr	r2, [pc, #292]	; (8001d54 <HAL_GPIO_Init+0x2f0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <HAL_GPIO_Init+0x202>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <HAL_GPIO_Init+0x2f4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x1fe>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a47      	ldr	r2, [pc, #284]	; (8001d5c <HAL_GPIO_Init+0x2f8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x1fa>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a46      	ldr	r2, [pc, #280]	; (8001d60 <HAL_GPIO_Init+0x2fc>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x1f6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a45      	ldr	r2, [pc, #276]	; (8001d64 <HAL_GPIO_Init+0x300>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x1f2>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e008      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c56:	2307      	movs	r3, #7
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e004      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x204>
 8001c66:	2300      	movs	r3, #0
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	f002 0203 	and.w	r2, r2, #3
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	4093      	lsls	r3, r2
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c78:	4935      	ldr	r1, [pc, #212]	; (8001d50 <HAL_GPIO_Init+0x2ec>)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c86:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001caa:	4a2f      	ldr	r2, [pc, #188]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd4:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cda:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfe:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	f67f aea2 	bls.w	8001a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40013800 	.word	0x40013800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e267      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d075      	beq.n	8001eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dbe:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d00c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4b85      	ldr	r3, [pc, #532]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d112      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd6:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4b7e      	ldr	r3, [pc, #504]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d05b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x108>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d157      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e242      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x74>
 8001e06:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a75      	ldr	r2, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x98>
 8001e1e:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6f      	ldr	r2, [pc, #444]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6c      	ldr	r2, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e38:	4b69      	ldr	r3, [pc, #420]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a68      	ldr	r2, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a65      	ldr	r2, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fcd2 	bl	8001800 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fcce 	bl	8001800 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e207      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fcbe 	bl	8001800 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fcba 	bl	8001800 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1f3      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0xe8>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1c7      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4937      	ldr	r1, [pc, #220]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_RCC_OscConfig+0x244>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff fc73 	bl	8001800 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fc6f 	bl	8001800 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1a8      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4925      	ldr	r1, [pc, #148]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_RCC_OscConfig+0x244>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff fc52 	bl	8001800 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f60:	f7ff fc4e 	bl	8001800 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e187      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d036      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_RCC_OscConfig+0x248>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff fc32 	bl	8001800 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fc2e 	bl	8001800 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e167      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x200>
 8001fbe:	e01b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_OscConfig+0x248>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fc1b 	bl	8001800 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	e00e      	b.n	8001fec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff fc17 	bl	8001800 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d907      	bls.n	8001fec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e150      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	42470000 	.word	0x42470000
 8001fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	4b88      	ldr	r3, [pc, #544]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ea      	bne.n	8001fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 8097 	beq.w	8002134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200a:	4b81      	ldr	r3, [pc, #516]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10f      	bne.n	8002036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a7c      	ldr	r2, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	4b77      	ldr	r3, [pc, #476]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002042:	4b74      	ldr	r3, [pc, #464]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a73      	ldr	r2, [pc, #460]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204e:	f7ff fbd7 	bl	8001800 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7ff fbd3 	bl	8001800 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e10c      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_RCC_OscConfig+0x474>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x2ea>
 800207c:	4b64      	ldr	r3, [pc, #400]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a63      	ldr	r2, [pc, #396]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
 8002088:	e01c      	b.n	80020c4 <HAL_RCC_OscConfig+0x324>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b05      	cmp	r3, #5
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x30c>
 8002092:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a5e      	ldr	r2, [pc, #376]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
 800209e:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a5b      	ldr	r2, [pc, #364]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0x324>
 80020ac:	4b58      	ldr	r3, [pc, #352]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a57      	ldr	r2, [pc, #348]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	4b55      	ldr	r3, [pc, #340]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020be:	f023 0304 	bic.w	r3, r3, #4
 80020c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff fb98 	bl	8001800 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7ff fb94 	bl	8001800 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0cb      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ea:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ee      	beq.n	80020d4 <HAL_RCC_OscConfig+0x334>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fb82 	bl	8001800 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff fb7e 	bl	8001800 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0b5      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ee      	bne.n	8002100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002122:	7dfb      	ldrb	r3, [r7, #23]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d105      	bne.n	8002134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	4a38      	ldr	r2, [pc, #224]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002132:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80a1 	beq.w	8002280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213e:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b08      	cmp	r3, #8
 8002148:	d05c      	beq.n	8002204 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d141      	bne.n	80021d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_OscConfig+0x478>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fb52 	bl	8001800 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff fb4e 	bl	8001800 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e087      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	019b      	lsls	r3, r3, #6
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	491b      	ldr	r1, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x478>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff fb27 	bl	8001800 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff fb23 	bl	8001800 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e05c      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x416>
 80021d4:	e054      	b.n	8002280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <HAL_RCC_OscConfig+0x478>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff fb10 	bl	8001800 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff fb0c 	bl	8001800 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e045      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_RCC_OscConfig+0x470>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x444>
 8002202:	e03d      	b.n	8002280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d107      	bne.n	800221c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e038      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
 8002210:	40023800 	.word	0x40023800
 8002214:	40007000 	.word	0x40007000
 8002218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x4ec>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d028      	beq.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d121      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d11a      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002254:	4293      	cmp	r3, r2
 8002256:	d111      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	085b      	lsrs	r3, r3, #1
 8002264:	3b01      	subs	r3, #1
 8002266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800

08002290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0cc      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b68      	ldr	r3, [pc, #416]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d90c      	bls.n	80022cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b65      	ldr	r3, [pc, #404]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0b8      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e4:	4b59      	ldr	r3, [pc, #356]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a52      	ldr	r2, [pc, #328]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	494d      	ldr	r1, [pc, #308]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d044      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d119      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d003      	beq.n	800234e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800234a:	2b03      	cmp	r3, #3
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e067      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4934      	ldr	r1, [pc, #208]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002380:	f7ff fa3e 	bl	8001800 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7ff fa3a 	bl	8001800 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e04f      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d20c      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e032      	b.n	800243e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4916      	ldr	r1, [pc, #88]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002416:	f000 f821 	bl	800245c <HAL_RCC_GetSysClockFreq>
 800241a:	4602      	mov	r2, r0
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	490a      	ldr	r1, [pc, #40]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	5ccb      	ldrb	r3, [r1, r3]
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff f99e 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023c00 	.word	0x40023c00
 800244c:	40023800 	.word	0x40023800
 8002450:	0800a2b4 	.word	0x0800a2b4
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800245c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002460:	b090      	sub	sp, #64	; 0x40
 8002462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
 8002468:	2300      	movs	r3, #0
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d00d      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x40>
 8002480:	2b08      	cmp	r3, #8
 8002482:	f200 80a1 	bhi.w	80025c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x34>
 800248a:	2b04      	cmp	r3, #4
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x3a>
 800248e:	e09b      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002494:	e09b      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002496:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800249a:	e098      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a6:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d028      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b2:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	099b      	lsrs	r3, r3, #6
 80024b8:	2200      	movs	r2, #0
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	627a      	str	r2, [r7, #36]	; 0x24
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024c4:	2100      	movs	r1, #0
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024c8:	fb03 f201 	mul.w	r2, r3, r1
 80024cc:	2300      	movs	r3, #0
 80024ce:	fb00 f303 	mul.w	r3, r0, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	4a43      	ldr	r2, [pc, #268]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80024d6:	fba0 1202 	umull	r1, r2, r0, r2
 80024da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024dc:	460a      	mov	r2, r1
 80024de:	62ba      	str	r2, [r7, #40]	; 0x28
 80024e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e2:	4413      	add	r3, r2
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e8:	2200      	movs	r2, #0
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	61fa      	str	r2, [r7, #28]
 80024ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024f6:	f7fe fbcf 	bl	8000c98 <__aeabi_uldivmod>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4613      	mov	r3, r2
 8002500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002502:	e053      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002504:	4b35      	ldr	r3, [pc, #212]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	2200      	movs	r2, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	617a      	str	r2, [r7, #20]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002516:	f04f 0b00 	mov.w	fp, #0
 800251a:	4652      	mov	r2, sl
 800251c:	465b      	mov	r3, fp
 800251e:	f04f 0000 	mov.w	r0, #0
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	0159      	lsls	r1, r3, #5
 8002528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800252c:	0150      	lsls	r0, r2, #5
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	ebb2 080a 	subs.w	r8, r2, sl
 8002536:	eb63 090b 	sbc.w	r9, r3, fp
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002546:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800254a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800254e:	ebb2 0408 	subs.w	r4, r2, r8
 8002552:	eb63 0509 	sbc.w	r5, r3, r9
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	00eb      	lsls	r3, r5, #3
 8002560:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002564:	00e2      	lsls	r2, r4, #3
 8002566:	4614      	mov	r4, r2
 8002568:	461d      	mov	r5, r3
 800256a:	eb14 030a 	adds.w	r3, r4, sl
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	eb45 030b 	adc.w	r3, r5, fp
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002582:	4629      	mov	r1, r5
 8002584:	028b      	lsls	r3, r1, #10
 8002586:	4621      	mov	r1, r4
 8002588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800258c:	4621      	mov	r1, r4
 800258e:	028a      	lsls	r2, r1, #10
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	2200      	movs	r2, #0
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025a0:	f7fe fb7a 	bl	8000c98 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4613      	mov	r3, r2
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_GetSysClockFreq+0x180>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80025bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3740      	adds	r7, #64	; 0x40
 80025d4:	46bd      	mov	sp, r7
 80025d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	017d7840 	.word	0x017d7840

080025e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	0800a2c4 	.word	0x0800a2c4

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffdc 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0b5b      	lsrs	r3, r3, #13
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	0800a2c4 	.word	0x0800a2c4

08002650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e041      	b.n	80026e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe ff56 	bl	8001528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3304      	adds	r3, #4
 800268c:	4619      	mov	r1, r3
 800268e:	4610      	mov	r0, r2
 8002690:	f000 f888 	bl	80027a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d001      	beq.n	8002708 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e03c      	b.n	8002782 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <HAL_TIM_Base_Start+0xa0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_TIM_Base_Start+0x5c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002722:	d013      	beq.n	800274c <HAL_TIM_Base_Start+0x5c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <HAL_TIM_Base_Start+0xa4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_TIM_Base_Start+0x5c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_TIM_Base_Start+0xa8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_TIM_Base_Start+0x5c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a17      	ldr	r2, [pc, #92]	; (800279c <HAL_TIM_Base_Start+0xac>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_TIM_Base_Start+0x5c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <HAL_TIM_Base_Start+0xb0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d111      	bne.n	8002770 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b06      	cmp	r3, #6
 800275c:	d010      	beq.n	8002780 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276e:	e007      	b.n	8002780 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40010000 	.word	0x40010000
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40014000 	.word	0x40014000

080027a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <TIM_Base_SetConfig+0xfc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00f      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c2:	d00b      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a37      	ldr	r2, [pc, #220]	; (80028a4 <TIM_Base_SetConfig+0x100>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a36      	ldr	r2, [pc, #216]	; (80028a8 <TIM_Base_SetConfig+0x104>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a35      	ldr	r2, [pc, #212]	; (80028ac <TIM_Base_SetConfig+0x108>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d108      	bne.n	80027ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <TIM_Base_SetConfig+0xfc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01b      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d017      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <TIM_Base_SetConfig+0x100>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <TIM_Base_SetConfig+0x104>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00f      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a26      	ldr	r2, [pc, #152]	; (80028ac <TIM_Base_SetConfig+0x108>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00b      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <TIM_Base_SetConfig+0x10c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <TIM_Base_SetConfig+0x110>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d003      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <TIM_Base_SetConfig+0x114>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <TIM_Base_SetConfig+0xfc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b01      	cmp	r3, #1
 8002884:	d105      	bne.n	8002892 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f023 0201 	bic.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	611a      	str	r2, [r3, #16]
  }
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800
 80028ac:	40000c00 	.word	0x40000c00
 80028b0:	40014000 	.word	0x40014000
 80028b4:	40014400 	.word	0x40014400
 80028b8:	40014800 	.word	0x40014800

080028bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e042      	b.n	8002954 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fe42 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	; 0x24
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f973 	bl	8002bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b20      	cmp	r3, #32
 800297a:	d175      	bne.n	8002a68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_UART_Transmit+0x2c>
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e06e      	b.n	8002a6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2221      	movs	r2, #33	; 0x21
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299a:	f7fe ff31 	bl	8001800 <HAL_GetTick>
 800299e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d108      	bne.n	80029c8 <HAL_UART_Transmit+0x6c>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e003      	b.n	80029d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029d0:	e02e      	b.n	8002a30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f848 	bl	8002a72 <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e03a      	b.n	8002a6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10b      	bne.n	8002a12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e007      	b.n	8002a22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	781a      	ldrb	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1cb      	bne.n	80029d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2140      	movs	r1, #64	; 0x40
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f814 	bl	8002a72 <UART_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e006      	b.n	8002a6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a82:	e03b      	b.n	8002afc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d037      	beq.n	8002afc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8c:	f7fe feb8 	bl	8001800 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	6a3a      	ldr	r2, [r7, #32]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d302      	bcc.n	8002aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e03a      	b.n	8002b1c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d020      	beq.n	8002afc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b40      	cmp	r3, #64	; 0x40
 8002abe:	d01d      	beq.n	8002afc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d116      	bne.n	8002afc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f81d 	bl	8002b24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2208      	movs	r2, #8
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e00f      	b.n	8002b1c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4013      	ands	r3, r2
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d0b4      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b095      	sub	sp, #84	; 0x54
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	330c      	adds	r3, #12
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b4c:	643a      	str	r2, [r7, #64]	; 0x40
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e5      	bne.n	8002b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3314      	adds	r3, #20
 8002b66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	e853 3f00 	ldrex	r3, [r3]
 8002b6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3314      	adds	r3, #20
 8002b7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b88:	e841 2300 	strex	r3, r2, [r1]
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e5      	bne.n	8002b60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d119      	bne.n	8002bd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	e853 3f00 	ldrex	r3, [r3]
 8002baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f023 0310 	bic.w	r3, r3, #16
 8002bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bbc:	61ba      	str	r2, [r7, #24]
 8002bbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	6979      	ldr	r1, [r7, #20]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	e841 2300 	strex	r3, r2, [r1]
 8002bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e5      	bne.n	8002b9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bde:	bf00      	nop
 8002be0:	3754      	adds	r7, #84	; 0x54
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	b0c0      	sub	sp, #256	; 0x100
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	68d9      	ldr	r1, [r3, #12]
 8002c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	ea40 0301 	orr.w	r3, r0, r1
 8002c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c44:	f021 010c 	bic.w	r1, r1, #12
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c52:	430b      	orrs	r3, r1
 8002c54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	6999      	ldr	r1, [r3, #24]
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	ea40 0301 	orr.w	r3, r0, r1
 8002c72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b8f      	ldr	r3, [pc, #572]	; (8002eb8 <UART_SetConfig+0x2cc>)
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d005      	beq.n	8002c8c <UART_SetConfig+0xa0>
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b8d      	ldr	r3, [pc, #564]	; (8002ebc <UART_SetConfig+0x2d0>)
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d104      	bne.n	8002c96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c8c:	f7ff fccc 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002c90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c94:	e003      	b.n	8002c9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c96:	f7ff fcb3 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8002c9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca8:	f040 810c 	bne.w	8002ec4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	1891      	adds	r1, r2, r2
 8002cc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cc6:	415b      	adcs	r3, r3
 8002cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cce:	4621      	mov	r1, r4
 8002cd0:	eb12 0801 	adds.w	r8, r2, r1
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	eb43 0901 	adc.w	r9, r3, r1
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cee:	4690      	mov	r8, r2
 8002cf0:	4699      	mov	r9, r3
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	eb18 0303 	adds.w	r3, r8, r3
 8002cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	eb49 0303 	adc.w	r3, r9, r3
 8002d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	18db      	adds	r3, r3, r3
 8002d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d20:	4613      	mov	r3, r2
 8002d22:	eb42 0303 	adc.w	r3, r2, r3
 8002d26:	657b      	str	r3, [r7, #84]	; 0x54
 8002d28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d30:	f7fd ffb2 	bl	8000c98 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	011c      	lsls	r4, r3, #4
 8002d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d54:	4642      	mov	r2, r8
 8002d56:	464b      	mov	r3, r9
 8002d58:	1891      	adds	r1, r2, r2
 8002d5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d5c:	415b      	adcs	r3, r3
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d64:	4641      	mov	r1, r8
 8002d66:	eb12 0a01 	adds.w	sl, r2, r1
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d84:	4692      	mov	sl, r2
 8002d86:	469b      	mov	fp, r3
 8002d88:	4643      	mov	r3, r8
 8002d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d92:	464b      	mov	r3, r9
 8002d94:	eb4b 0303 	adc.w	r3, fp, r3
 8002d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002da8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002db0:	460b      	mov	r3, r1
 8002db2:	18db      	adds	r3, r3, r3
 8002db4:	643b      	str	r3, [r7, #64]	; 0x40
 8002db6:	4613      	mov	r3, r2
 8002db8:	eb42 0303 	adc.w	r3, r2, r3
 8002dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dc6:	f7fd ff67 	bl	8000c98 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2264      	movs	r2, #100	; 0x64
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	1acb      	subs	r3, r1, r3
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002de6:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002de8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002df4:	441c      	add	r4, r3
 8002df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e08:	4642      	mov	r2, r8
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	1891      	adds	r1, r2, r2
 8002e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e10:	415b      	adcs	r3, r3
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e18:	4641      	mov	r1, r8
 8002e1a:	1851      	adds	r1, r2, r1
 8002e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e1e:	4649      	mov	r1, r9
 8002e20:	414b      	adcs	r3, r1
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e30:	4659      	mov	r1, fp
 8002e32:	00cb      	lsls	r3, r1, #3
 8002e34:	4651      	mov	r1, sl
 8002e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	00ca      	lsls	r2, r1, #3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	4642      	mov	r2, r8
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e4c:	464b      	mov	r3, r9
 8002e4e:	460a      	mov	r2, r1
 8002e50:	eb42 0303 	adc.w	r3, r2, r3
 8002e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	18db      	adds	r3, r3, r3
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e72:	4613      	mov	r3, r2
 8002e74:	eb42 0303 	adc.w	r3, r2, r3
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e82:	f7fd ff09 	bl	8000c98 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	2164      	movs	r1, #100	; 0x64
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	3332      	adds	r3, #50	; 0x32
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <UART_SetConfig+0x2d4>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	f003 0207 	and.w	r2, r3, #7
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4422      	add	r2, r4
 8002eb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eb4:	e106      	b.n	80030c4 <UART_SetConfig+0x4d8>
 8002eb6:	bf00      	nop
 8002eb8:	40011000 	.word	0x40011000
 8002ebc:	40011400 	.word	0x40011400
 8002ec0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ece:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ed2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ed6:	4642      	mov	r2, r8
 8002ed8:	464b      	mov	r3, r9
 8002eda:	1891      	adds	r1, r2, r2
 8002edc:	6239      	str	r1, [r7, #32]
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	1854      	adds	r4, r2, r1
 8002eea:	4649      	mov	r1, r9
 8002eec:	eb43 0501 	adc.w	r5, r3, r1
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	00eb      	lsls	r3, r5, #3
 8002efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002efe:	00e2      	lsls	r2, r4, #3
 8002f00:	4614      	mov	r4, r2
 8002f02:	461d      	mov	r5, r3
 8002f04:	4643      	mov	r3, r8
 8002f06:	18e3      	adds	r3, r4, r3
 8002f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f0c:	464b      	mov	r3, r9
 8002f0e:	eb45 0303 	adc.w	r3, r5, r3
 8002f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f32:	4629      	mov	r1, r5
 8002f34:	008b      	lsls	r3, r1, #2
 8002f36:	4621      	mov	r1, r4
 8002f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	008a      	lsls	r2, r1, #2
 8002f40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f44:	f7fd fea8 	bl	8000c98 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <UART_SetConfig+0x4e4>)
 8002f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	011c      	lsls	r4, r3, #4
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	1891      	adds	r1, r2, r2
 8002f6e:	61b9      	str	r1, [r7, #24]
 8002f70:	415b      	adcs	r3, r3
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f78:	4641      	mov	r1, r8
 8002f7a:	1851      	adds	r1, r2, r1
 8002f7c:	6139      	str	r1, [r7, #16]
 8002f7e:	4649      	mov	r1, r9
 8002f80:	414b      	adcs	r3, r1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f90:	4659      	mov	r1, fp
 8002f92:	00cb      	lsls	r3, r1, #3
 8002f94:	4651      	mov	r1, sl
 8002f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	00ca      	lsls	r2, r1, #3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fac:	464b      	mov	r3, r9
 8002fae:	460a      	mov	r2, r1
 8002fb0:	eb42 0303 	adc.w	r3, r2, r3
 8002fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	008b      	lsls	r3, r1, #2
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fda:	4641      	mov	r1, r8
 8002fdc:	008a      	lsls	r2, r1, #2
 8002fde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fe2:	f7fd fe59 	bl	8000c98 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <UART_SetConfig+0x4e4>)
 8002fee:	fba3 2301 	umull	r2, r3, r3, r1
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2264      	movs	r2, #100	; 0x64
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	1acb      	subs	r3, r1, r3
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	3332      	adds	r3, #50	; 0x32
 8003000:	4a33      	ldr	r2, [pc, #204]	; (80030d0 <UART_SetConfig+0x4e4>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300c:	441c      	add	r4, r3
 800300e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003012:	2200      	movs	r2, #0
 8003014:	673b      	str	r3, [r7, #112]	; 0x70
 8003016:	677a      	str	r2, [r7, #116]	; 0x74
 8003018:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	1891      	adds	r1, r2, r2
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	415b      	adcs	r3, r3
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800302c:	4641      	mov	r1, r8
 800302e:	1851      	adds	r1, r2, r1
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	4649      	mov	r1, r9
 8003034:	414b      	adcs	r3, r1
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003044:	4659      	mov	r1, fp
 8003046:	00cb      	lsls	r3, r1, #3
 8003048:	4651      	mov	r1, sl
 800304a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800304e:	4651      	mov	r1, sl
 8003050:	00ca      	lsls	r2, r1, #3
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	4603      	mov	r3, r0
 8003058:	4642      	mov	r2, r8
 800305a:	189b      	adds	r3, r3, r2
 800305c:	66bb      	str	r3, [r7, #104]	; 0x68
 800305e:	464b      	mov	r3, r9
 8003060:	460a      	mov	r2, r1
 8003062:	eb42 0303 	adc.w	r3, r2, r3
 8003066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	663b      	str	r3, [r7, #96]	; 0x60
 8003072:	667a      	str	r2, [r7, #100]	; 0x64
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003080:	4649      	mov	r1, r9
 8003082:	008b      	lsls	r3, r1, #2
 8003084:	4641      	mov	r1, r8
 8003086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800308a:	4641      	mov	r1, r8
 800308c:	008a      	lsls	r2, r1, #2
 800308e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003092:	f7fd fe01 	bl	8000c98 <__aeabi_uldivmod>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <UART_SetConfig+0x4e4>)
 800309c:	fba3 1302 	umull	r1, r3, r3, r2
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	2164      	movs	r1, #100	; 0x64
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	3332      	adds	r3, #50	; 0x32
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <UART_SetConfig+0x4e4>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4422      	add	r2, r4
 80030c2:	609a      	str	r2, [r3, #8]
}
 80030c4:	bf00      	nop
 80030c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030ca:	46bd      	mov	sp, r7
 80030cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d0:	51eb851f 	.word	0x51eb851f

080030d4 <lidar_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool lidar_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_lidar_model_activations_map, 1, params)) {
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	2101      	movs	r1, #1
 80030e2:	482a      	ldr	r0, [pc, #168]	; (800318c <lidar_model_configure_activations+0xb8>)
 80030e4:	f000 fadc 	bl	80036a0 <ai_platform_get_activations_map>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d043      	beq.n	8003176 <lidar_model_configure_activations+0xa2>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_9_input0_output_array.data = AI_PTR(g_lidar_model_activations_map[0] + 0);
 80030ee:	4b27      	ldr	r3, [pc, #156]	; (800318c <lidar_model_configure_activations+0xb8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a27      	ldr	r2, [pc, #156]	; (8003190 <lidar_model_configure_activations+0xbc>)
 80030f4:	6093      	str	r3, [r2, #8]
    serving_default_dense_9_input0_output_array.data_start = AI_PTR(g_lidar_model_activations_map[0] + 0);
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <lidar_model_configure_activations+0xb8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a25      	ldr	r2, [pc, #148]	; (8003190 <lidar_model_configure_activations+0xbc>)
 80030fc:	60d3      	str	r3, [r2, #12]
    
    gemm_0_output_array.data = AI_PTR(g_lidar_model_activations_map[0] + 640);
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <lidar_model_configure_activations+0xb8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003106:	4a23      	ldr	r2, [pc, #140]	; (8003194 <lidar_model_configure_activations+0xc0>)
 8003108:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_lidar_model_activations_map[0] + 640);
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <lidar_model_configure_activations+0xb8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003112:	4a20      	ldr	r2, [pc, #128]	; (8003194 <lidar_model_configure_activations+0xc0>)
 8003114:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_lidar_model_activations_map[0] + 0);
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <lidar_model_configure_activations+0xb8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <lidar_model_configure_activations+0xc4>)
 800311c:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_lidar_model_activations_map[0] + 0);
 800311e:	4b1b      	ldr	r3, [pc, #108]	; (800318c <lidar_model_configure_activations+0xb8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <lidar_model_configure_activations+0xc4>)
 8003124:	60d3      	str	r3, [r2, #12]
    
    gemm_1_output_array.data = AI_PTR(g_lidar_model_activations_map[0] + 256);
 8003126:	4b19      	ldr	r3, [pc, #100]	; (800318c <lidar_model_configure_activations+0xb8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <lidar_model_configure_activations+0xc8>)
 8003130:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_lidar_model_activations_map[0] + 256);
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <lidar_model_configure_activations+0xb8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800313a:	4a18      	ldr	r2, [pc, #96]	; (800319c <lidar_model_configure_activations+0xc8>)
 800313c:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_lidar_model_activations_map[0] + 0);
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <lidar_model_configure_activations+0xb8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <lidar_model_configure_activations+0xcc>)
 8003144:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_lidar_model_activations_map[0] + 0);
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <lidar_model_configure_activations+0xb8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <lidar_model_configure_activations+0xcc>)
 800314c:	60d3      	str	r3, [r2, #12]
    
    gemm_2_output_array.data = AI_PTR(g_lidar_model_activations_map[0] + 128);
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <lidar_model_configure_activations+0xb8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3380      	adds	r3, #128	; 0x80
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <lidar_model_configure_activations+0xd0>)
 8003156:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_lidar_model_activations_map[0] + 128);
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <lidar_model_configure_activations+0xb8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3380      	adds	r3, #128	; 0x80
 800315e:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <lidar_model_configure_activations+0xd0>)
 8003160:	60d3      	str	r3, [r2, #12]
    
    nl_3_output_array.data = AI_PTR(g_lidar_model_activations_map[0] + 0);
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <lidar_model_configure_activations+0xb8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <lidar_model_configure_activations+0xd4>)
 8003168:	6093      	str	r3, [r2, #8]
    nl_3_output_array.data_start = AI_PTR(g_lidar_model_activations_map[0] + 0);
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <lidar_model_configure_activations+0xb8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <lidar_model_configure_activations+0xd4>)
 8003170:	60d3      	str	r3, [r2, #12]
    
    return true;
 8003172:	2301      	movs	r3, #1
 8003174:	e005      	b.n	8003182 <lidar_model_configure_activations+0xae>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003176:	2213      	movs	r2, #19
 8003178:	2130      	movs	r1, #48	; 0x30
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fb74 	bl	8003868 <ai_platform_network_set_error>
  return false;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20001008 	.word	0x20001008
 8003190:	2000002c 	.word	0x2000002c
 8003194:	2000003c 	.word	0x2000003c
 8003198:	2000004c 	.word	0x2000004c
 800319c:	2000005c 	.word	0x2000005c
 80031a0:	2000006c 	.word	0x2000006c
 80031a4:	2000007c 	.word	0x2000007c
 80031a8:	2000008c 	.word	0x2000008c

080031ac <lidar_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool lidar_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_lidar_model_weights_map, 1, params)) {
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	4840      	ldr	r0, [pc, #256]	; (80032bc <lidar_model_configure_weights+0x110>)
 80031bc:	f000 fa1c 	bl	80035f8 <ai_platform_get_weights_map>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d06f      	beq.n	80032a6 <lidar_model_configure_weights+0xfa>
    /* Updating weights (byte) offsets */
    
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <lidar_model_configure_weights+0x114>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ce:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <lidar_model_configure_weights+0x114>)
 80031d0:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_lidar_model_weights_map[0] + 0);
 80031d2:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <lidar_model_configure_weights+0x110>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a3a      	ldr	r2, [pc, #232]	; (80032c0 <lidar_model_configure_weights+0x114>)
 80031d8:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_lidar_model_weights_map[0] + 0);
 80031da:	4b38      	ldr	r3, [pc, #224]	; (80032bc <lidar_model_configure_weights+0x110>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a38      	ldr	r2, [pc, #224]	; (80032c0 <lidar_model_configure_weights+0x114>)
 80031e0:	60d3      	str	r3, [r2, #12]
    
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <lidar_model_configure_weights+0x118>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ea:	4a36      	ldr	r2, [pc, #216]	; (80032c4 <lidar_model_configure_weights+0x118>)
 80031ec:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_lidar_model_weights_map[0] + 384);
 80031ee:	4b33      	ldr	r3, [pc, #204]	; (80032bc <lidar_model_configure_weights+0x110>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80031f6:	4a33      	ldr	r2, [pc, #204]	; (80032c4 <lidar_model_configure_weights+0x118>)
 80031f8:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_lidar_model_weights_map[0] + 384);
 80031fa:	4b30      	ldr	r3, [pc, #192]	; (80032bc <lidar_model_configure_weights+0x110>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003202:	4a30      	ldr	r2, [pc, #192]	; (80032c4 <lidar_model_configure_weights+0x118>)
 8003204:	60d3      	str	r3, [r2, #12]
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8003206:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <lidar_model_configure_weights+0x11c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800320e:	4a2e      	ldr	r2, [pc, #184]	; (80032c8 <lidar_model_configure_weights+0x11c>)
 8003210:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_lidar_model_weights_map[0] + 396);
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <lidar_model_configure_weights+0x110>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800321a:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <lidar_model_configure_weights+0x11c>)
 800321c:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_lidar_model_weights_map[0] + 396);
 800321e:	4b27      	ldr	r3, [pc, #156]	; (80032bc <lidar_model_configure_weights+0x110>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003226:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <lidar_model_configure_weights+0x11c>)
 8003228:	60d3      	str	r3, [r2, #12]
    
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800322a:	4b28      	ldr	r3, [pc, #160]	; (80032cc <lidar_model_configure_weights+0x120>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003232:	4a26      	ldr	r2, [pc, #152]	; (80032cc <lidar_model_configure_weights+0x120>)
 8003234:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_lidar_model_weights_map[0] + 41356);
 8003236:	4b21      	ldr	r3, [pc, #132]	; (80032bc <lidar_model_configure_weights+0x110>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f503 4321 	add.w	r3, r3, #41216	; 0xa100
 800323e:	338c      	adds	r3, #140	; 0x8c
 8003240:	4a22      	ldr	r2, [pc, #136]	; (80032cc <lidar_model_configure_weights+0x120>)
 8003242:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_lidar_model_weights_map[0] + 41356);
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <lidar_model_configure_weights+0x110>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f503 4321 	add.w	r3, r3, #41216	; 0xa100
 800324c:	338c      	adds	r3, #140	; 0x8c
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <lidar_model_configure_weights+0x120>)
 8003250:	60d3      	str	r3, [r2, #12]
    
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <lidar_model_configure_weights+0x124>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800325a:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <lidar_model_configure_weights+0x124>)
 800325c:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_lidar_model_weights_map[0] + 41612);
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <lidar_model_configure_weights+0x110>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 8003266:	338c      	adds	r3, #140	; 0x8c
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <lidar_model_configure_weights+0x124>)
 800326a:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_lidar_model_weights_map[0] + 41612);
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <lidar_model_configure_weights+0x110>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 8003274:	338c      	adds	r3, #140	; 0x8c
 8003276:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <lidar_model_configure_weights+0x124>)
 8003278:	60d3      	str	r3, [r2, #12]
    
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <lidar_model_configure_weights+0x128>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <lidar_model_configure_weights+0x128>)
 8003284:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_lidar_model_weights_map[0] + 49804);
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <lidar_model_configure_weights+0x110>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 800328e:	338c      	adds	r3, #140	; 0x8c
 8003290:	4a10      	ldr	r2, [pc, #64]	; (80032d4 <lidar_model_configure_weights+0x128>)
 8003292:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_lidar_model_weights_map[0] + 49804);
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <lidar_model_configure_weights+0x110>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f503 4342 	add.w	r3, r3, #49664	; 0xc200
 800329c:	338c      	adds	r3, #140	; 0x8c
 800329e:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <lidar_model_configure_weights+0x128>)
 80032a0:	60d3      	str	r3, [r2, #12]
    
    return true;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e005      	b.n	80032b2 <lidar_model_configure_weights+0x106>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80032a6:	2212      	movs	r2, #18
 80032a8:	2130      	movs	r1, #48	; 0x30
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fadc 	bl	8003868 <ai_platform_network_set_error>
  return false;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	2000100c 	.word	0x2000100c
 80032c0:	2000000c 	.word	0x2000000c
 80032c4:	2000001c 	.word	0x2000001c
 80032c8:	2000009c 	.word	0x2000009c
 80032cc:	200000ac 	.word	0x200000ac
 80032d0:	200000bc 	.word	0x200000bc
 80032d4:	200000cc 	.word	0x200000cc

080032d8 <ai_lidar_model_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_lidar_model_get_error(ai_handle network)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fa53 	bl	800378c <ai_platform_network_get_error>
 80032e6:	4603      	mov	r3, r0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <ai_lidar_model_create>:

AI_API_ENTRY
ai_error ai_lidar_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80032fa:	2300      	movs	r3, #0
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2305      	movs	r3, #5
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2301      	movs	r3, #1
 8003304:	4a04      	ldr	r2, [pc, #16]	; (8003318 <ai_lidar_model_create+0x28>)
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fc59 	bl	8003bc0 <ai_platform_network_create>
 800330e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000694 	.word	0x20000694

0800331c <ai_lidar_model_create_and_init>:

AI_API_ENTRY
ai_error ai_lidar_model_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b096      	sub	sp, #88	; 0x58
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_lidar_model_create(network, AI_LIDAR_MODEL_DATA_CONFIG);
 8003328:	2100      	movs	r1, #0
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7ff ffe0 	bl	80032f0 <ai_lidar_model_create>
 8003330:	4603      	mov	r3, r0
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8003334:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <ai_lidar_model_create_and_init+0x24>
        return err;
 800333c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333e:	e05d      	b.n	80033fc <ai_lidar_model_create_and_init+0xe0>
    if (ai_lidar_model_data_params_get(&params) != true) {
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f8dd 	bl	8003504 <ai_lidar_model_data_params_get>
 800334a:	4603      	mov	r3, r0
 800334c:	f083 0301 	eor.w	r3, r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <ai_lidar_model_create_and_init+0x4c>
        err = ai_lidar_model_get_error(*network);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffbc 	bl	80032d8 <ai_lidar_model_get_error>
 8003360:	4603      	mov	r3, r0
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8003364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003366:	e049      	b.n	80033fc <ai_lidar_model_create_and_init+0xe0>
    }
#if defined(AI_LIDAR_MODEL_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <ai_lidar_model_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800336e:	2300      	movs	r3, #0
 8003370:	657b      	str	r3, [r7, #84]	; 0x54
 8003372:	e00e      	b.n	8003392 <ai_lidar_model_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8003374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4413      	add	r3, r2
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	330c      	adds	r3, #12
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f922 	bl	80035d0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800338c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800338e:	3301      	adds	r3, #1
 8003390:	657b      	str	r3, [r7, #84]	; 0x54
 8003392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003394:	461a      	mov	r2, r3
 8003396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003398:	4293      	cmp	r3, r2
 800339a:	dbeb      	blt.n	8003374 <ai_lidar_model_create_and_init+0x58>
    }
#endif
#if defined(AI_LIDAR_MODEL_DATA_WEIGHTS_COUNT)
    if (weights) {
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <ai_lidar_model_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	653b      	str	r3, [r7, #80]	; 0x50
 80033a6:	e00e      	b.n	80033c6 <ai_lidar_model_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80033a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80033aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	3304      	adds	r3, #4
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f908 	bl	80035d0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80033c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c2:	3301      	adds	r3, #1
 80033c4:	653b      	str	r3, [r7, #80]	; 0x50
 80033c6:	8b7b      	ldrh	r3, [r7, #26]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033cc:	4293      	cmp	r3, r2
 80033ce:	dbeb      	blt.n	80033a8 <ai_lidar_model_create_and_init+0x8c>
    }
#endif
    if (ai_lidar_model_init(*network, &params) != true) {
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f107 0214 	add.w	r2, r7, #20
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f846 	bl	800346c <ai_lidar_model_init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f083 0301 	eor.w	r3, r3, #1
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d006      	beq.n	80033fa <ai_lidar_model_create_and_init+0xde>
        err = ai_lidar_model_get_error(*network);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff71 	bl	80032d8 <ai_lidar_model_get_error>
 80033f6:	4603      	mov	r3, r0
 80033f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80033fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3758      	adds	r7, #88	; 0x58
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <ai_lidar_model_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_lidar_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <ai_lidar_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <ai_lidar_model_inputs_get+0x2c>)
 8003416:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a06      	ldr	r2, [pc, #24]	; (8003434 <ai_lidar_model_inputs_get+0x30>)
 800341c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800341e:	6839      	ldr	r1, [r7, #0]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fa27 	bl	8003874 <ai_platform_inputs_get>
 8003426:	4603      	mov	r3, r0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000694 	.word	0x20000694
 8003434:	a1c00100 	.word	0xa1c00100

08003438 <ai_lidar_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_lidar_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <ai_lidar_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <ai_lidar_model_outputs_get+0x2c>)
 800344a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a06      	ldr	r2, [pc, #24]	; (8003468 <ai_lidar_model_outputs_get+0x30>)
 8003450:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8003452:	6839      	ldr	r1, [r7, #0]
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fae3 	bl	8003a20 <ai_platform_outputs_get>
 800345a:	4603      	mov	r3, r0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000694 	.word	0x20000694
 8003468:	a1c00100 	.word	0xa1c00100

0800346c <ai_lidar_model_init>:
}

AI_API_ENTRY
ai_bool ai_lidar_model_init(
  ai_handle network, const ai_network_params* params)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fc77 	bl	8003d6c <ai_platform_network_init>
 800347e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <ai_lidar_model_init+0x1e>
 8003486:	2300      	movs	r3, #0
 8003488:	e028      	b.n	80034dc <ai_lidar_model_init+0x70>

  ai_bool ok = true;
 800348a:	2301      	movs	r3, #1
 800348c:	72fb      	strb	r3, [r7, #11]
  ok &= lidar_model_configure_weights(net_ctx, params);
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff fe8b 	bl	80031ac <lidar_model_configure_weights>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	7afb      	ldrb	r3, [r7, #11]
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	72fb      	strb	r3, [r7, #11]
  ok &= lidar_model_configure_activations(net_ctx, params);
 80034a8:	6839      	ldr	r1, [r7, #0]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff fe12 	bl	80030d4 <lidar_model_configure_activations>
 80034b0:	4603      	mov	r3, r0
 80034b2:	461a      	mov	r2, r3
 80034b4:	7afb      	ldrb	r3, [r7, #11]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fd40 	bl	8003f48 <ai_platform_network_post_init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	7afb      	ldrb	r3, [r7, #11]
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	72fb      	strb	r3, [r7, #11]

  return ok;
 80034da:	7afb      	ldrb	r3, [r7, #11]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <ai_lidar_model_run>:


AI_API_ENTRY
ai_i32 ai_lidar_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fdaf 	bl	8004058 <ai_platform_network_process>
 80034fa:	4603      	mov	r3, r0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <ai_lidar_model_data_params_get>:
 * @ingroup lidar_model_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_lidar_model_data_params_get(ai_network_params* params)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <ai_lidar_model_data_params_get+0x12>
 8003512:	2300      	movs	r3, #0
 8003514:	e016      	b.n	8003544 <ai_lidar_model_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8003516:	4a0d      	ldr	r2, [pc, #52]	; (800354c <ai_lidar_model_data_params_get+0x48>)
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003520:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_LIDAR_MODEL_DATA_ACTIVATIONS_COUNT, g_lidar_model_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003524:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <ai_lidar_model_data_params_get+0x4c>)
 8003526:	f107 0308 	add.w	r3, r7, #8
 800352a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800352e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_LIDAR_MODEL_DATA_WEIGHTS_COUNT, g_lidar_model_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8003532:	f107 0210 	add.w	r2, r7, #16
 8003536:	f107 0308 	add.w	r3, r7, #8
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f903 	bl	8003748 <ai_platform_bind_network_params>
 8003542:	4603      	mov	r3, r0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	0800a2a4 	.word	0x0800a2a4
 8003550:	0800a2ac 	.word	0x0800a2ac

08003554 <ai_buffer_get_size>:
 8003554:	b378      	cbz	r0, 80035b6 <ai_buffer_get_size+0x62>
 8003556:	b410      	push	{r4}
 8003558:	6803      	ldr	r3, [r0, #0]
 800355a:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <ai_buffer_get_size+0x64>)
 800355c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003560:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003564:	4293      	cmp	r3, r2
 8003566:	d01e      	beq.n	80035a6 <ai_buffer_get_size+0x52>
 8003568:	6984      	ldr	r4, [r0, #24]
 800356a:	6862      	ldr	r2, [r4, #4]
 800356c:	7d03      	ldrb	r3, [r0, #20]
 800356e:	6941      	ldr	r1, [r0, #20]
 8003570:	f1a3 0301 	sub.w	r3, r3, #1
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800357e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8003582:	da0b      	bge.n	800359c <ai_buffer_get_size+0x48>
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <ai_buffer_get_size+0x3a>
 8003588:	2802      	cmp	r0, #2
 800358a:	d007      	beq.n	800359c <ai_buffer_get_size+0x48>
 800358c:	2302      	movs	r3, #2
 800358e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8003592:	3301      	adds	r3, #1
 8003594:	4298      	cmp	r0, r3
 8003596:	fb01 f202 	mul.w	r2, r1, r2
 800359a:	d1f3      	bne.n	8003584 <ai_buffer_get_size+0x30>
 800359c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80035a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d0de      	beq.n	8003568 <ai_buffer_get_size+0x14>
 80035aa:	6984      	ldr	r4, [r0, #24]
 80035ac:	6863      	ldr	r3, [r4, #4]
 80035ae:	331f      	adds	r3, #31
 80035b0:	f023 021f 	bic.w	r2, r3, #31
 80035b4:	e7da      	b.n	800356c <ai_buffer_get_size+0x18>
 80035b6:	4770      	bx	lr
 80035b8:	000400c0 	.word	0x000400c0

080035bc <ai_buffer_array_sane>:
 80035bc:	b138      	cbz	r0, 80035ce <ai_buffer_array_sane+0x12>
 80035be:	6843      	ldr	r3, [r0, #4]
 80035c0:	b123      	cbz	r3, 80035cc <ai_buffer_array_sane+0x10>
 80035c2:	8840      	ldrh	r0, [r0, #2]
 80035c4:	3800      	subs	r0, #0
 80035c6:	bf18      	it	ne
 80035c8:	2001      	movne	r0, #1
 80035ca:	4770      	bx	lr
 80035cc:	4618      	mov	r0, r3
 80035ce:	4770      	bx	lr

080035d0 <ai_buffer_array_item_set_address>:
 80035d0:	b150      	cbz	r0, 80035e8 <ai_buffer_array_item_set_address+0x18>
 80035d2:	6843      	ldr	r3, [r0, #4]
 80035d4:	b14b      	cbz	r3, 80035ea <ai_buffer_array_item_set_address+0x1a>
 80035d6:	8840      	ldrh	r0, [r0, #2]
 80035d8:	b900      	cbnz	r0, 80035dc <ai_buffer_array_item_set_address+0xc>
 80035da:	4770      	bx	lr
 80035dc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80035e0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80035e4:	2001      	movs	r0, #1
 80035e6:	604a      	str	r2, [r1, #4]
 80035e8:	4770      	bx	lr
 80035ea:	4618      	mov	r0, r3
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop

080035f0 <_ai_platform_acquire_crc>:
 80035f0:	2001      	movs	r0, #1
 80035f2:	4770      	bx	lr

080035f4 <_ai_platform_release_crc>:
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop

080035f8 <ai_platform_get_weights_map>:
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d037      	beq.n	800366c <ai_platform_get_weights_map+0x74>
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	4604      	mov	r4, r0
 8003600:	b1a0      	cbz	r0, 800362c <ai_platform_get_weights_map+0x34>
 8003602:	460f      	mov	r7, r1
 8003604:	b191      	cbz	r1, 800362c <ai_platform_get_weights_map+0x34>
 8003606:	4b25      	ldr	r3, [pc, #148]	; (800369c <ai_platform_get_weights_map+0xa4>)
 8003608:	6810      	ldr	r0, [r2, #0]
 800360a:	4298      	cmp	r0, r3
 800360c:	4615      	mov	r5, r2
 800360e:	d00f      	beq.n	8003630 <ai_platform_get_weights_map+0x38>
 8003610:	6855      	ldr	r5, [r2, #4]
 8003612:	b15d      	cbz	r5, 800362c <ai_platform_get_weights_map+0x34>
 8003614:	682e      	ldr	r6, [r5, #0]
 8003616:	429e      	cmp	r6, r3
 8003618:	d02a      	beq.n	8003670 <ai_platform_get_weights_map+0x78>
 800361a:	f1a1 0001 	sub.w	r0, r1, #1
 800361e:	6025      	str	r5, [r4, #0]
 8003620:	fab0 f080 	clz	r0, r0
 8003624:	0940      	lsrs	r0, r0, #5
 8003626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003628:	42a7      	cmp	r7, r4
 800362a:	d034      	beq.n	8003696 <ai_platform_get_weights_map+0x9e>
 800362c:	2000      	movs	r0, #0
 800362e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003630:	1d10      	adds	r0, r2, #4
 8003632:	f7ff ffc3 	bl	80035bc <ai_buffer_array_sane>
 8003636:	2800      	cmp	r0, #0
 8003638:	d0f8      	beq.n	800362c <ai_platform_get_weights_map+0x34>
 800363a:	88eb      	ldrh	r3, [r5, #6]
 800363c:	429f      	cmp	r7, r3
 800363e:	d1f5      	bne.n	800362c <ai_platform_get_weights_map+0x34>
 8003640:	f04f 0e00 	mov.w	lr, #0
 8003644:	1f23      	subs	r3, r4, #4
 8003646:	4670      	mov	r0, lr
 8003648:	68aa      	ldr	r2, [r5, #8]
 800364a:	eb02 0c0e 	add.w	ip, r2, lr
 800364e:	f10e 0e1c 	add.w	lr, lr, #28
 8003652:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003656:	b124      	cbz	r4, 8003662 <ai_platform_get_weights_map+0x6a>
 8003658:	3001      	adds	r0, #1
 800365a:	4287      	cmp	r7, r0
 800365c:	f843 4f04 	str.w	r4, [r3, #4]!
 8003660:	d1f2      	bne.n	8003648 <ai_platform_get_weights_map+0x50>
 8003662:	1a38      	subs	r0, r7, r0
 8003664:	fab0 f080 	clz	r0, r0
 8003668:	0940      	lsrs	r0, r0, #5
 800366a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800366c:	2000      	movs	r0, #0
 800366e:	4770      	bx	lr
 8003670:	1f23      	subs	r3, r4, #4
 8003672:	4628      	mov	r0, r5
 8003674:	2400      	movs	r4, #0
 8003676:	e000      	b.n	800367a <ai_platform_get_weights_map+0x82>
 8003678:	4614      	mov	r4, r2
 800367a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800367e:	42b2      	cmp	r2, r6
 8003680:	d0d2      	beq.n	8003628 <ai_platform_get_weights_map+0x30>
 8003682:	f843 2f04 	str.w	r2, [r3, #4]!
 8003686:	1c62      	adds	r2, r4, #1
 8003688:	4297      	cmp	r7, r2
 800368a:	d1f5      	bne.n	8003678 <ai_platform_get_weights_map+0x80>
 800368c:	3402      	adds	r4, #2
 800368e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003692:	42b3      	cmp	r3, r6
 8003694:	d1ca      	bne.n	800362c <ai_platform_get_weights_map+0x34>
 8003696:	2001      	movs	r0, #1
 8003698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800369a:	bf00      	nop
 800369c:	a1facade 	.word	0xa1facade

080036a0 <ai_platform_get_activations_map>:
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	d038      	beq.n	8003716 <ai_platform_get_activations_map+0x76>
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	4604      	mov	r4, r0
 80036a8:	b1a0      	cbz	r0, 80036d4 <ai_platform_get_activations_map+0x34>
 80036aa:	460f      	mov	r7, r1
 80036ac:	b191      	cbz	r1, 80036d4 <ai_platform_get_activations_map+0x34>
 80036ae:	4b25      	ldr	r3, [pc, #148]	; (8003744 <ai_platform_get_activations_map+0xa4>)
 80036b0:	6810      	ldr	r0, [r2, #0]
 80036b2:	4298      	cmp	r0, r3
 80036b4:	4615      	mov	r5, r2
 80036b6:	d00f      	beq.n	80036d8 <ai_platform_get_activations_map+0x38>
 80036b8:	6a15      	ldr	r5, [r2, #32]
 80036ba:	b15d      	cbz	r5, 80036d4 <ai_platform_get_activations_map+0x34>
 80036bc:	682e      	ldr	r6, [r5, #0]
 80036be:	429e      	cmp	r6, r3
 80036c0:	d02b      	beq.n	800371a <ai_platform_get_activations_map+0x7a>
 80036c2:	f1a1 0001 	sub.w	r0, r1, #1
 80036c6:	6025      	str	r5, [r4, #0]
 80036c8:	fab0 f080 	clz	r0, r0
 80036cc:	0940      	lsrs	r0, r0, #5
 80036ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d0:	42a7      	cmp	r7, r4
 80036d2:	d035      	beq.n	8003740 <ai_platform_get_activations_map+0xa0>
 80036d4:	2000      	movs	r0, #0
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d8:	f102 000c 	add.w	r0, r2, #12
 80036dc:	f7ff ff6e 	bl	80035bc <ai_buffer_array_sane>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d0f7      	beq.n	80036d4 <ai_platform_get_activations_map+0x34>
 80036e4:	89eb      	ldrh	r3, [r5, #14]
 80036e6:	429f      	cmp	r7, r3
 80036e8:	d1f4      	bne.n	80036d4 <ai_platform_get_activations_map+0x34>
 80036ea:	f04f 0e00 	mov.w	lr, #0
 80036ee:	1f23      	subs	r3, r4, #4
 80036f0:	4670      	mov	r0, lr
 80036f2:	692a      	ldr	r2, [r5, #16]
 80036f4:	eb02 0c0e 	add.w	ip, r2, lr
 80036f8:	f10e 0e1c 	add.w	lr, lr, #28
 80036fc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003700:	b124      	cbz	r4, 800370c <ai_platform_get_activations_map+0x6c>
 8003702:	3001      	adds	r0, #1
 8003704:	4287      	cmp	r7, r0
 8003706:	f843 4f04 	str.w	r4, [r3, #4]!
 800370a:	d1f2      	bne.n	80036f2 <ai_platform_get_activations_map+0x52>
 800370c:	1a38      	subs	r0, r7, r0
 800370e:	fab0 f080 	clz	r0, r0
 8003712:	0940      	lsrs	r0, r0, #5
 8003714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003716:	2000      	movs	r0, #0
 8003718:	4770      	bx	lr
 800371a:	1f23      	subs	r3, r4, #4
 800371c:	4628      	mov	r0, r5
 800371e:	2400      	movs	r4, #0
 8003720:	e000      	b.n	8003724 <ai_platform_get_activations_map+0x84>
 8003722:	4614      	mov	r4, r2
 8003724:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003728:	42b2      	cmp	r2, r6
 800372a:	d0d1      	beq.n	80036d0 <ai_platform_get_activations_map+0x30>
 800372c:	f843 2f04 	str.w	r2, [r3, #4]!
 8003730:	1c62      	adds	r2, r4, #1
 8003732:	4297      	cmp	r7, r2
 8003734:	d1f5      	bne.n	8003722 <ai_platform_get_activations_map+0x82>
 8003736:	3402      	adds	r4, #2
 8003738:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800373c:	42b3      	cmp	r3, r6
 800373e:	d1c9      	bne.n	80036d4 <ai_platform_get_activations_map+0x34>
 8003740:	2001      	movs	r0, #1
 8003742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003744:	a1facade 	.word	0xa1facade

08003748 <ai_platform_bind_network_params>:
 8003748:	b1a0      	cbz	r0, 8003774 <ai_platform_bind_network_params+0x2c>
 800374a:	b1b1      	cbz	r1, 800377a <ai_platform_bind_network_params+0x32>
 800374c:	b1c2      	cbz	r2, 8003780 <ai_platform_bind_network_params+0x38>
 800374e:	b410      	push	{r4}
 8003750:	4603      	mov	r3, r0
 8003752:	4c0d      	ldr	r4, [pc, #52]	; (8003788 <ai_platform_bind_network_params+0x40>)
 8003754:	f843 4b04 	str.w	r4, [r3], #4
 8003758:	f100 0c0c 	add.w	ip, r0, #12
 800375c:	c903      	ldmia	r1, {r0, r1}
 800375e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003766:	e88c 0003 	stmia.w	ip, {r0, r1}
 800376a:	2301      	movs	r3, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	4603      	mov	r3, r0
 8003776:	4618      	mov	r0, r3
 8003778:	4770      	bx	lr
 800377a:	460b      	mov	r3, r1
 800377c:	4618      	mov	r0, r3
 800377e:	4770      	bx	lr
 8003780:	4613      	mov	r3, r2
 8003782:	4618      	mov	r0, r3
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	a1facade 	.word	0xa1facade

0800378c <ai_platform_network_get_error>:
 800378c:	b510      	push	{r4, lr}
 800378e:	b1f0      	cbz	r0, 80037ce <ai_platform_network_get_error+0x42>
 8003790:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <ai_platform_network_get_error+0xc4>)
 8003792:	6802      	ldr	r2, [r0, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	4604      	mov	r4, r0
 8003798:	d119      	bne.n	80037ce <ai_platform_network_get_error+0x42>
 800379a:	f7ff ff29 	bl	80035f0 <_ai_platform_acquire_crc>
 800379e:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <ai_platform_network_get_error+0xc8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d03c      	beq.n	8003826 <ai_platform_network_get_error+0x9a>
 80037ac:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <ai_platform_network_get_error+0xcc>)
 80037ae:	2301      	movs	r3, #1
 80037b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80037b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1fb      	bne.n	80037b4 <ai_platform_network_get_error+0x28>
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <ai_platform_network_get_error+0xd0>)
 80037be:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80037c2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <ai_platform_network_get_error+0xd4>)
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d038      	beq.n	800383e <ai_platform_network_get_error+0xb2>
 80037cc:	e7fe      	b.n	80037cc <ai_platform_network_get_error+0x40>
 80037ce:	f7ff ff0f 	bl	80035f0 <_ai_platform_acquire_crc>
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <ai_platform_network_get_error+0xc8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037de:	d010      	beq.n	8003802 <ai_platform_network_get_error+0x76>
 80037e0:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <ai_platform_network_get_error+0xcc>)
 80037e2:	2301      	movs	r3, #1
 80037e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80037e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1fb      	bne.n	80037e8 <ai_platform_network_get_error+0x5c>
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <ai_platform_network_get_error+0xd0>)
 80037f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80037f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <ai_platform_network_get_error+0xd4>)
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d00d      	beq.n	800381c <ai_platform_network_get_error+0x90>
 8003800:	e7fe      	b.n	8003800 <ai_platform_network_get_error+0x74>
 8003802:	4a18      	ldr	r2, [pc, #96]	; (8003864 <ai_platform_network_get_error+0xd8>)
 8003804:	2301      	movs	r3, #1
 8003806:	6093      	str	r3, [r2, #8]
 8003808:	6893      	ldr	r3, [r2, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1fc      	bne.n	8003808 <ai_platform_network_get_error+0x7c>
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <ai_platform_network_get_error+0xd0>)
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <ai_platform_network_get_error+0xd4>)
 8003816:	429a      	cmp	r2, r3
 8003818:	d000      	beq.n	800381c <ai_platform_network_get_error+0x90>
 800381a:	e7fe      	b.n	800381a <ai_platform_network_get_error+0x8e>
 800381c:	f7ff feea 	bl	80035f4 <_ai_platform_release_crc>
 8003820:	f241 0010 	movw	r0, #4112	; 0x1010
 8003824:	bd10      	pop	{r4, pc}
 8003826:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <ai_platform_network_get_error+0xd8>)
 8003828:	2301      	movs	r3, #1
 800382a:	6093      	str	r3, [r2, #8]
 800382c:	6893      	ldr	r3, [r2, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1fc      	bne.n	800382c <ai_platform_network_get_error+0xa0>
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <ai_platform_network_get_error+0xd0>)
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <ai_platform_network_get_error+0xd4>)
 800383a:	429a      	cmp	r2, r3
 800383c:	d107      	bne.n	800384e <ai_platform_network_get_error+0xc2>
 800383e:	f7ff fed9 	bl	80035f4 <_ai_platform_release_crc>
 8003842:	f104 0010 	add.w	r0, r4, #16
 8003846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800384a:	f000 be8b 	b.w	8004564 <core_get_error>
 800384e:	e7fe      	b.n	800384e <ai_platform_network_get_error+0xc2>
 8003850:	a1c00100 	.word	0xa1c00100
 8003854:	e0042000 	.word	0xe0042000
 8003858:	58024000 	.word	0x58024000
 800385c:	f407a5c2 	.word	0xf407a5c2
 8003860:	b5e8b5cd 	.word	0xb5e8b5cd
 8003864:	40023000 	.word	0x40023000

08003868 <ai_platform_network_set_error>:
 8003868:	b110      	cbz	r0, 8003870 <ai_platform_network_set_error+0x8>
 800386a:	3010      	adds	r0, #16
 800386c:	f000 be80 	b.w	8004570 <core_set_error>
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop

08003874 <ai_platform_inputs_get>:
 8003874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003878:	b085      	sub	sp, #20
 800387a:	9102      	str	r1, [sp, #8]
 800387c:	b1f0      	cbz	r0, 80038bc <ai_platform_inputs_get+0x48>
 800387e:	4b62      	ldr	r3, [pc, #392]	; (8003a08 <ai_platform_inputs_get+0x194>)
 8003880:	6802      	ldr	r2, [r0, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	4607      	mov	r7, r0
 8003886:	d119      	bne.n	80038bc <ai_platform_inputs_get+0x48>
 8003888:	f7ff feb2 	bl	80035f0 <_ai_platform_acquire_crc>
 800388c:	4b5f      	ldr	r3, [pc, #380]	; (8003a0c <ai_platform_inputs_get+0x198>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003898:	d03d      	beq.n	8003916 <ai_platform_inputs_get+0xa2>
 800389a:	4a5d      	ldr	r2, [pc, #372]	; (8003a10 <ai_platform_inputs_get+0x19c>)
 800389c:	2301      	movs	r3, #1
 800389e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80038a2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1fb      	bne.n	80038a2 <ai_platform_inputs_get+0x2e>
 80038aa:	4b5a      	ldr	r3, [pc, #360]	; (8003a14 <ai_platform_inputs_get+0x1a0>)
 80038ac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80038b0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80038b4:	4b58      	ldr	r3, [pc, #352]	; (8003a18 <ai_platform_inputs_get+0x1a4>)
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d039      	beq.n	800392e <ai_platform_inputs_get+0xba>
 80038ba:	e7fe      	b.n	80038ba <ai_platform_inputs_get+0x46>
 80038bc:	f7ff fe98 	bl	80035f0 <_ai_platform_acquire_crc>
 80038c0:	4b52      	ldr	r3, [pc, #328]	; (8003a0c <ai_platform_inputs_get+0x198>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038cc:	d010      	beq.n	80038f0 <ai_platform_inputs_get+0x7c>
 80038ce:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <ai_platform_inputs_get+0x19c>)
 80038d0:	2301      	movs	r3, #1
 80038d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80038d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1fb      	bne.n	80038d6 <ai_platform_inputs_get+0x62>
 80038de:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <ai_platform_inputs_get+0x1a0>)
 80038e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80038e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80038e8:	4b4b      	ldr	r3, [pc, #300]	; (8003a18 <ai_platform_inputs_get+0x1a4>)
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d00d      	beq.n	800390a <ai_platform_inputs_get+0x96>
 80038ee:	e7fe      	b.n	80038ee <ai_platform_inputs_get+0x7a>
 80038f0:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <ai_platform_inputs_get+0x1a8>)
 80038f2:	2301      	movs	r3, #1
 80038f4:	6093      	str	r3, [r2, #8]
 80038f6:	6893      	ldr	r3, [r2, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1fc      	bne.n	80038f6 <ai_platform_inputs_get+0x82>
 80038fc:	4b45      	ldr	r3, [pc, #276]	; (8003a14 <ai_platform_inputs_get+0x1a0>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	4b45      	ldr	r3, [pc, #276]	; (8003a18 <ai_platform_inputs_get+0x1a4>)
 8003904:	429a      	cmp	r2, r3
 8003906:	d000      	beq.n	800390a <ai_platform_inputs_get+0x96>
 8003908:	e7fe      	b.n	8003908 <ai_platform_inputs_get+0x94>
 800390a:	f7ff fe73 	bl	80035f4 <_ai_platform_release_crc>
 800390e:	2000      	movs	r0, #0
 8003910:	b005      	add	sp, #20
 8003912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003916:	4a41      	ldr	r2, [pc, #260]	; (8003a1c <ai_platform_inputs_get+0x1a8>)
 8003918:	2301      	movs	r3, #1
 800391a:	6093      	str	r3, [r2, #8]
 800391c:	6893      	ldr	r3, [r2, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1fc      	bne.n	800391c <ai_platform_inputs_get+0xa8>
 8003922:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <ai_platform_inputs_get+0x1a0>)
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <ai_platform_inputs_get+0x1a4>)
 800392a:	429a      	cmp	r2, r3
 800392c:	d155      	bne.n	80039da <ai_platform_inputs_get+0x166>
 800392e:	f7ff fe61 	bl	80035f4 <_ai_platform_release_crc>
 8003932:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d051      	beq.n	80039dc <ai_platform_inputs_get+0x168>
 8003938:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800393c:	f1ba 0f00 	cmp.w	sl, #0
 8003940:	d04c      	beq.n	80039dc <ai_platform_inputs_get+0x168>
 8003942:	f04f 0b00 	mov.w	fp, #0
 8003946:	465d      	mov	r5, fp
 8003948:	9703      	str	r7, [sp, #12]
 800394a:	e016      	b.n	800397a <ai_platform_inputs_get+0x106>
 800394c:	9901      	ldr	r1, [sp, #4]
 800394e:	2301      	movs	r3, #1
 8003950:	507b      	str	r3, [r7, r1]
 8003952:	69b1      	ldr	r1, [r6, #24]
 8003954:	6849      	ldr	r1, [r1, #4]
 8003956:	6121      	str	r1, [r4, #16]
 8003958:	f04f 0301 	mov.w	r3, #1
 800395c:	7523      	strb	r3, [r4, #20]
 800395e:	e9c4 c200 	strd	ip, r2, [r4]
 8003962:	6962      	ldr	r2, [r4, #20]
 8003964:	60a0      	str	r0, [r4, #8]
 8003966:	2300      	movs	r3, #0
 8003968:	f369 221f 	bfi	r2, r9, #8, #24
 800396c:	f8c4 8018 	str.w	r8, [r4, #24]
 8003970:	60e3      	str	r3, [r4, #12]
 8003972:	3501      	adds	r5, #1
 8003974:	f10b 0b1c 	add.w	fp, fp, #28
 8003978:	6162      	str	r2, [r4, #20]
 800397a:	f8ba 3000 	ldrh.w	r3, [sl]
 800397e:	42ab      	cmp	r3, r5
 8003980:	b2aa      	uxth	r2, r5
 8003982:	d93a      	bls.n	80039fa <ai_platform_inputs_get+0x186>
 8003984:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003988:	00e9      	lsls	r1, r5, #3
 800398a:	9101      	str	r1, [sp, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d034      	beq.n	80039fa <ai_platform_inputs_get+0x186>
 8003990:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003994:	2e00      	cmp	r6, #0
 8003996:	d030      	beq.n	80039fa <ai_platform_inputs_get+0x186>
 8003998:	f8da 3008 	ldr.w	r3, [sl, #8]
 800399c:	69b2      	ldr	r2, [r6, #24]
 800399e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80039a2:	6810      	ldr	r0, [r2, #0]
 80039a4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80039a8:	68b3      	ldr	r3, [r6, #8]
 80039aa:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80039ae:	f001 fc93 	bl	80052d8 <ai_array_to_buffer_fmt>
 80039b2:	69b1      	ldr	r1, [r6, #24]
 80039b4:	4684      	mov	ip, r0
 80039b6:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80039ba:	688a      	ldr	r2, [r1, #8]
 80039bc:	445c      	add	r4, fp
 80039be:	2800      	cmp	r0, #0
 80039c0:	d0c8      	beq.n	8003954 <ai_platform_inputs_get+0xe0>
 80039c2:	2100      	movs	r1, #0
 80039c4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80039c8:	6831      	ldr	r1, [r6, #0]
 80039ca:	6041      	str	r1, [r0, #4]
 80039cc:	b111      	cbz	r1, 80039d4 <ai_platform_inputs_get+0x160>
 80039ce:	8849      	ldrh	r1, [r1, #2]
 80039d0:	2900      	cmp	r1, #0
 80039d2:	d1bb      	bne.n	800394c <ai_platform_inputs_get+0xd8>
 80039d4:	69b1      	ldr	r1, [r6, #24]
 80039d6:	2000      	movs	r0, #0
 80039d8:	e7bc      	b.n	8003954 <ai_platform_inputs_get+0xe0>
 80039da:	e7fe      	b.n	80039da <ai_platform_inputs_get+0x166>
 80039dc:	2218      	movs	r2, #24
 80039de:	2111      	movs	r1, #17
 80039e0:	f107 0010 	add.w	r0, r7, #16
 80039e4:	f000 fdc4 	bl	8004570 <core_set_error>
 80039e8:	2200      	movs	r2, #0
 80039ea:	4610      	mov	r0, r2
 80039ec:	9b02      	ldr	r3, [sp, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d08e      	beq.n	8003910 <ai_platform_inputs_get+0x9c>
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	b005      	add	sp, #20
 80039f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039fa:	9f03      	ldr	r7, [sp, #12]
 80039fc:	2a00      	cmp	r2, #0
 80039fe:	d0ed      	beq.n	80039dc <ai_platform_inputs_get+0x168>
 8003a00:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003a04:	6858      	ldr	r0, [r3, #4]
 8003a06:	e7f1      	b.n	80039ec <ai_platform_inputs_get+0x178>
 8003a08:	a1c00100 	.word	0xa1c00100
 8003a0c:	e0042000 	.word	0xe0042000
 8003a10:	58024000 	.word	0x58024000
 8003a14:	f407a5c2 	.word	0xf407a5c2
 8003a18:	b5e8b5cd 	.word	0xb5e8b5cd
 8003a1c:	40023000 	.word	0x40023000

08003a20 <ai_platform_outputs_get>:
 8003a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	b085      	sub	sp, #20
 8003a26:	9102      	str	r1, [sp, #8]
 8003a28:	b1f0      	cbz	r0, 8003a68 <ai_platform_outputs_get+0x48>
 8003a2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ba8 <ai_platform_outputs_get+0x188>)
 8003a2c:	6802      	ldr	r2, [r0, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	4607      	mov	r7, r0
 8003a32:	d119      	bne.n	8003a68 <ai_platform_outputs_get+0x48>
 8003a34:	f7ff fddc 	bl	80035f0 <_ai_platform_acquire_crc>
 8003a38:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <ai_platform_outputs_get+0x18c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a44:	d03d      	beq.n	8003ac2 <ai_platform_outputs_get+0xa2>
 8003a46:	4a5a      	ldr	r2, [pc, #360]	; (8003bb0 <ai_platform_outputs_get+0x190>)
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1fb      	bne.n	8003a4e <ai_platform_outputs_get+0x2e>
 8003a56:	4b57      	ldr	r3, [pc, #348]	; (8003bb4 <ai_platform_outputs_get+0x194>)
 8003a58:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003a5c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a60:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <ai_platform_outputs_get+0x198>)
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d039      	beq.n	8003ada <ai_platform_outputs_get+0xba>
 8003a66:	e7fe      	b.n	8003a66 <ai_platform_outputs_get+0x46>
 8003a68:	f7ff fdc2 	bl	80035f0 <_ai_platform_acquire_crc>
 8003a6c:	4b4f      	ldr	r3, [pc, #316]	; (8003bac <ai_platform_outputs_get+0x18c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a78:	d010      	beq.n	8003a9c <ai_platform_outputs_get+0x7c>
 8003a7a:	4a4d      	ldr	r2, [pc, #308]	; (8003bb0 <ai_platform_outputs_get+0x190>)
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a82:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1fb      	bne.n	8003a82 <ai_platform_outputs_get+0x62>
 8003a8a:	4b4a      	ldr	r3, [pc, #296]	; (8003bb4 <ai_platform_outputs_get+0x194>)
 8003a8c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003a90:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a94:	4b48      	ldr	r3, [pc, #288]	; (8003bb8 <ai_platform_outputs_get+0x198>)
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d00d      	beq.n	8003ab6 <ai_platform_outputs_get+0x96>
 8003a9a:	e7fe      	b.n	8003a9a <ai_platform_outputs_get+0x7a>
 8003a9c:	4a47      	ldr	r2, [pc, #284]	; (8003bbc <ai_platform_outputs_get+0x19c>)
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	6093      	str	r3, [r2, #8]
 8003aa2:	6893      	ldr	r3, [r2, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1fc      	bne.n	8003aa2 <ai_platform_outputs_get+0x82>
 8003aa8:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <ai_platform_outputs_get+0x194>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <ai_platform_outputs_get+0x198>)
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d000      	beq.n	8003ab6 <ai_platform_outputs_get+0x96>
 8003ab4:	e7fe      	b.n	8003ab4 <ai_platform_outputs_get+0x94>
 8003ab6:	f7ff fd9d 	bl	80035f4 <_ai_platform_release_crc>
 8003aba:	2000      	movs	r0, #0
 8003abc:	b005      	add	sp, #20
 8003abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac2:	4a3e      	ldr	r2, [pc, #248]	; (8003bbc <ai_platform_outputs_get+0x19c>)
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	6093      	str	r3, [r2, #8]
 8003ac8:	6893      	ldr	r3, [r2, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1fc      	bne.n	8003ac8 <ai_platform_outputs_get+0xa8>
 8003ace:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <ai_platform_outputs_get+0x194>)
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	4b38      	ldr	r3, [pc, #224]	; (8003bb8 <ai_platform_outputs_get+0x198>)
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d150      	bne.n	8003b7c <ai_platform_outputs_get+0x15c>
 8003ada:	f7ff fd8b 	bl	80035f4 <_ai_platform_release_crc>
 8003ade:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d958      	bls.n	8003b96 <ai_platform_outputs_get+0x176>
 8003ae4:	f04f 0b00 	mov.w	fp, #0
 8003ae8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8003aec:	9703      	str	r7, [sp, #12]
 8003aee:	465d      	mov	r5, fp
 8003af0:	e016      	b.n	8003b20 <ai_platform_outputs_get+0x100>
 8003af2:	9901      	ldr	r1, [sp, #4]
 8003af4:	2301      	movs	r3, #1
 8003af6:	507b      	str	r3, [r7, r1]
 8003af8:	69b1      	ldr	r1, [r6, #24]
 8003afa:	6849      	ldr	r1, [r1, #4]
 8003afc:	6121      	str	r1, [r4, #16]
 8003afe:	f04f 0301 	mov.w	r3, #1
 8003b02:	7523      	strb	r3, [r4, #20]
 8003b04:	e9c4 c200 	strd	ip, r2, [r4]
 8003b08:	6962      	ldr	r2, [r4, #20]
 8003b0a:	60a0      	str	r0, [r4, #8]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f369 221f 	bfi	r2, r9, #8, #24
 8003b12:	f8c4 8018 	str.w	r8, [r4, #24]
 8003b16:	60e3      	str	r3, [r4, #12]
 8003b18:	3501      	adds	r5, #1
 8003b1a:	f10b 0b1c 	add.w	fp, fp, #28
 8003b1e:	6162      	str	r2, [r4, #20]
 8003b20:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003b24:	42ab      	cmp	r3, r5
 8003b26:	b2aa      	uxth	r2, r5
 8003b28:	d929      	bls.n	8003b7e <ai_platform_outputs_get+0x15e>
 8003b2a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003b2e:	00e9      	lsls	r1, r5, #3
 8003b30:	9101      	str	r1, [sp, #4]
 8003b32:	b323      	cbz	r3, 8003b7e <ai_platform_outputs_get+0x15e>
 8003b34:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003b38:	b30e      	cbz	r6, 8003b7e <ai_platform_outputs_get+0x15e>
 8003b3a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003b3e:	69b2      	ldr	r2, [r6, #24]
 8003b40:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003b44:	6810      	ldr	r0, [r2, #0]
 8003b46:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003b4a:	68b3      	ldr	r3, [r6, #8]
 8003b4c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003b50:	f001 fbc2 	bl	80052d8 <ai_array_to_buffer_fmt>
 8003b54:	69b1      	ldr	r1, [r6, #24]
 8003b56:	4684      	mov	ip, r0
 8003b58:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8003b5c:	688a      	ldr	r2, [r1, #8]
 8003b5e:	445c      	add	r4, fp
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0ca      	beq.n	8003afa <ai_platform_outputs_get+0xda>
 8003b64:	2100      	movs	r1, #0
 8003b66:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003b6a:	6831      	ldr	r1, [r6, #0]
 8003b6c:	6041      	str	r1, [r0, #4]
 8003b6e:	b111      	cbz	r1, 8003b76 <ai_platform_outputs_get+0x156>
 8003b70:	8849      	ldrh	r1, [r1, #2]
 8003b72:	2900      	cmp	r1, #0
 8003b74:	d1bd      	bne.n	8003af2 <ai_platform_outputs_get+0xd2>
 8003b76:	69b1      	ldr	r1, [r6, #24]
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e7be      	b.n	8003afa <ai_platform_outputs_get+0xda>
 8003b7c:	e7fe      	b.n	8003b7c <ai_platform_outputs_get+0x15c>
 8003b7e:	9f03      	ldr	r7, [sp, #12]
 8003b80:	b14a      	cbz	r2, 8003b96 <ai_platform_outputs_get+0x176>
 8003b82:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003b86:	6858      	ldr	r0, [r3, #4]
 8003b88:	9b02      	ldr	r3, [sp, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d096      	beq.n	8003abc <ai_platform_outputs_get+0x9c>
 8003b8e:	801a      	strh	r2, [r3, #0]
 8003b90:	b005      	add	sp, #20
 8003b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b96:	2218      	movs	r2, #24
 8003b98:	2111      	movs	r1, #17
 8003b9a:	f107 0010 	add.w	r0, r7, #16
 8003b9e:	f000 fce7 	bl	8004570 <core_set_error>
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	e7ef      	b.n	8003b88 <ai_platform_outputs_get+0x168>
 8003ba8:	a1c00100 	.word	0xa1c00100
 8003bac:	e0042000 	.word	0xe0042000
 8003bb0:	58024000 	.word	0x58024000
 8003bb4:	f407a5c2 	.word	0xf407a5c2
 8003bb8:	b5e8b5cd 	.word	0xb5e8b5cd
 8003bbc:	40023000 	.word	0x40023000

08003bc0 <ai_platform_network_create>:
 8003bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003bcc:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003bd0:	4615      	mov	r5, r2
 8003bd2:	461f      	mov	r7, r3
 8003bd4:	f7ff fd0c 	bl	80035f0 <_ai_platform_acquire_crc>
 8003bd8:	b188      	cbz	r0, 8003bfe <ai_platform_network_create+0x3e>
 8003bda:	4a5d      	ldr	r2, [pc, #372]	; (8003d50 <ai_platform_network_create+0x190>)
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003be2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003be6:	4603      	mov	r3, r0
 8003be8:	d00e      	beq.n	8003c08 <ai_platform_network_create+0x48>
 8003bea:	4a5a      	ldr	r2, [pc, #360]	; (8003d54 <ai_platform_network_create+0x194>)
 8003bec:	2118      	movs	r1, #24
 8003bee:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003bf2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003bf6:	2918      	cmp	r1, #24
 8003bf8:	d018      	beq.n	8003c2c <ai_platform_network_create+0x6c>
 8003bfa:	f7ff fcfb 	bl	80035f4 <_ai_platform_release_crc>
 8003bfe:	f244 1033 	movw	r0, #16691	; 0x4133
 8003c02:	b003      	add	sp, #12
 8003c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c08:	4a53      	ldr	r2, [pc, #332]	; (8003d58 <ai_platform_network_create+0x198>)
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	6091      	str	r1, [r2, #8]
 8003c0e:	2114      	movs	r1, #20
 8003c10:	e001      	b.n	8003c16 <ai_platform_network_create+0x56>
 8003c12:	3901      	subs	r1, #1
 8003c14:	d002      	beq.n	8003c1c <ai_platform_network_create+0x5c>
 8003c16:	6894      	ldr	r4, [r2, #8]
 8003c18:	2c00      	cmp	r4, #0
 8003c1a:	d1fa      	bne.n	8003c12 <ai_platform_network_create+0x52>
 8003c1c:	4a4e      	ldr	r2, [pc, #312]	; (8003d58 <ai_platform_network_create+0x198>)
 8003c1e:	6891      	ldr	r1, [r2, #8]
 8003c20:	b911      	cbnz	r1, 8003c28 <ai_platform_network_create+0x68>
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	3201      	adds	r2, #1
 8003c26:	d008      	beq.n	8003c3a <ai_platform_network_create+0x7a>
 8003c28:	4618      	mov	r0, r3
 8003c2a:	e7e6      	b.n	8003bfa <ai_platform_network_create+0x3a>
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003c32:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003c36:	2900      	cmp	r1, #0
 8003c38:	d1fb      	bne.n	8003c32 <ai_platform_network_create+0x72>
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fcda 	bl	80035f4 <_ai_platform_release_crc>
 8003c40:	f7ff fcd6 	bl	80035f0 <_ai_platform_acquire_crc>
 8003c44:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <ai_platform_network_create+0x190>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c50:	d010      	beq.n	8003c74 <ai_platform_network_create+0xb4>
 8003c52:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <ai_platform_network_create+0x194>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8003c5a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8003c5e:	2900      	cmp	r1, #0
 8003c60:	d1fb      	bne.n	8003c5a <ai_platform_network_create+0x9a>
 8003c62:	4a3e      	ldr	r2, [pc, #248]	; (8003d5c <ai_platform_network_create+0x19c>)
 8003c64:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003c68:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8003c6c:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <ai_platform_network_create+0x1a0>)
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d00c      	beq.n	8003c8c <ai_platform_network_create+0xcc>
 8003c72:	e7fe      	b.n	8003c72 <ai_platform_network_create+0xb2>
 8003c74:	4a38      	ldr	r2, [pc, #224]	; (8003d58 <ai_platform_network_create+0x198>)
 8003c76:	2301      	movs	r3, #1
 8003c78:	6093      	str	r3, [r2, #8]
 8003c7a:	6893      	ldr	r3, [r2, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1fc      	bne.n	8003c7a <ai_platform_network_create+0xba>
 8003c80:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <ai_platform_network_create+0x19c>)
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <ai_platform_network_create+0x1a0>)
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d122      	bne.n	8003cd2 <ai_platform_network_create+0x112>
 8003c8c:	f7ff fcb2 	bl	80035f4 <_ai_platform_release_crc>
 8003c90:	b38e      	cbz	r6, 8003cf6 <ai_platform_network_create+0x136>
 8003c92:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <ai_platform_network_create+0x1a4>)
 8003c94:	602b      	str	r3, [r5, #0]
 8003c96:	6035      	str	r5, [r6, #0]
 8003c98:	f000 fc62 	bl	8004560 <core_init>
 8003c9c:	b1d0      	cbz	r0, 8003cd4 <ai_platform_network_create+0x114>
 8003c9e:	f7ff fca7 	bl	80035f0 <_ai_platform_acquire_crc>
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <ai_platform_network_create+0x190>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cae:	d025      	beq.n	8003cfc <ai_platform_network_create+0x13c>
 8003cb0:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <ai_platform_network_create+0x194>)
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003cb8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1fb      	bne.n	8003cb8 <ai_platform_network_create+0xf8>
 8003cc0:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <ai_platform_network_create+0x19c>)
 8003cc2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003cc6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003cca:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <ai_platform_network_create+0x1a0>)
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d022      	beq.n	8003d16 <ai_platform_network_create+0x156>
 8003cd0:	e7fe      	b.n	8003cd0 <ai_platform_network_create+0x110>
 8003cd2:	e7fe      	b.n	8003cd2 <ai_platform_network_create+0x112>
 8003cd4:	2430      	movs	r4, #48	; 0x30
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6033      	str	r3, [r6, #0]
 8003cda:	2610      	movs	r6, #16
 8003cdc:	464a      	mov	r2, r9
 8003cde:	4641      	mov	r1, r8
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	f001 fb9f 	bl	8005424 <ai_version_get>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f364 0007 	bfi	r0, r4, #0, #8
 8003cee:	64ab      	str	r3, [r5, #72]	; 0x48
 8003cf0:	f366 201f 	bfi	r0, r6, #8, #24
 8003cf4:	e785      	b.n	8003c02 <ai_platform_network_create+0x42>
 8003cf6:	f241 0010 	movw	r0, #4112	; 0x1010
 8003cfa:	e782      	b.n	8003c02 <ai_platform_network_create+0x42>
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <ai_platform_network_create+0x198>)
 8003cfe:	2301      	movs	r3, #1
 8003d00:	6093      	str	r3, [r2, #8]
 8003d02:	6893      	ldr	r3, [r2, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1fc      	bne.n	8003d02 <ai_platform_network_create+0x142>
 8003d08:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <ai_platform_network_create+0x19c>)
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <ai_platform_network_create+0x1a0>)
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d000      	beq.n	8003d16 <ai_platform_network_create+0x156>
 8003d14:	e7fe      	b.n	8003d14 <ai_platform_network_create+0x154>
 8003d16:	f7ff fc6d 	bl	80035f4 <_ai_platform_release_crc>
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	4641      	mov	r1, r8
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f001 fb80 	bl	8005424 <ai_version_get>
 8003d24:	2200      	movs	r2, #0
 8003d26:	4604      	mov	r4, r0
 8003d28:	2105      	movs	r1, #5
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	f001 fb7a 	bl	8005424 <ai_version_get>
 8003d30:	4284      	cmp	r4, r0
 8003d32:	d001      	beq.n	8003d38 <ai_platform_network_create+0x178>
 8003d34:	2401      	movs	r4, #1
 8003d36:	e7ce      	b.n	8003cd6 <ai_platform_network_create+0x116>
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <ai_platform_network_create+0x1a8>)
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	a801      	add	r0, sp, #4
 8003d3e:	f000 fc23 	bl	8004588 <ai_check_custom_types>
 8003d42:	b110      	cbz	r0, 8003d4a <ai_platform_network_create+0x18a>
 8003d44:	2600      	movs	r6, #0
 8003d46:	4634      	mov	r4, r6
 8003d48:	e7c8      	b.n	8003cdc <ai_platform_network_create+0x11c>
 8003d4a:	2402      	movs	r4, #2
 8003d4c:	e7c3      	b.n	8003cd6 <ai_platform_network_create+0x116>
 8003d4e:	bf00      	nop
 8003d50:	e0042000 	.word	0xe0042000
 8003d54:	58024000 	.word	0x58024000
 8003d58:	40023000 	.word	0x40023000
 8003d5c:	f407a5c2 	.word	0xf407a5c2
 8003d60:	b5e8b5cd 	.word	0xb5e8b5cd
 8003d64:	a1c00100 	.word	0xa1c00100
 8003d68:	84048403 	.word	0x84048403

08003d6c <ai_platform_network_init>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	b1f8      	cbz	r0, 8003db2 <ai_platform_network_init+0x46>
 8003d72:	4b6e      	ldr	r3, [pc, #440]	; (8003f2c <ai_platform_network_init+0x1c0>)
 8003d74:	6802      	ldr	r2, [r0, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	4604      	mov	r4, r0
 8003d7a:	d11a      	bne.n	8003db2 <ai_platform_network_init+0x46>
 8003d7c:	460e      	mov	r6, r1
 8003d7e:	f7ff fc37 	bl	80035f0 <_ai_platform_acquire_crc>
 8003d82:	4b6b      	ldr	r3, [pc, #428]	; (8003f30 <ai_platform_network_init+0x1c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8e:	d03d      	beq.n	8003e0c <ai_platform_network_init+0xa0>
 8003d90:	4a68      	ldr	r2, [pc, #416]	; (8003f34 <ai_platform_network_init+0x1c8>)
 8003d92:	2301      	movs	r3, #1
 8003d94:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003d98:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1fb      	bne.n	8003d98 <ai_platform_network_init+0x2c>
 8003da0:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <ai_platform_network_init+0x1cc>)
 8003da2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003da6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003daa:	4b64      	ldr	r3, [pc, #400]	; (8003f3c <ai_platform_network_init+0x1d0>)
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d039      	beq.n	8003e24 <ai_platform_network_init+0xb8>
 8003db0:	e7fe      	b.n	8003db0 <ai_platform_network_init+0x44>
 8003db2:	f7ff fc1d 	bl	80035f0 <_ai_platform_acquire_crc>
 8003db6:	4b5e      	ldr	r3, [pc, #376]	; (8003f30 <ai_platform_network_init+0x1c4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc2:	d010      	beq.n	8003de6 <ai_platform_network_init+0x7a>
 8003dc4:	4a5b      	ldr	r2, [pc, #364]	; (8003f34 <ai_platform_network_init+0x1c8>)
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003dcc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1fb      	bne.n	8003dcc <ai_platform_network_init+0x60>
 8003dd4:	4b58      	ldr	r3, [pc, #352]	; (8003f38 <ai_platform_network_init+0x1cc>)
 8003dd6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003dda:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003dde:	4b57      	ldr	r3, [pc, #348]	; (8003f3c <ai_platform_network_init+0x1d0>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d00d      	beq.n	8003e00 <ai_platform_network_init+0x94>
 8003de4:	e7fe      	b.n	8003de4 <ai_platform_network_init+0x78>
 8003de6:	4a56      	ldr	r2, [pc, #344]	; (8003f40 <ai_platform_network_init+0x1d4>)
 8003de8:	2301      	movs	r3, #1
 8003dea:	6093      	str	r3, [r2, #8]
 8003dec:	6893      	ldr	r3, [r2, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1fc      	bne.n	8003dec <ai_platform_network_init+0x80>
 8003df2:	4b51      	ldr	r3, [pc, #324]	; (8003f38 <ai_platform_network_init+0x1cc>)
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <ai_platform_network_init+0x1d0>)
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d000      	beq.n	8003e00 <ai_platform_network_init+0x94>
 8003dfe:	e7fe      	b.n	8003dfe <ai_platform_network_init+0x92>
 8003e00:	f7ff fbf8 	bl	80035f4 <_ai_platform_release_crc>
 8003e04:	2600      	movs	r6, #0
 8003e06:	4630      	mov	r0, r6
 8003e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e0c:	4a4c      	ldr	r2, [pc, #304]	; (8003f40 <ai_platform_network_init+0x1d4>)
 8003e0e:	2301      	movs	r3, #1
 8003e10:	6093      	str	r3, [r2, #8]
 8003e12:	6893      	ldr	r3, [r2, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1fc      	bne.n	8003e12 <ai_platform_network_init+0xa6>
 8003e18:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <ai_platform_network_init+0x1cc>)
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <ai_platform_network_init+0x1d0>)
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d11c      	bne.n	8003e5e <ai_platform_network_init+0xf2>
 8003e24:	f7ff fbe6 	bl	80035f4 <_ai_platform_release_crc>
 8003e28:	2e00      	cmp	r6, #0
 8003e2a:	d06f      	beq.n	8003f0c <ai_platform_network_init+0x1a0>
 8003e2c:	4b45      	ldr	r3, [pc, #276]	; (8003f44 <ai_platform_network_init+0x1d8>)
 8003e2e:	6832      	ldr	r2, [r6, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d115      	bne.n	8003e60 <ai_platform_network_init+0xf4>
 8003e34:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8003e38:	6933      	ldr	r3, [r6, #16]
 8003e3a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8003e3e:	89f7      	ldrh	r7, [r6, #14]
 8003e40:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e42:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003e46:	2303      	movs	r3, #3
 8003e48:	84e7      	strh	r7, [r4, #38]	; 0x26
 8003e4a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8003e4e:	60e3      	str	r3, [r4, #12]
 8003e50:	4620      	mov	r0, r4
 8003e52:	4626      	mov	r6, r4
 8003e54:	f000 fbc2 	bl	80045dc <ai_layers_init_all>
 8003e58:	4630      	mov	r0, r6
 8003e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e5e:	e7fe      	b.n	8003e5e <ai_platform_network_init+0xf2>
 8003e60:	2101      	movs	r1, #1
 8003e62:	4630      	mov	r0, r6
 8003e64:	4635      	mov	r5, r6
 8003e66:	6876      	ldr	r6, [r6, #4]
 8003e68:	f7ff fb74 	bl	8003554 <ai_buffer_get_size>
 8003e6c:	f105 081c 	add.w	r8, r5, #28
 8003e70:	4681      	mov	r9, r0
 8003e72:	2101      	movs	r1, #1
 8003e74:	4640      	mov	r0, r8
 8003e76:	6a2f      	ldr	r7, [r5, #32]
 8003e78:	f7ff fb6c 	bl	8003554 <ai_buffer_get_size>
 8003e7c:	f1b9 0f00 	cmp.w	r9, #0
 8003e80:	d025      	beq.n	8003ece <ai_platform_network_init+0x162>
 8003e82:	2201      	movs	r2, #1
 8003e84:	4696      	mov	lr, r2
 8003e86:	bb30      	cbnz	r0, 8003ed6 <ai_platform_network_init+0x16a>
 8003e88:	4680      	mov	r8, r0
 8003e8a:	4607      	mov	r7, r0
 8003e8c:	b376      	cbz	r6, 8003eec <ai_platform_network_init+0x180>
 8003e8e:	8be3      	ldrh	r3, [r4, #30]
 8003e90:	4573      	cmp	r3, lr
 8003e92:	d323      	bcc.n	8003edc <ai_platform_network_init+0x170>
 8003e94:	b142      	cbz	r2, 8003ea8 <ai_platform_network_init+0x13c>
 8003e96:	46ac      	mov	ip, r5
 8003e98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003e9c:	6a25      	ldr	r5, [r4, #32]
 8003e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003ea4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ea8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003eaa:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8003eae:	2600      	movs	r6, #0
 8003eb0:	42bb      	cmp	r3, r7
 8003eb2:	83a6      	strh	r6, [r4, #28]
 8003eb4:	d323      	bcc.n	8003efe <ai_platform_network_init+0x192>
 8003eb6:	b37f      	cbz	r7, 8003f18 <ai_platform_network_init+0x1ac>
 8003eb8:	46c4      	mov	ip, r8
 8003eba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003ebe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003ec6:	46b6      	mov	lr, r6
 8003ec8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003ecc:	e7bb      	b.n	8003e46 <ai_platform_network_init+0xda>
 8003ece:	464a      	mov	r2, r9
 8003ed0:	46ce      	mov	lr, r9
 8003ed2:	464d      	mov	r5, r9
 8003ed4:	e7d7      	b.n	8003e86 <ai_platform_network_init+0x11a>
 8003ed6:	b30f      	cbz	r7, 8003f1c <ai_platform_network_init+0x1b0>
 8003ed8:	2701      	movs	r7, #1
 8003eda:	e7d7      	b.n	8003e8c <ai_platform_network_init+0x120>
 8003edc:	2212      	movs	r2, #18
 8003ede:	2116      	movs	r1, #22
 8003ee0:	f104 0010 	add.w	r0, r4, #16
 8003ee4:	f000 fb44 	bl	8004570 <core_set_error>
 8003ee8:	2600      	movs	r6, #0
 8003eea:	e78c      	b.n	8003e06 <ai_platform_network_init+0x9a>
 8003eec:	f1b9 0f00 	cmp.w	r9, #0
 8003ef0:	d0cd      	beq.n	8003e8e <ai_platform_network_init+0x122>
 8003ef2:	2110      	movs	r1, #16
 8003ef4:	2212      	movs	r2, #18
 8003ef6:	1860      	adds	r0, r4, r1
 8003ef8:	f000 fb3a 	bl	8004570 <core_set_error>
 8003efc:	e783      	b.n	8003e06 <ai_platform_network_init+0x9a>
 8003efe:	2213      	movs	r2, #19
 8003f00:	2116      	movs	r1, #22
 8003f02:	f104 0010 	add.w	r0, r4, #16
 8003f06:	f000 fb33 	bl	8004570 <core_set_error>
 8003f0a:	e77c      	b.n	8003e06 <ai_platform_network_init+0x9a>
 8003f0c:	2110      	movs	r1, #16
 8003f0e:	2211      	movs	r2, #17
 8003f10:	1860      	adds	r0, r4, r1
 8003f12:	f000 fb2d 	bl	8004570 <core_set_error>
 8003f16:	e776      	b.n	8003e06 <ai_platform_network_init+0x9a>
 8003f18:	46be      	mov	lr, r7
 8003f1a:	e794      	b.n	8003e46 <ai_platform_network_init+0xda>
 8003f1c:	2110      	movs	r1, #16
 8003f1e:	2213      	movs	r2, #19
 8003f20:	1860      	adds	r0, r4, r1
 8003f22:	f000 fb25 	bl	8004570 <core_set_error>
 8003f26:	463e      	mov	r6, r7
 8003f28:	e76d      	b.n	8003e06 <ai_platform_network_init+0x9a>
 8003f2a:	bf00      	nop
 8003f2c:	a1c00100 	.word	0xa1c00100
 8003f30:	e0042000 	.word	0xe0042000
 8003f34:	58024000 	.word	0x58024000
 8003f38:	f407a5c2 	.word	0xf407a5c2
 8003f3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f40:	40023000 	.word	0x40023000
 8003f44:	a1facade 	.word	0xa1facade

08003f48 <ai_platform_network_post_init>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	b1f0      	cbz	r0, 8003f8a <ai_platform_network_post_init+0x42>
 8003f4c:	4b3c      	ldr	r3, [pc, #240]	; (8004040 <ai_platform_network_post_init+0xf8>)
 8003f4e:	6802      	ldr	r2, [r0, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	4604      	mov	r4, r0
 8003f54:	d119      	bne.n	8003f8a <ai_platform_network_post_init+0x42>
 8003f56:	f7ff fb4b 	bl	80035f0 <_ai_platform_acquire_crc>
 8003f5a:	4b3a      	ldr	r3, [pc, #232]	; (8004044 <ai_platform_network_post_init+0xfc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d03b      	beq.n	8003fe0 <ai_platform_network_post_init+0x98>
 8003f68:	4a37      	ldr	r2, [pc, #220]	; (8004048 <ai_platform_network_post_init+0x100>)
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003f70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1fb      	bne.n	8003f70 <ai_platform_network_post_init+0x28>
 8003f78:	4b34      	ldr	r3, [pc, #208]	; (800404c <ai_platform_network_post_init+0x104>)
 8003f7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003f7e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003f82:	4b33      	ldr	r3, [pc, #204]	; (8004050 <ai_platform_network_post_init+0x108>)
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d037      	beq.n	8003ff8 <ai_platform_network_post_init+0xb0>
 8003f88:	e7fe      	b.n	8003f88 <ai_platform_network_post_init+0x40>
 8003f8a:	f7ff fb31 	bl	80035f0 <_ai_platform_acquire_crc>
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <ai_platform_network_post_init+0xfc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d010      	beq.n	8003fbe <ai_platform_network_post_init+0x76>
 8003f9c:	4a2a      	ldr	r2, [pc, #168]	; (8004048 <ai_platform_network_post_init+0x100>)
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003fa4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1fb      	bne.n	8003fa4 <ai_platform_network_post_init+0x5c>
 8003fac:	4b27      	ldr	r3, [pc, #156]	; (800404c <ai_platform_network_post_init+0x104>)
 8003fae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003fb2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <ai_platform_network_post_init+0x108>)
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d00d      	beq.n	8003fd8 <ai_platform_network_post_init+0x90>
 8003fbc:	e7fe      	b.n	8003fbc <ai_platform_network_post_init+0x74>
 8003fbe:	4a25      	ldr	r2, [pc, #148]	; (8004054 <ai_platform_network_post_init+0x10c>)
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	6093      	str	r3, [r2, #8]
 8003fc4:	6893      	ldr	r3, [r2, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1fc      	bne.n	8003fc4 <ai_platform_network_post_init+0x7c>
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <ai_platform_network_post_init+0x104>)
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	4b1f      	ldr	r3, [pc, #124]	; (8004050 <ai_platform_network_post_init+0x108>)
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d000      	beq.n	8003fd8 <ai_platform_network_post_init+0x90>
 8003fd6:	e7fe      	b.n	8003fd6 <ai_platform_network_post_init+0x8e>
 8003fd8:	f7ff fb0c 	bl	80035f4 <_ai_platform_release_crc>
 8003fdc:	2000      	movs	r0, #0
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <ai_platform_network_post_init+0x10c>)
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	6093      	str	r3, [r2, #8]
 8003fe6:	6893      	ldr	r3, [r2, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1fc      	bne.n	8003fe6 <ai_platform_network_post_init+0x9e>
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <ai_platform_network_post_init+0x104>)
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <ai_platform_network_post_init+0x108>)
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d11a      	bne.n	800402e <ai_platform_network_post_init+0xe6>
 8003ff8:	f7ff fafc 	bl	80035f4 <_ai_platform_release_crc>
 8003ffc:	68e3      	ldr	r3, [r4, #12]
 8003ffe:	f013 0502 	ands.w	r5, r3, #2
 8004002:	d015      	beq.n	8004030 <ai_platform_network_post_init+0xe8>
 8004004:	4620      	mov	r0, r4
 8004006:	f000 faf7 	bl	80045f8 <ai_layers_post_init_all>
 800400a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800400c:	b16b      	cbz	r3, 800402a <ai_platform_network_post_init+0xe2>
 800400e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004010:	e007      	b.n	8004022 <ai_platform_network_post_init+0xda>
 8004012:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004016:	4798      	blx	r3
 8004018:	692b      	ldr	r3, [r5, #16]
 800401a:	42ab      	cmp	r3, r5
 800401c:	d005      	beq.n	800402a <ai_platform_network_post_init+0xe2>
 800401e:	b123      	cbz	r3, 800402a <ai_platform_network_post_init+0xe2>
 8004020:	461d      	mov	r5, r3
 8004022:	4629      	mov	r1, r5
 8004024:	2000      	movs	r0, #0
 8004026:	2d00      	cmp	r5, #0
 8004028:	d1f3      	bne.n	8004012 <ai_platform_network_post_init+0xca>
 800402a:	2001      	movs	r0, #1
 800402c:	bd38      	pop	{r3, r4, r5, pc}
 800402e:	e7fe      	b.n	800402e <ai_platform_network_post_init+0xe6>
 8004030:	2210      	movs	r2, #16
 8004032:	2111      	movs	r1, #17
 8004034:	18a0      	adds	r0, r4, r2
 8004036:	f000 fa9b 	bl	8004570 <core_set_error>
 800403a:	4628      	mov	r0, r5
 800403c:	bd38      	pop	{r3, r4, r5, pc}
 800403e:	bf00      	nop
 8004040:	a1c00100 	.word	0xa1c00100
 8004044:	e0042000 	.word	0xe0042000
 8004048:	58024000 	.word	0x58024000
 800404c:	f407a5c2 	.word	0xf407a5c2
 8004050:	b5e8b5cd 	.word	0xb5e8b5cd
 8004054:	40023000 	.word	0x40023000

08004058 <ai_platform_network_process>:
 8004058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405c:	460e      	mov	r6, r1
 800405e:	b085      	sub	sp, #20
 8004060:	4693      	mov	fp, r2
 8004062:	4605      	mov	r5, r0
 8004064:	b120      	cbz	r0, 8004070 <ai_platform_network_process+0x18>
 8004066:	4bb8      	ldr	r3, [pc, #736]	; (8004348 <ai_platform_network_process+0x2f0>)
 8004068:	6802      	ldr	r2, [r0, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	bf18      	it	ne
 800406e:	2500      	movne	r5, #0
 8004070:	f7ff fabe 	bl	80035f0 <_ai_platform_acquire_crc>
 8004074:	4bb5      	ldr	r3, [pc, #724]	; (800434c <ai_platform_network_process+0x2f4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004080:	d010      	beq.n	80040a4 <ai_platform_network_process+0x4c>
 8004082:	4ab3      	ldr	r2, [pc, #716]	; (8004350 <ai_platform_network_process+0x2f8>)
 8004084:	2301      	movs	r3, #1
 8004086:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800408a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1fb      	bne.n	800408a <ai_platform_network_process+0x32>
 8004092:	4bb0      	ldr	r3, [pc, #704]	; (8004354 <ai_platform_network_process+0x2fc>)
 8004094:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004098:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800409c:	4bae      	ldr	r3, [pc, #696]	; (8004358 <ai_platform_network_process+0x300>)
 800409e:	429a      	cmp	r2, r3
 80040a0:	d00d      	beq.n	80040be <ai_platform_network_process+0x66>
 80040a2:	e7fe      	b.n	80040a2 <ai_platform_network_process+0x4a>
 80040a4:	4aad      	ldr	r2, [pc, #692]	; (800435c <ai_platform_network_process+0x304>)
 80040a6:	2301      	movs	r3, #1
 80040a8:	6093      	str	r3, [r2, #8]
 80040aa:	6893      	ldr	r3, [r2, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1fc      	bne.n	80040aa <ai_platform_network_process+0x52>
 80040b0:	4ba8      	ldr	r3, [pc, #672]	; (8004354 <ai_platform_network_process+0x2fc>)
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	4ba8      	ldr	r3, [pc, #672]	; (8004358 <ai_platform_network_process+0x300>)
 80040b8:	429a      	cmp	r2, r3
 80040ba:	f040 812c 	bne.w	8004316 <ai_platform_network_process+0x2be>
 80040be:	f7ff fa99 	bl	80035f4 <_ai_platform_release_crc>
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	f000 8154 	beq.w	8004370 <ai_platform_network_process+0x318>
 80040c8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8124 	beq.w	8004318 <ai_platform_network_process+0x2c0>
 80040d0:	68eb      	ldr	r3, [r5, #12]
 80040d2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2700      	movs	r7, #0
 80040dc:	2b03      	cmp	r3, #3
 80040de:	616f      	str	r7, [r5, #20]
 80040e0:	f040 813e 	bne.w	8004360 <ai_platform_network_process+0x308>
 80040e4:	2e00      	cmp	r6, #0
 80040e6:	f000 811d 	beq.w	8004324 <ai_platform_network_process+0x2cc>
 80040ea:	f1ba 0f00 	cmp.w	sl, #0
 80040ee:	f000 8119 	beq.w	8004324 <ai_platform_network_process+0x2cc>
 80040f2:	f8ba 3000 	ldrh.w	r3, [sl]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8114 	beq.w	8004324 <ai_platform_network_process+0x2cc>
 80040fc:	69b3      	ldr	r3, [r6, #24]
 80040fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8004108:	f8da 3004 	ldr.w	r3, [sl, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d072      	beq.n	80041f6 <ai_platform_network_process+0x19e>
 8004110:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8004114:	2c00      	cmp	r4, #0
 8004116:	d06e      	beq.n	80041f6 <ai_platform_network_process+0x19e>
 8004118:	f8da 3008 	ldr.w	r3, [sl, #8]
 800411c:	f8d3 9000 	ldr.w	r9, [r3]
 8004120:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8004124:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004128:	f000 81de 	beq.w	80044e8 <ai_platform_network_process+0x490>
 800412c:	69a3      	ldr	r3, [r4, #24]
 800412e:	2101      	movs	r1, #1
 8004130:	4630      	mov	r0, r6
 8004132:	685d      	ldr	r5, [r3, #4]
 8004134:	f7ff fa0e 	bl	8003554 <ai_buffer_get_size>
 8004138:	4285      	cmp	r5, r0
 800413a:	f0c0 811b 	bcc.w	8004374 <ai_platform_network_process+0x31c>
 800413e:	68e0      	ldr	r0, [r4, #12]
 8004140:	69b1      	ldr	r1, [r6, #24]
 8004142:	68c2      	ldr	r2, [r0, #12]
 8004144:	68cb      	ldr	r3, [r1, #12]
 8004146:	429a      	cmp	r2, r3
 8004148:	f040 8114 	bne.w	8004374 <ai_platform_network_process+0x31c>
 800414c:	6882      	ldr	r2, [r0, #8]
 800414e:	688b      	ldr	r3, [r1, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	f040 810f 	bne.w	8004374 <ai_platform_network_process+0x31c>
 8004156:	6842      	ldr	r2, [r0, #4]
 8004158:	684b      	ldr	r3, [r1, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	f040 810a 	bne.w	8004374 <ai_platform_network_process+0x31c>
 8004160:	69a3      	ldr	r3, [r4, #24]
 8004162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004166:	f001 f94b 	bl	8005400 <ai_array_get_data_byte_size>
 800416a:	4605      	mov	r5, r0
 800416c:	4620      	mov	r0, r4
 800416e:	f001 f95f 	bl	8005430 <get_tensor_byte_size>
 8004172:	4285      	cmp	r5, r0
 8004174:	f0c0 80fe 	bcc.w	8004374 <ai_platform_network_process+0x31c>
 8004178:	69a3      	ldr	r3, [r4, #24]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	f001 f8ac 	bl	80052d8 <ai_array_to_buffer_fmt>
 8004180:	6833      	ldr	r3, [r6, #0]
 8004182:	4058      	eors	r0, r3
 8004184:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8004188:	f040 81b9 	bne.w	80044fe <ai_platform_network_process+0x4a6>
 800418c:	6873      	ldr	r3, [r6, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 81ac 	beq.w	80044ec <ai_platform_network_process+0x494>
 8004194:	69b3      	ldr	r3, [r6, #24]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 819c 	beq.w	80044d6 <ai_platform_network_process+0x47e>
 800419e:	9a01      	ldr	r2, [sp, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	bf38      	it	cc
 80041a4:	461a      	movcc	r2, r3
 80041a6:	4620      	mov	r0, r4
 80041a8:	9201      	str	r2, [sp, #4]
 80041aa:	f001 f941 	bl	8005430 <get_tensor_byte_size>
 80041ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80041b2:	69b3      	ldr	r3, [r6, #24]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	fb00 f303 	mul.w	r3, r0, r3
 80041ba:	f8c8 300c 	str.w	r3, [r8, #12]
 80041be:	6871      	ldr	r1, [r6, #4]
 80041c0:	f8c8 1004 	str.w	r1, [r8, #4]
 80041c4:	440b      	add	r3, r1
 80041c6:	f849 300b 	str.w	r3, [r9, fp]
 80041ca:	69a0      	ldr	r0, [r4, #24]
 80041cc:	6803      	ldr	r3, [r0, #0]
 80041ce:	009a      	lsls	r2, r3, #2
 80041d0:	f107 0701 	add.w	r7, r7, #1
 80041d4:	f106 061c 	add.w	r6, r6, #28
 80041d8:	f100 80af 	bmi.w	800433a <ai_platform_network_process+0x2e2>
 80041dc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	4419      	add	r1, r3
 80041e4:	6081      	str	r1, [r0, #8]
 80041e6:	69a3      	ldr	r3, [r4, #24]
 80041e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80041ec:	60da      	str	r2, [r3, #12]
 80041ee:	f8ba 3000 	ldrh.w	r3, [sl]
 80041f2:	42bb      	cmp	r3, r7
 80041f4:	d888      	bhi.n	8004108 <ai_platform_network_process+0xb0>
 80041f6:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80041fa:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80041fc:	f1bb 0f00 	cmp.w	fp, #0
 8004200:	f000 8186 	beq.w	8004510 <ai_platform_network_process+0x4b8>
 8004204:	2a01      	cmp	r2, #1
 8004206:	f240 815e 	bls.w	80044c6 <ai_platform_network_process+0x46e>
 800420a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800420e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8157 	beq.w	80044c6 <ai_platform_network_process+0x46e>
 8004218:	465e      	mov	r6, fp
 800421a:	2700      	movs	r7, #0
 800421c:	462c      	mov	r4, r5
 800421e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80b4 	beq.w	8004390 <ai_platform_network_process+0x338>
 8004228:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800422c:	2d00      	cmp	r5, #0
 800422e:	f000 80af 	beq.w	8004390 <ai_platform_network_process+0x338>
 8004232:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004236:	f8d3 8000 	ldr.w	r8, [r3]
 800423a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800423e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8004242:	f000 8171 	beq.w	8004528 <ai_platform_network_process+0x4d0>
 8004246:	69ab      	ldr	r3, [r5, #24]
 8004248:	2101      	movs	r1, #1
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	4630      	mov	r0, r6
 8004250:	f7ff f980 	bl	8003554 <ai_buffer_get_size>
 8004254:	9b02      	ldr	r3, [sp, #8]
 8004256:	4283      	cmp	r3, r0
 8004258:	f0c0 8134 	bcc.w	80044c4 <ai_platform_network_process+0x46c>
 800425c:	68e8      	ldr	r0, [r5, #12]
 800425e:	69b1      	ldr	r1, [r6, #24]
 8004260:	68c2      	ldr	r2, [r0, #12]
 8004262:	68cb      	ldr	r3, [r1, #12]
 8004264:	429a      	cmp	r2, r3
 8004266:	f040 812d 	bne.w	80044c4 <ai_platform_network_process+0x46c>
 800426a:	6882      	ldr	r2, [r0, #8]
 800426c:	688b      	ldr	r3, [r1, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	f040 8128 	bne.w	80044c4 <ai_platform_network_process+0x46c>
 8004274:	6842      	ldr	r2, [r0, #4]
 8004276:	684b      	ldr	r3, [r1, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	f040 8123 	bne.w	80044c4 <ai_platform_network_process+0x46c>
 800427e:	69ab      	ldr	r3, [r5, #24]
 8004280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004284:	f001 f8bc 	bl	8005400 <ai_array_get_data_byte_size>
 8004288:	9002      	str	r0, [sp, #8]
 800428a:	4628      	mov	r0, r5
 800428c:	f001 f8d0 	bl	8005430 <get_tensor_byte_size>
 8004290:	9b02      	ldr	r3, [sp, #8]
 8004292:	4283      	cmp	r3, r0
 8004294:	f0c0 8116 	bcc.w	80044c4 <ai_platform_network_process+0x46c>
 8004298:	69ab      	ldr	r3, [r5, #24]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	f001 f81c 	bl	80052d8 <ai_array_to_buffer_fmt>
 80042a0:	6833      	ldr	r3, [r6, #0]
 80042a2:	4058      	eors	r0, r3
 80042a4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80042a8:	f040 8136 	bne.w	8004518 <ai_platform_network_process+0x4c0>
 80042ac:	6873      	ldr	r3, [r6, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 814d 	beq.w	800454e <ai_platform_network_process+0x4f6>
 80042b4:	69b3      	ldr	r3, [r6, #24]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 813f 	beq.w	800453c <ai_platform_network_process+0x4e4>
 80042be:	9a01      	ldr	r2, [sp, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	bf38      	it	cc
 80042c4:	461a      	movcc	r2, r3
 80042c6:	4628      	mov	r0, r5
 80042c8:	9201      	str	r2, [sp, #4]
 80042ca:	f001 f8b1 	bl	8005430 <get_tensor_byte_size>
 80042ce:	f8ca 0008 	str.w	r0, [sl, #8]
 80042d2:	69b3      	ldr	r3, [r6, #24]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	fb00 f303 	mul.w	r3, r0, r3
 80042da:	f8ca 300c 	str.w	r3, [sl, #12]
 80042de:	6871      	ldr	r1, [r6, #4]
 80042e0:	f8ca 1004 	str.w	r1, [sl, #4]
 80042e4:	440b      	add	r3, r1
 80042e6:	f848 300b 	str.w	r3, [r8, fp]
 80042ea:	69a8      	ldr	r0, [r5, #24]
 80042ec:	6803      	ldr	r3, [r0, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	f107 0701 	add.w	r7, r7, #1
 80042f4:	f106 061c 	add.w	r6, r6, #28
 80042f8:	d445      	bmi.n	8004386 <ai_platform_network_process+0x32e>
 80042fa:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	4419      	add	r1, r3
 8004302:	6081      	str	r1, [r0, #8]
 8004304:	69ab      	ldr	r3, [r5, #24]
 8004306:	f8da 2004 	ldr.w	r2, [sl, #4]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004310:	429f      	cmp	r7, r3
 8004312:	d384      	bcc.n	800421e <ai_platform_network_process+0x1c6>
 8004314:	e03c      	b.n	8004390 <ai_platform_network_process+0x338>
 8004316:	e7fe      	b.n	8004316 <ai_platform_network_process+0x2be>
 8004318:	68ea      	ldr	r2, [r5, #12]
 800431a:	616b      	str	r3, [r5, #20]
 800431c:	f002 0203 	and.w	r2, r2, #3
 8004320:	2a03      	cmp	r2, #3
 8004322:	d11d      	bne.n	8004360 <ai_platform_network_process+0x308>
 8004324:	2217      	movs	r2, #23
 8004326:	2112      	movs	r1, #18
 8004328:	f105 0010 	add.w	r0, r5, #16
 800432c:	f000 f920 	bl	8004570 <core_set_error>
 8004330:	2400      	movs	r4, #0
 8004332:	4620      	mov	r0, r4
 8004334:	b005      	add	sp, #20
 8004336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433a:	f8ba 3000 	ldrh.w	r3, [sl]
 800433e:	429f      	cmp	r7, r3
 8004340:	f4ff aee2 	bcc.w	8004108 <ai_platform_network_process+0xb0>
 8004344:	e757      	b.n	80041f6 <ai_platform_network_process+0x19e>
 8004346:	bf00      	nop
 8004348:	a1c00100 	.word	0xa1c00100
 800434c:	e0042000 	.word	0xe0042000
 8004350:	58024000 	.word	0x58024000
 8004354:	f407a5c2 	.word	0xf407a5c2
 8004358:	b5e8b5cd 	.word	0xb5e8b5cd
 800435c:	40023000 	.word	0x40023000
 8004360:	2230      	movs	r2, #48	; 0x30
 8004362:	2111      	movs	r1, #17
 8004364:	f105 0010 	add.w	r0, r5, #16
 8004368:	f000 f902 	bl	8004570 <core_set_error>
 800436c:	2400      	movs	r4, #0
 800436e:	e7e0      	b.n	8004332 <ai_platform_network_process+0x2da>
 8004370:	462c      	mov	r4, r5
 8004372:	e7de      	b.n	8004332 <ai_platform_network_process+0x2da>
 8004374:	9d02      	ldr	r5, [sp, #8]
 8004376:	2218      	movs	r2, #24
 8004378:	2112      	movs	r1, #18
 800437a:	f105 0010 	add.w	r0, r5, #16
 800437e:	f000 f8f7 	bl	8004570 <core_set_error>
 8004382:	2400      	movs	r4, #0
 8004384:	e7d5      	b.n	8004332 <ai_platform_network_process+0x2da>
 8004386:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800438a:	429f      	cmp	r7, r3
 800438c:	f4ff af47 	bcc.w	800421e <ai_platform_network_process+0x1c6>
 8004390:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004394:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8004396:	82a3      	strh	r3, [r4, #20]
 8004398:	4625      	mov	r5, r4
 800439a:	2a00      	cmp	r2, #0
 800439c:	f040 808c 	bne.w	80044b8 <ai_platform_network_process+0x460>
 80043a0:	4616      	mov	r6, r2
 80043a2:	4617      	mov	r7, r2
 80043a4:	8aec      	ldrh	r4, [r5, #22]
 80043a6:	429c      	cmp	r4, r3
 80043a8:	bf38      	it	cc
 80043aa:	46ab      	movcc	fp, r5
 80043ac:	d2c1      	bcs.n	8004332 <ai_platform_network_process+0x2da>
 80043ae:	2e00      	cmp	r6, #0
 80043b0:	d030      	beq.n	8004414 <ai_platform_network_process+0x3bc>
 80043b2:	f04f 0800 	mov.w	r8, #0
 80043b6:	e014      	b.n	80043e2 <ai_platform_network_process+0x38a>
 80043b8:	6882      	ldr	r2, [r0, #8]
 80043ba:	68c5      	ldr	r5, [r0, #12]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	1b52      	subs	r2, r2, r5
 80043c0:	4413      	add	r3, r2
 80043c2:	6083      	str	r3, [r0, #8]
 80043c4:	698b      	ldr	r3, [r1, #24]
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80043ce:	f859 200a 	ldr.w	r2, [r9, sl]
 80043d2:	440b      	add	r3, r1
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bf24      	itt	cs
 80043d8:	68e3      	ldrcs	r3, [r4, #12]
 80043da:	1ad3      	subcs	r3, r2, r3
 80043dc:	6063      	str	r3, [r4, #4]
 80043de:	f108 0801 	add.w	r8, r8, #1
 80043e2:	8833      	ldrh	r3, [r6, #0]
 80043e4:	4543      	cmp	r3, r8
 80043e6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80043ea:	d913      	bls.n	8004414 <ai_platform_network_process+0x3bc>
 80043ec:	6873      	ldr	r3, [r6, #4]
 80043ee:	b18b      	cbz	r3, 8004414 <ai_platform_network_process+0x3bc>
 80043f0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80043f4:	b171      	cbz	r1, 8004414 <ai_platform_network_process+0x3bc>
 80043f6:	6988      	ldr	r0, [r1, #24]
 80043f8:	68b2      	ldr	r2, [r6, #8]
 80043fa:	6803      	ldr	r3, [r0, #0]
 80043fc:	f8d2 9000 	ldr.w	r9, [r2]
 8004400:	009d      	lsls	r5, r3, #2
 8004402:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8004406:	d5d7      	bpl.n	80043b8 <ai_platform_network_process+0x360>
 8004408:	6881      	ldr	r1, [r0, #8]
 800440a:	68a2      	ldr	r2, [r4, #8]
 800440c:	6860      	ldr	r0, [r4, #4]
 800440e:	f000 fedd 	bl	80051cc <st_int8_copy>
 8004412:	e7da      	b.n	80043ca <ai_platform_network_process+0x372>
 8004414:	4658      	mov	r0, fp
 8004416:	f000 f903 	bl	8004620 <ai_layers_forward_all>
 800441a:	2f00      	cmp	r7, #0
 800441c:	d03d      	beq.n	800449a <ai_platform_network_process+0x442>
 800441e:	2400      	movs	r4, #0
 8004420:	e016      	b.n	8004450 <ai_platform_network_process+0x3f8>
 8004422:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8004426:	f859 100a 	ldr.w	r1, [r9, sl]
 800442a:	4413      	add	r3, r2
 800442c:	428b      	cmp	r3, r1
 800442e:	bf24      	itt	cs
 8004430:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004434:	1acb      	subcs	r3, r1, r3
 8004436:	f8c8 3004 	str.w	r3, [r8, #4]
 800443a:	6981      	ldr	r1, [r0, #24]
 800443c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8004440:	1b52      	subs	r2, r2, r5
 8004442:	4413      	add	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
 8004446:	6983      	ldr	r3, [r0, #24]
 8004448:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	3401      	adds	r4, #1
 8004450:	883b      	ldrh	r3, [r7, #0]
 8004452:	42a3      	cmp	r3, r4
 8004454:	d921      	bls.n	800449a <ai_platform_network_process+0x442>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	b1fb      	cbz	r3, 800449a <ai_platform_network_process+0x442>
 800445a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800445e:	b1e0      	cbz	r0, 800449a <ai_platform_network_process+0x442>
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	6983      	ldr	r3, [r0, #24]
 8004464:	f8d2 9000 	ldr.w	r9, [r2]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	0092      	lsls	r2, r2, #2
 800446c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8004470:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8004474:	d5d5      	bpl.n	8004422 <ai_platform_network_process+0x3ca>
 8004476:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800447a:	6898      	ldr	r0, [r3, #8]
 800447c:	f000 fea6 	bl	80051cc <st_int8_copy>
 8004480:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8004484:	f859 200a 	ldr.w	r2, [r9, sl]
 8004488:	440b      	add	r3, r1
 800448a:	4293      	cmp	r3, r2
 800448c:	bf24      	itt	cs
 800448e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8004492:	1ad3      	subcs	r3, r2, r3
 8004494:	f8c8 3004 	str.w	r3, [r8, #4]
 8004498:	e7d9      	b.n	800444e <ai_platform_network_process+0x3f6>
 800449a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800449e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80044a2:	3401      	adds	r4, #1
 80044a4:	b2a4      	uxth	r4, r4
 80044a6:	42a3      	cmp	r3, r4
 80044a8:	f8ab 4016 	strh.w	r4, [fp, #22]
 80044ac:	f63f af7f 	bhi.w	80043ae <ai_platform_network_process+0x356>
 80044b0:	4620      	mov	r0, r4
 80044b2:	b005      	add	sp, #20
 80044b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b8:	2a01      	cmp	r2, #1
 80044ba:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80044bc:	d03c      	beq.n	8004538 <ai_platform_network_process+0x4e0>
 80044be:	f106 070c 	add.w	r7, r6, #12
 80044c2:	e76f      	b.n	80043a4 <ai_platform_network_process+0x34c>
 80044c4:	4625      	mov	r5, r4
 80044c6:	2218      	movs	r2, #24
 80044c8:	2113      	movs	r1, #19
 80044ca:	f105 0010 	add.w	r0, r5, #16
 80044ce:	f000 f84f 	bl	8004570 <core_set_error>
 80044d2:	2400      	movs	r4, #0
 80044d4:	e72d      	b.n	8004332 <ai_platform_network_process+0x2da>
 80044d6:	9d02      	ldr	r5, [sp, #8]
 80044d8:	4604      	mov	r4, r0
 80044da:	2221      	movs	r2, #33	; 0x21
 80044dc:	2112      	movs	r1, #18
 80044de:	f105 0010 	add.w	r0, r5, #16
 80044e2:	f000 f845 	bl	8004570 <core_set_error>
 80044e6:	e724      	b.n	8004332 <ai_platform_network_process+0x2da>
 80044e8:	9d02      	ldr	r5, [sp, #8]
 80044ea:	e71b      	b.n	8004324 <ai_platform_network_process+0x2cc>
 80044ec:	9d02      	ldr	r5, [sp, #8]
 80044ee:	4604      	mov	r4, r0
 80044f0:	2217      	movs	r2, #23
 80044f2:	2112      	movs	r1, #18
 80044f4:	f105 0010 	add.w	r0, r5, #16
 80044f8:	f000 f83a 	bl	8004570 <core_set_error>
 80044fc:	e719      	b.n	8004332 <ai_platform_network_process+0x2da>
 80044fe:	9d02      	ldr	r5, [sp, #8]
 8004500:	2219      	movs	r2, #25
 8004502:	2112      	movs	r1, #18
 8004504:	f105 0010 	add.w	r0, r5, #16
 8004508:	f000 f832 	bl	8004570 <core_set_error>
 800450c:	2400      	movs	r4, #0
 800450e:	e710      	b.n	8004332 <ai_platform_network_process+0x2da>
 8004510:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004514:	82ab      	strh	r3, [r5, #20]
 8004516:	e740      	b.n	800439a <ai_platform_network_process+0x342>
 8004518:	f104 0010 	add.w	r0, r4, #16
 800451c:	2219      	movs	r2, #25
 800451e:	2113      	movs	r1, #19
 8004520:	f000 f826 	bl	8004570 <core_set_error>
 8004524:	2400      	movs	r4, #0
 8004526:	e704      	b.n	8004332 <ai_platform_network_process+0x2da>
 8004528:	f104 0010 	add.w	r0, r4, #16
 800452c:	2217      	movs	r2, #23
 800452e:	2113      	movs	r1, #19
 8004530:	f000 f81e 	bl	8004570 <core_set_error>
 8004534:	4654      	mov	r4, sl
 8004536:	e6fc      	b.n	8004332 <ai_platform_network_process+0x2da>
 8004538:	2700      	movs	r7, #0
 800453a:	e733      	b.n	80043a4 <ai_platform_network_process+0x34c>
 800453c:	4625      	mov	r5, r4
 800453e:	2221      	movs	r2, #33	; 0x21
 8004540:	4604      	mov	r4, r0
 8004542:	2113      	movs	r1, #19
 8004544:	f105 0010 	add.w	r0, r5, #16
 8004548:	f000 f812 	bl	8004570 <core_set_error>
 800454c:	e6f1      	b.n	8004332 <ai_platform_network_process+0x2da>
 800454e:	4625      	mov	r5, r4
 8004550:	2217      	movs	r2, #23
 8004552:	4604      	mov	r4, r0
 8004554:	2113      	movs	r1, #19
 8004556:	f105 0010 	add.w	r0, r5, #16
 800455a:	f000 f809 	bl	8004570 <core_set_error>
 800455e:	e6e8      	b.n	8004332 <ai_platform_network_process+0x2da>

08004560 <core_init>:
 8004560:	2001      	movs	r0, #1
 8004562:	4770      	bx	lr

08004564 <core_get_error>:
 8004564:	4603      	mov	r3, r0
 8004566:	2200      	movs	r2, #0
 8004568:	6800      	ldr	r0, [r0, #0]
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop

08004570 <core_set_error>:
 8004570:	4603      	mov	r3, r0
 8004572:	7800      	ldrb	r0, [r0, #0]
 8004574:	b108      	cbz	r0, 800457a <core_set_error+0xa>
 8004576:	2000      	movs	r0, #0
 8004578:	4770      	bx	lr
 800457a:	7019      	strb	r1, [r3, #0]
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	f362 211f 	bfi	r1, r2, #8, #24
 8004582:	2001      	movs	r0, #1
 8004584:	6019      	str	r1, [r3, #0]
 8004586:	4770      	bx	lr

08004588 <ai_check_custom_types>:
 8004588:	b082      	sub	sp, #8
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <ai_check_custom_types+0x50>)
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	b118      	cbz	r0, 8004598 <ai_check_custom_types+0x10>
 8004590:	7803      	ldrb	r3, [r0, #0]
 8004592:	2b03      	cmp	r3, #3
 8004594:	d002      	beq.n	800459c <ai_check_custom_types+0x14>
 8004596:	2000      	movs	r0, #0
 8004598:	b002      	add	sp, #8
 800459a:	4770      	bx	lr
 800459c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <ai_check_custom_types+0x26>
 80045a4:	2001      	movs	r0, #1
 80045a6:	f080 0001 	eor.w	r0, r0, #1
 80045aa:	b002      	add	sp, #8
 80045ac:	4770      	bx	lr
 80045ae:	7842      	ldrb	r2, [r0, #1]
 80045b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	f100 0001 	add.w	r0, r0, #1
 80045ba:	d1f3      	bne.n	80045a4 <ai_check_custom_types+0x1c>
 80045bc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80045c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1ed      	bne.n	80045a4 <ai_check_custom_types+0x1c>
 80045c8:	7842      	ldrb	r2, [r0, #1]
 80045ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d1e8      	bne.n	80045a4 <ai_check_custom_types+0x1c>
 80045d2:	2000      	movs	r0, #0
 80045d4:	e7e7      	b.n	80045a6 <ai_check_custom_types+0x1e>
 80045d6:	bf00      	nop
 80045d8:	84048403 	.word	0x84048403

080045dc <ai_layers_init_all>:
 80045dc:	4601      	mov	r1, r0
 80045de:	2000      	movs	r0, #0
 80045e0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80045e2:	b143      	cbz	r3, 80045f6 <ai_layers_init_all+0x1a>
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	60d9      	str	r1, [r3, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f100 0001 	add.w	r0, r0, #1
 80045ee:	d002      	beq.n	80045f6 <ai_layers_init_all+0x1a>
 80045f0:	b10a      	cbz	r2, 80045f6 <ai_layers_init_all+0x1a>
 80045f2:	4613      	mov	r3, r2
 80045f4:	e7f5      	b.n	80045e2 <ai_layers_init_all+0x6>
 80045f6:	4770      	bx	lr

080045f8 <ai_layers_post_init_all>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80045fc:	2500      	movs	r5, #0
 80045fe:	b16c      	cbz	r4, 800461c <ai_layers_post_init_all+0x24>
 8004600:	6863      	ldr	r3, [r4, #4]
 8004602:	07db      	lsls	r3, r3, #31
 8004604:	d504      	bpl.n	8004610 <ai_layers_post_init_all+0x18>
 8004606:	6a23      	ldr	r3, [r4, #32]
 8004608:	4620      	mov	r0, r4
 800460a:	b10b      	cbz	r3, 8004610 <ai_layers_post_init_all+0x18>
 800460c:	4798      	blx	r3
 800460e:	3501      	adds	r5, #1
 8004610:	6923      	ldr	r3, [r4, #16]
 8004612:	42a3      	cmp	r3, r4
 8004614:	d002      	beq.n	800461c <ai_layers_post_init_all+0x24>
 8004616:	b10b      	cbz	r3, 800461c <ai_layers_post_init_all+0x24>
 8004618:	461c      	mov	r4, r3
 800461a:	e7f0      	b.n	80045fe <ai_layers_post_init_all+0x6>
 800461c:	4628      	mov	r0, r5
 800461e:	bd38      	pop	{r3, r4, r5, pc}

08004620 <ai_layers_forward_all>:
 8004620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004624:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8004628:	4604      	mov	r4, r0
 800462a:	f1b8 0f00 	cmp.w	r8, #0
 800462e:	d02b      	beq.n	8004688 <ai_layers_forward_all+0x68>
 8004630:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004632:	6381      	str	r1, [r0, #56]	; 0x38
 8004634:	b321      	cbz	r1, 8004680 <ai_layers_forward_all+0x60>
 8004636:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004638:	2001      	movs	r0, #1
 800463a:	47c0      	blx	r8
 800463c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800463e:	b1fe      	cbz	r6, 8004680 <ai_layers_forward_all+0x60>
 8004640:	2700      	movs	r7, #0
 8004642:	4631      	mov	r1, r6
 8004644:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004646:	2002      	movs	r0, #2
 8004648:	47c0      	blx	r8
 800464a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800464c:	4628      	mov	r0, r5
 800464e:	696b      	ldr	r3, [r5, #20]
 8004650:	4798      	blx	r3
 8004652:	692e      	ldr	r6, [r5, #16]
 8004654:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004658:	42b5      	cmp	r5, r6
 800465a:	f04f 0003 	mov.w	r0, #3
 800465e:	d007      	beq.n	8004670 <ai_layers_forward_all+0x50>
 8004660:	47c0      	blx	r8
 8004662:	3701      	adds	r7, #1
 8004664:	63a6      	str	r6, [r4, #56]	; 0x38
 8004666:	2e00      	cmp	r6, #0
 8004668:	d1eb      	bne.n	8004642 <ai_layers_forward_all+0x22>
 800466a:	4638      	mov	r0, r7
 800466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004670:	2003      	movs	r0, #3
 8004672:	47c0      	blx	r8
 8004674:	2300      	movs	r3, #0
 8004676:	3701      	adds	r7, #1
 8004678:	63a3      	str	r3, [r4, #56]	; 0x38
 800467a:	4638      	mov	r0, r7
 800467c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004680:	2700      	movs	r7, #0
 8004682:	4638      	mov	r0, r7
 8004684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004688:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800468a:	6385      	str	r5, [r0, #56]	; 0x38
 800468c:	2d00      	cmp	r5, #0
 800468e:	d0f7      	beq.n	8004680 <ai_layers_forward_all+0x60>
 8004690:	4647      	mov	r7, r8
 8004692:	696b      	ldr	r3, [r5, #20]
 8004694:	4628      	mov	r0, r5
 8004696:	4798      	blx	r3
 8004698:	462b      	mov	r3, r5
 800469a:	692d      	ldr	r5, [r5, #16]
 800469c:	429d      	cmp	r5, r3
 800469e:	d004      	beq.n	80046aa <ai_layers_forward_all+0x8a>
 80046a0:	63a5      	str	r5, [r4, #56]	; 0x38
 80046a2:	3701      	adds	r7, #1
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	d1f4      	bne.n	8004692 <ai_layers_forward_all+0x72>
 80046a8:	e7df      	b.n	800466a <ai_layers_forward_all+0x4a>
 80046aa:	2300      	movs	r3, #0
 80046ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80046ae:	3701      	adds	r7, #1
 80046b0:	e7db      	b.n	800466a <ai_layers_forward_all+0x4a>
 80046b2:	bf00      	nop

080046b4 <forward_dense>:
 80046b4:	6983      	ldr	r3, [r0, #24]
 80046b6:	881a      	ldrh	r2, [r3, #0]
 80046b8:	2a00      	cmp	r2, #0
 80046ba:	f000 8181 	beq.w	80049c0 <forward_dense+0x30c>
 80046be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c2:	ed2d 8b02 	vpush	{d8}
 80046c6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80046ca:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80046ce:	b095      	sub	sp, #84	; 0x54
 80046d0:	b105      	cbz	r5, 80046d4 <forward_dense+0x20>
 80046d2:	682d      	ldr	r5, [r5, #0]
 80046d4:	2a01      	cmp	r2, #1
 80046d6:	f000 828f 	beq.w	8004bf8 <forward_dense+0x544>
 80046da:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80046de:	b106      	cbz	r6, 80046e2 <forward_dense+0x2e>
 80046e0:	6836      	ldr	r6, [r6, #0]
 80046e2:	2a02      	cmp	r2, #2
 80046e4:	f000 816e 	beq.w	80049c4 <forward_dense+0x310>
 80046e8:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80046ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8274 	beq.w	8004bdc <forward_dense+0x528>
 80046f4:	4619      	mov	r1, r3
 80046f6:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80046fa:	6809      	ldr	r1, [r1, #0]
 80046fc:	910d      	str	r1, [sp, #52]	; 0x34
 80046fe:	2b01      	cmp	r3, #1
 8004700:	f240 826e 	bls.w	8004be0 <forward_dense+0x52c>
 8004704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	930b      	str	r3, [sp, #44]	; 0x2c
 800470a:	460b      	mov	r3, r1
 800470c:	68e8      	ldr	r0, [r5, #12]
 800470e:	68f7      	ldr	r7, [r6, #12]
 8004710:	6840      	ldr	r0, [r0, #4]
 8004712:	6999      	ldr	r1, [r3, #24]
 8004714:	9013      	str	r0, [sp, #76]	; 0x4c
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	680b      	ldr	r3, [r1, #0]
 800471a:	9012      	str	r0, [sp, #72]	; 0x48
 800471c:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8004720:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8004724:	fb00 f404 	mul.w	r4, r0, r4
 8004728:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800472c:	fa4e f000 	asr.w	r0, lr, r0
 8004730:	2a03      	cmp	r2, #3
 8004732:	9010      	str	r0, [sp, #64]	; 0x40
 8004734:	f000 825d 	beq.w	8004bf2 <forward_dense+0x53e>
 8004738:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800473c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8004740:	2a00      	cmp	r2, #0
 8004742:	f000 8246 	beq.w	8004bd2 <forward_dense+0x51e>
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	2a00      	cmp	r2, #0
 800474a:	f000 8242 	beq.w	8004bd2 <forward_dense+0x51e>
 800474e:	2b04      	cmp	r3, #4
 8004750:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8004754:	f000 822c 	beq.w	8004bb0 <forward_dense+0x4fc>
 8004758:	2b08      	cmp	r3, #8
 800475a:	f000 8229 	beq.w	8004bb0 <forward_dense+0x4fc>
 800475e:	f04f 0b00 	mov.w	fp, #0
 8004762:	69b2      	ldr	r2, [r6, #24]
 8004764:	69ab      	ldr	r3, [r5, #24]
 8004766:	6891      	ldr	r1, [r2, #8]
 8004768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	6952      	ldr	r2, [r2, #20]
 800476e:	9106      	str	r1, [sp, #24]
 8004770:	fb07 f404 	mul.w	r4, r7, r4
 8004774:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004778:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800477a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800477e:	4281      	cmp	r1, r0
 8004780:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8004784:	900e      	str	r0, [sp, #56]	; 0x38
 8004786:	940c      	str	r4, [sp, #48]	; 0x30
 8004788:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 800478c:	f080 8113 	bcs.w	80049b6 <forward_dense+0x302>
 8004790:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004792:	ed9f 8a93 	vldr	s16, [pc, #588]	; 80049e0 <forward_dense+0x32c>
 8004796:	f021 0201 	bic.w	r2, r1, #1
 800479a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800479e:	9204      	str	r2, [sp, #16]
 80047a0:	f001 0201 	and.w	r2, r1, #1
 80047a4:	08c8      	lsrs	r0, r1, #3
 80047a6:	9208      	str	r2, [sp, #32]
 80047a8:	008a      	lsls	r2, r1, #2
 80047aa:	f001 0a07 	and.w	sl, r1, #7
 80047ae:	920f      	str	r2, [sp, #60]	; 0x3c
 80047b0:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 80047b4:	3320      	adds	r3, #32
 80047b6:	465c      	mov	r4, fp
 80047b8:	9007      	str	r0, [sp, #28]
 80047ba:	46cb      	mov	fp, r9
 80047bc:	9205      	str	r2, [sp, #20]
 80047be:	9302      	str	r3, [sp, #8]
 80047c0:	46c1      	mov	r9, r8
 80047c2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80047c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	9b02      	ldr	r3, [sp, #8]
 80047ce:	3b20      	subs	r3, #32
 80047d0:	930a      	str	r3, [sp, #40]	; 0x28
 80047d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047d4:	b10b      	cbz	r3, 80047da <forward_dense+0x126>
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2c00      	cmp	r4, #0
 80047dc:	f000 81da 	beq.w	8004b94 <forward_dense+0x4e0>
 80047e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80047e2:	2904      	cmp	r1, #4
 80047e4:	9906      	ldr	r1, [sp, #24]
 80047e6:	f000 80fd 	beq.w	80049e4 <forward_dense+0x330>
 80047ea:	4549      	cmp	r1, r9
 80047ec:	f080 80d2 	bcs.w	8004994 <forward_dense+0x2e0>
 80047f0:	460f      	mov	r7, r1
 80047f2:	9907      	ldr	r1, [sp, #28]
 80047f4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80047f8:	f8dd a014 	ldr.w	sl, [sp, #20]
 80047fc:	1c4e      	adds	r6, r1, #1
 80047fe:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004802:	4694      	mov	ip, r2
 8004804:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004806:	468e      	mov	lr, r1
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80de 	beq.w	80049ca <forward_dense+0x316>
 800480e:	ecf3 2a01 	vldmia	r3!, {s5}
 8004812:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80049e0 <forward_dense+0x32c>
 8004816:	f1be 0f00 	cmp.w	lr, #0
 800481a:	f000 80de 	beq.w	80049da <forward_dense+0x326>
 800481e:	f10c 0108 	add.w	r1, ip, #8
 8004822:	4640      	mov	r0, r8
 8004824:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8004828:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800482c:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8004830:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8004834:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8004838:	ed10 5a04 	vldr	s10, [r0, #-16]
 800483c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8004840:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004844:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004848:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800484c:	edd5 7a00 	vldr	s15, [r5]
 8004850:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8004854:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004858:	ee67 7a83 	vmul.f32	s15, s15, s6
 800485c:	ed95 3a00 	vldr	s6, [r5]
 8004860:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8004864:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004868:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800486c:	3108      	adds	r1, #8
 800486e:	edd5 3a00 	vldr	s7, [r5]
 8004872:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8004876:	eee3 7a84 	vfma.f32	s15, s7, s8
 800487a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800487e:	3020      	adds	r0, #32
 8004880:	ed95 4a00 	vldr	s8, [r5]
 8004884:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8004888:	eee4 7a24 	vfma.f32	s15, s8, s9
 800488c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004890:	edd5 4a00 	vldr	s9, [r5]
 8004894:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8004898:	eee4 7a85 	vfma.f32	s15, s9, s10
 800489c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048a0:	ed95 5a00 	vldr	s10, [r5]
 80048a4:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80048a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80048ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048b0:	edd5 5a00 	vldr	s11, [r5]
 80048b4:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80048b8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80048bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048c0:	428e      	cmp	r6, r1
 80048c2:	ed95 6a00 	vldr	s12, [r5]
 80048c6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80048ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048ce:	d1a9      	bne.n	8004824 <forward_dense+0x170>
 80048d0:	f1a6 0108 	sub.w	r1, r6, #8
 80048d4:	4650      	mov	r0, sl
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	d04a      	beq.n	8004970 <forward_dense+0x2bc>
 80048da:	780d      	ldrb	r5, [r1, #0]
 80048dc:	edd0 6a00 	vldr	s13, [r0]
 80048e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048e4:	edd5 7a00 	vldr	s15, [r5]
 80048e8:	2a01      	cmp	r2, #1
 80048ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80048ee:	d03f      	beq.n	8004970 <forward_dense+0x2bc>
 80048f0:	784d      	ldrb	r5, [r1, #1]
 80048f2:	edd0 6a01 	vldr	s13, [r0, #4]
 80048f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80048fa:	edd5 7a00 	vldr	s15, [r5]
 80048fe:	2a02      	cmp	r2, #2
 8004900:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004904:	d034      	beq.n	8004970 <forward_dense+0x2bc>
 8004906:	788d      	ldrb	r5, [r1, #2]
 8004908:	edd0 6a02 	vldr	s13, [r0, #8]
 800490c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004910:	edd5 7a00 	vldr	s15, [r5]
 8004914:	2a03      	cmp	r2, #3
 8004916:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800491a:	d029      	beq.n	8004970 <forward_dense+0x2bc>
 800491c:	78cd      	ldrb	r5, [r1, #3]
 800491e:	edd0 6a03 	vldr	s13, [r0, #12]
 8004922:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004926:	edd5 7a00 	vldr	s15, [r5]
 800492a:	2a04      	cmp	r2, #4
 800492c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004930:	d01e      	beq.n	8004970 <forward_dense+0x2bc>
 8004932:	790d      	ldrb	r5, [r1, #4]
 8004934:	edd0 6a04 	vldr	s13, [r0, #16]
 8004938:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800493c:	edd5 7a00 	vldr	s15, [r5]
 8004940:	2a05      	cmp	r2, #5
 8004942:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004946:	d013      	beq.n	8004970 <forward_dense+0x2bc>
 8004948:	794d      	ldrb	r5, [r1, #5]
 800494a:	edd0 6a05 	vldr	s13, [r0, #20]
 800494e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004952:	edd5 7a00 	vldr	s15, [r5]
 8004956:	2a06      	cmp	r2, #6
 8004958:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800495c:	d008      	beq.n	8004970 <forward_dense+0x2bc>
 800495e:	7989      	ldrb	r1, [r1, #6]
 8004960:	edd0 7a06 	vldr	s15, [r0, #24]
 8004964:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004968:	edd1 6a00 	vldr	s13, [r1]
 800496c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004970:	44dc      	add	ip, fp
 8004972:	445e      	add	r6, fp
 8004974:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004978:	eca7 7a01 	vstmia	r7!, {s14}
 800497c:	454f      	cmp	r7, r9
 800497e:	f4ff af43 	bcc.w	8004808 <forward_dense+0x154>
 8004982:	9a06      	ldr	r2, [sp, #24]
 8004984:	eba9 0302 	sub.w	r3, r9, r2
 8004988:	3b01      	subs	r3, #1
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	3304      	adds	r3, #4
 8004990:	18d3      	adds	r3, r2, r3
 8004992:	9306      	str	r3, [sp, #24]
 8004994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004996:	9a05      	ldr	r2, [sp, #20]
 8004998:	4499      	add	r9, r3
 800499a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800499c:	441a      	add	r2, r3
 800499e:	9205      	str	r2, [sp, #20]
 80049a0:	9a02      	ldr	r2, [sp, #8]
 80049a2:	441a      	add	r2, r3
 80049a4:	9202      	str	r2, [sp, #8]
 80049a6:	9a04      	ldr	r2, [sp, #16]
 80049a8:	441a      	add	r2, r3
 80049aa:	9204      	str	r2, [sp, #16]
 80049ac:	9b06      	ldr	r3, [sp, #24]
 80049ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b0:	4293      	cmp	r3, r2
 80049b2:	f4ff af08 	bcc.w	80047c6 <forward_dense+0x112>
 80049b6:	b015      	add	sp, #84	; 0x54
 80049b8:	ecbd 8b02 	vpop	{d8}
 80049bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c0:	6853      	ldr	r3, [r2, #4]
 80049c2:	deff      	udf	#255	; 0xff
 80049c4:	2300      	movs	r3, #0
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	deff      	udf	#255	; 0xff
 80049ca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80049e0 <forward_dense+0x32c>
 80049ce:	eef0 2a48 	vmov.f32	s5, s16
 80049d2:	f1be 0f00 	cmp.w	lr, #0
 80049d6:	f47f af22 	bne.w	800481e <forward_dense+0x16a>
 80049da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80049dc:	4661      	mov	r1, ip
 80049de:	e77a      	b.n	80048d6 <forward_dense+0x222>
 80049e0:	00000000 	.word	0x00000000
 80049e4:	4549      	cmp	r1, r9
 80049e6:	d2d5      	bcs.n	8004994 <forward_dense+0x2e0>
 80049e8:	9807      	ldr	r0, [sp, #28]
 80049ea:	9103      	str	r1, [sp, #12]
 80049ec:	9904      	ldr	r1, [sp, #16]
 80049ee:	f100 0c01 	add.w	ip, r0, #1
 80049f2:	3901      	subs	r1, #1
 80049f4:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80049f8:	9109      	str	r1, [sp, #36]	; 0x24
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80b2 	beq.w	8004b64 <forward_dense+0x4b0>
 8004a00:	9907      	ldr	r1, [sp, #28]
 8004a02:	ecf3 2a01 	vldmia	r3!, {s5}
 8004a06:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 80049e0 <forward_dense+0x32c>
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	f000 80b2 	beq.w	8004b74 <forward_dense+0x4c0>
 8004a10:	9902      	ldr	r1, [sp, #8]
 8004a12:	1d10      	adds	r0, r2, #4
 8004a14:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8004a18:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8004a1c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8004a20:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8004a24:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004a28:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8004a2c:	ed11 5a04 	vldr	s10, [r1, #-16]
 8004a30:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004a34:	ed11 6a02 	vldr	s12, [r1, #-8]
 8004a38:	ed51 6a01 	vldr	s13, [r1, #-4]
 8004a3c:	f006 070f 	and.w	r7, r6, #15
 8004a40:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004a44:	edd7 7a00 	vldr	s15, [r7]
 8004a48:	0936      	lsrs	r6, r6, #4
 8004a4a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004a4e:	ed96 3a00 	vldr	s6, [r6]
 8004a52:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004a56:	092e      	lsrs	r6, r5, #4
 8004a58:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004a5c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004a60:	f005 050f 	and.w	r5, r5, #15
 8004a64:	edd6 3a00 	vldr	s7, [r6]
 8004a68:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8004a6c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004a70:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004a74:	0937      	lsrs	r7, r6, #4
 8004a76:	ed95 4a00 	vldr	s8, [r5]
 8004a7a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8004a7e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004a82:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004a86:	f006 060f 	and.w	r6, r6, #15
 8004a8a:	edd7 4a00 	vldr	s9, [r7]
 8004a8e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004a92:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004a96:	3004      	adds	r0, #4
 8004a98:	ed96 5a00 	vldr	s10, [r6]
 8004a9c:	092e      	lsrs	r6, r5, #4
 8004a9e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004aa2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004aa6:	f005 050f 	and.w	r5, r5, #15
 8004aaa:	edd6 5a00 	vldr	s11, [r6]
 8004aae:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004ab2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004ab6:	4584      	cmp	ip, r0
 8004ab8:	ed95 6a00 	vldr	s12, [r5]
 8004abc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004ac0:	f101 0120 	add.w	r1, r1, #32
 8004ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ac8:	d1a4      	bne.n	8004a14 <forward_dense+0x360>
 8004aca:	f8dd e014 	ldr.w	lr, [sp, #20]
 8004ace:	f1ac 0804 	sub.w	r8, ip, #4
 8004ad2:	9904      	ldr	r1, [sp, #16]
 8004ad4:	458e      	cmp	lr, r1
 8004ad6:	d22a      	bcs.n	8004b2e <forward_dense+0x47a>
 8004ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ada:	eba1 070e 	sub.w	r7, r1, lr
 8004ade:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8004ae2:	f10e 0008 	add.w	r0, lr, #8
 8004ae6:	f108 36ff 	add.w	r6, r8, #4294967295
 8004aea:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8004aee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004af2:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004af6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8004afa:	f001 050f 	and.w	r5, r1, #15
 8004afe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004b02:	edd5 7a00 	vldr	s15, [r5]
 8004b06:	0909      	lsrs	r1, r1, #4
 8004b08:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004b0c:	ed91 6a00 	vldr	s12, [r1]
 8004b10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004b14:	42b7      	cmp	r7, r6
 8004b16:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004b1a:	f100 0008 	add.w	r0, r0, #8
 8004b1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b22:	d1e4      	bne.n	8004aee <forward_dense+0x43a>
 8004b24:	f10a 0a01 	add.w	sl, sl, #1
 8004b28:	44d0      	add	r8, sl
 8004b2a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8004b2e:	9908      	ldr	r1, [sp, #32]
 8004b30:	b321      	cbz	r1, 8004b7c <forward_dense+0x4c8>
 8004b32:	f898 1000 	ldrb.w	r1, [r8]
 8004b36:	edde 7a00 	vldr	s15, [lr]
 8004b3a:	0909      	lsrs	r1, r1, #4
 8004b3c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004b40:	edd1 6a00 	vldr	s13, [r1]
 8004b44:	9903      	ldr	r1, [sp, #12]
 8004b46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b4a:	445a      	add	r2, fp
 8004b4c:	44dc      	add	ip, fp
 8004b4e:	ee72 2a87 	vadd.f32	s5, s5, s14
 8004b52:	ece1 2a01 	vstmia	r1!, {s5}
 8004b56:	4589      	cmp	r9, r1
 8004b58:	9103      	str	r1, [sp, #12]
 8004b5a:	f67f af12 	bls.w	8004982 <forward_dense+0x2ce>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f47f af4e 	bne.w	8004a00 <forward_dense+0x34c>
 8004b64:	9907      	ldr	r1, [sp, #28]
 8004b66:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 80049e0 <forward_dense+0x32c>
 8004b6a:	eef0 2a48 	vmov.f32	s5, s16
 8004b6e:	2900      	cmp	r1, #0
 8004b70:	f47f af4e 	bne.w	8004a10 <forward_dense+0x35c>
 8004b74:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8004b78:	4690      	mov	r8, r2
 8004b7a:	e7aa      	b.n	8004ad2 <forward_dense+0x41e>
 8004b7c:	9903      	ldr	r1, [sp, #12]
 8004b7e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004b82:	445a      	add	r2, fp
 8004b84:	eca1 7a01 	vstmia	r1!, {s14}
 8004b88:	4549      	cmp	r1, r9
 8004b8a:	9103      	str	r1, [sp, #12]
 8004b8c:	44dc      	add	ip, fp
 8004b8e:	f4ff af34 	bcc.w	80049fa <forward_dense+0x346>
 8004b92:	e6f6      	b.n	8004982 <forward_dense+0x2ce>
 8004b94:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004b96:	9d06      	ldr	r5, [sp, #24]
 8004b98:	9101      	str	r1, [sp, #4]
 8004b9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004b9c:	9100      	str	r1, [sp, #0]
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ba2:	f000 f9ef 	bl	8004f84 <forward_lite_dense_if32of32wf32>
 8004ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ba8:	462b      	mov	r3, r5
 8004baa:	4413      	add	r3, r2
 8004bac:	9306      	str	r3, [sp, #24]
 8004bae:	e6f1      	b.n	8004994 <forward_dense+0x2e0>
 8004bb0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004bb4:	f1b9 0f00 	cmp.w	r9, #0
 8004bb8:	d016      	beq.n	8004be8 <forward_dense+0x534>
 8004bba:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004bbe:	f000 fbf7 	bl	80053b0 <ai_array_get_byte_size>
 8004bc2:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4659      	mov	r1, fp
 8004bca:	4640      	mov	r0, r8
 8004bcc:	f000 fafe 	bl	80051cc <st_int8_copy>
 8004bd0:	e5c7      	b.n	8004762 <forward_dense+0xae>
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d00a      	beq.n	8004bec <forward_dense+0x538>
 8004bd6:	f04f 0900 	mov.w	r9, #0
 8004bda:	e5bd      	b.n	8004758 <forward_dense+0xa4>
 8004bdc:	930d      	str	r3, [sp, #52]	; 0x34
 8004bde:	e595      	b.n	800470c <forward_dense+0x58>
 8004be0:	2300      	movs	r3, #0
 8004be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004be4:	460b      	mov	r3, r1
 8004be6:	e591      	b.n	800470c <forward_dense+0x58>
 8004be8:	46c3      	mov	fp, r8
 8004bea:	e5ba      	b.n	8004762 <forward_dense+0xae>
 8004bec:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8004bf0:	e5b7      	b.n	8004762 <forward_dense+0xae>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	deff      	udf	#255	; 0xff
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	deff      	udf	#255	; 0xff
 8004bfe:	bf00      	nop

08004c00 <forward_relu>:
 8004c00:	6982      	ldr	r2, [r0, #24]
 8004c02:	8813      	ldrh	r3, [r2, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05b      	beq.n	8004cc0 <forward_relu+0xc0>
 8004c08:	6851      	ldr	r1, [r2, #4]
 8004c0a:	684a      	ldr	r2, [r1, #4]
 8004c0c:	b102      	cbz	r2, 8004c10 <forward_relu+0x10>
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	f000 8123 	beq.w	8004e5c <forward_relu+0x25c>
 8004c16:	b470      	push	{r4, r5, r6}
 8004c18:	6909      	ldr	r1, [r1, #16]
 8004c1a:	b101      	cbz	r1, 8004c1e <forward_relu+0x1e>
 8004c1c:	6809      	ldr	r1, [r1, #0]
 8004c1e:	69c6      	ldr	r6, [r0, #28]
 8004c20:	2e00      	cmp	r6, #0
 8004c22:	f000 8097 	beq.w	8004d54 <forward_relu+0x154>
 8004c26:	6873      	ldr	r3, [r6, #4]
 8004c28:	6988      	ldr	r0, [r1, #24]
 8004c2a:	6991      	ldr	r1, [r2, #24]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	f000 80c1 	beq.w	8004db4 <forward_relu+0x1b4>
 8004c32:	6893      	ldr	r3, [r2, #8]
 8004c34:	6880      	ldr	r0, [r0, #8]
 8004c36:	688c      	ldr	r4, [r1, #8]
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	f000 80f2 	beq.w	8004e22 <forward_relu+0x222>
 8004c3e:	68d5      	ldr	r5, [r2, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004c46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004c4a:	42ab      	cmp	r3, r5
 8004c4c:	fb01 f202 	mul.w	r2, r1, r2
 8004c50:	d1f9      	bne.n	8004c46 <forward_relu+0x46>
 8004c52:	68b3      	ldr	r3, [r6, #8]
 8004c54:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c58:	edd3 6a00 	vldr	s13, [r3]
 8004c5c:	ed93 6a01 	vldr	s12, [r3, #4]
 8004c60:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004c64:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004c68:	3a01      	subs	r2, #1
 8004c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004c72:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004c76:	d425      	bmi.n	8004cc4 <forward_relu+0xc4>
 8004c78:	429c      	cmp	r4, r3
 8004c7a:	d81f      	bhi.n	8004cbc <forward_relu+0xbc>
 8004c7c:	1d1a      	adds	r2, r3, #4
 8004c7e:	1d01      	adds	r1, r0, #4
 8004c80:	e00d      	b.n	8004c9e <forward_relu+0x9e>
 8004c82:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8a:	db03      	blt.n	8004c94 <forward_relu+0x94>
 8004c8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c90:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004c94:	3b08      	subs	r3, #8
 8004c96:	429c      	cmp	r4, r3
 8004c98:	ed61 7a01 	vstmdb	r1!, {s15}
 8004c9c:	d80e      	bhi.n	8004cbc <forward_relu+0xbc>
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	ed72 7a01 	vldmdb	r2!, {s15}
 8004ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cac:	d9e9      	bls.n	8004c82 <forward_relu+0x82>
 8004cae:	3b08      	subs	r3, #8
 8004cb0:	eef0 7a47 	vmov.f32	s15, s14
 8004cb4:	429c      	cmp	r4, r3
 8004cb6:	ed61 7a01 	vstmdb	r1!, {s15}
 8004cba:	d9f0      	bls.n	8004c9e <forward_relu+0x9e>
 8004cbc:	bc70      	pop	{r4, r5, r6}
 8004cbe:	4770      	bx	lr
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	deff      	udf	#255	; 0xff
 8004cc4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ccc:	d11f      	bne.n	8004d0e <forward_relu+0x10e>
 8004cce:	429c      	cmp	r4, r3
 8004cd0:	d8f4      	bhi.n	8004cbc <forward_relu+0xbc>
 8004cd2:	1b1c      	subs	r4, r3, r4
 8004cd4:	f024 0403 	bic.w	r4, r4, #3
 8004cd8:	1d1a      	adds	r2, r3, #4
 8004cda:	2500      	movs	r5, #0
 8004cdc:	1b1b      	subs	r3, r3, r4
 8004cde:	1d01      	adds	r1, r0, #4
 8004ce0:	ed72 7a01 	vldmdb	r2!, {s15}
 8004ce4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cec:	dc0a      	bgt.n	8004d04 <forward_relu+0x104>
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	f841 5d04 	str.w	r5, [r1, #-4]!
 8004cf4:	d0e2      	beq.n	8004cbc <forward_relu+0xbc>
 8004cf6:	ed72 7a01 	vldmdb	r2!, {s15}
 8004cfa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d02:	ddf4      	ble.n	8004cee <forward_relu+0xee>
 8004d04:	429a      	cmp	r2, r3
 8004d06:	ed61 7a01 	vstmdb	r1!, {s15}
 8004d0a:	d1e9      	bne.n	8004ce0 <forward_relu+0xe0>
 8004d0c:	e7d6      	b.n	8004cbc <forward_relu+0xbc>
 8004d0e:	429c      	cmp	r4, r3
 8004d10:	d8d4      	bhi.n	8004cbc <forward_relu+0xbc>
 8004d12:	1b1c      	subs	r4, r3, r4
 8004d14:	f024 0403 	bic.w	r4, r4, #3
 8004d18:	1d1a      	adds	r2, r3, #4
 8004d1a:	1d01      	adds	r1, r0, #4
 8004d1c:	1b1b      	subs	r3, r3, r4
 8004d1e:	ed72 7a01 	vldmdb	r2!, {s15}
 8004d22:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2a:	db0e      	blt.n	8004d4a <forward_relu+0x14a>
 8004d2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004d30:	4293      	cmp	r3, r2
 8004d32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004d36:	ed61 7a01 	vstmdb	r1!, {s15}
 8004d3a:	d0bf      	beq.n	8004cbc <forward_relu+0xbc>
 8004d3c:	ed72 7a01 	vldmdb	r2!, {s15}
 8004d40:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d48:	daf0      	bge.n	8004d2c <forward_relu+0x12c>
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	ed61 7a01 	vstmdb	r1!, {s15}
 8004d50:	d1e5      	bne.n	8004d1e <forward_relu+0x11e>
 8004d52:	e7b3      	b.n	8004cbc <forward_relu+0xbc>
 8004d54:	6893      	ldr	r3, [r2, #8]
 8004d56:	6989      	ldr	r1, [r1, #24]
 8004d58:	6990      	ldr	r0, [r2, #24]
 8004d5a:	6889      	ldr	r1, [r1, #8]
 8004d5c:	6884      	ldr	r4, [r0, #8]
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	d075      	beq.n	8004e4e <forward_relu+0x24e>
 8004d62:	68d5      	ldr	r5, [r2, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004d6a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8004d6e:	429d      	cmp	r5, r3
 8004d70:	fb00 f202 	mul.w	r2, r0, r2
 8004d74:	d1f9      	bne.n	8004d6a <forward_relu+0x16a>
 8004d76:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8004d80:	4294      	cmp	r4, r2
 8004d82:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8004d86:	d899      	bhi.n	8004cbc <forward_relu+0xbc>
 8004d88:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004e64 <forward_relu+0x264>
 8004d8c:	3204      	adds	r2, #4
 8004d8e:	3104      	adds	r1, #4
 8004d90:	4613      	mov	r3, r2
 8004d92:	ed72 7a01 	vldmdb	r2!, {s15}
 8004d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9e:	f1a3 0308 	sub.w	r3, r3, #8
 8004da2:	bfb8      	it	lt
 8004da4:	eef0 7a47 	vmovlt.f32	s15, s14
 8004da8:	429c      	cmp	r4, r3
 8004daa:	ed61 7a01 	vstmdb	r1!, {s15}
 8004dae:	d9ef      	bls.n	8004d90 <forward_relu+0x190>
 8004db0:	bc70      	pop	{r4, r5, r6}
 8004db2:	4770      	bx	lr
 8004db4:	688c      	ldr	r4, [r1, #8]
 8004db6:	6891      	ldr	r1, [r2, #8]
 8004db8:	6880      	ldr	r0, [r0, #8]
 8004dba:	0a09      	lsrs	r1, r1, #8
 8004dbc:	d049      	beq.n	8004e52 <forward_relu+0x252>
 8004dbe:	68d5      	ldr	r5, [r2, #12]
 8004dc0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8004dc4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004dc8:	42aa      	cmp	r2, r5
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	d1f9      	bne.n	8004dc4 <forward_relu+0x1c4>
 8004dd0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004dd4:	3a01      	subs	r2, #1
 8004dd6:	68b1      	ldr	r1, [r6, #8]
 8004dd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004ddc:	429c      	cmp	r4, r3
 8004dde:	ed91 7a00 	vldr	s14, [r1]
 8004de2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004de6:	f63f af69 	bhi.w	8004cbc <forward_relu+0xbc>
 8004dea:	2500      	movs	r5, #0
 8004dec:	3304      	adds	r3, #4
 8004dee:	1d02      	adds	r2, r0, #4
 8004df0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	f1a3 0104 	sub.w	r1, r3, #4
 8004e00:	f1a3 0308 	sub.w	r3, r3, #8
 8004e04:	d406      	bmi.n	8004e14 <forward_relu+0x214>
 8004e06:	429c      	cmp	r4, r3
 8004e08:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004e0c:	f63f af56 	bhi.w	8004cbc <forward_relu+0xbc>
 8004e10:	460b      	mov	r3, r1
 8004e12:	e7ed      	b.n	8004df0 <forward_relu+0x1f0>
 8004e14:	429c      	cmp	r4, r3
 8004e16:	ed62 7a01 	vstmdb	r2!, {s15}
 8004e1a:	f63f af4f 	bhi.w	8004cbc <forward_relu+0xbc>
 8004e1e:	460b      	mov	r3, r1
 8004e20:	e7e6      	b.n	8004df0 <forward_relu+0x1f0>
 8004e22:	68b3      	ldr	r3, [r6, #8]
 8004e24:	ed93 7a02 	vldr	s14, [r3, #8]
 8004e28:	edd3 6a00 	vldr	s13, [r3]
 8004e2c:	ed93 6a01 	vldr	s12, [r3, #4]
 8004e30:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e38:	d401      	bmi.n	8004e3e <forward_relu+0x23e>
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	e71e      	b.n	8004c7c <forward_relu+0x7c>
 8004e3e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e46:	4623      	mov	r3, r4
 8004e48:	f47f af63 	bne.w	8004d12 <forward_relu+0x112>
 8004e4c:	e741      	b.n	8004cd2 <forward_relu+0xd2>
 8004e4e:	4622      	mov	r2, r4
 8004e50:	e79a      	b.n	8004d88 <forward_relu+0x188>
 8004e52:	68b2      	ldr	r2, [r6, #8]
 8004e54:	4623      	mov	r3, r4
 8004e56:	ed92 7a00 	vldr	s14, [r2]
 8004e5a:	e7c6      	b.n	8004dea <forward_relu+0x1ea>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	deff      	udf	#255	; 0xff
 8004e62:	bf00      	nop
 8004e64:	00000000 	.word	0x00000000

08004e68 <forward_sm>:
 8004e68:	6982      	ldr	r2, [r0, #24]
 8004e6a:	8813      	ldrh	r3, [r2, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d07c      	beq.n	8004f6a <forward_sm+0x102>
 8004e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e74:	ed2d 8b04 	vpush	{d8-d9}
 8004e78:	6852      	ldr	r2, [r2, #4]
 8004e7a:	6854      	ldr	r4, [r2, #4]
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	b104      	cbz	r4, 8004e82 <forward_sm+0x1a>
 8004e80:	6824      	ldr	r4, [r4, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d076      	beq.n	8004f74 <forward_sm+0x10c>
 8004e86:	6913      	ldr	r3, [r2, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d076      	beq.n	8004f7a <forward_sm+0x112>
 8004e8c:	681e      	ldr	r6, [r3, #0]
 8004e8e:	68a3      	ldr	r3, [r4, #8]
 8004e90:	68e0      	ldr	r0, [r4, #12]
 8004e92:	68f2      	ldr	r2, [r6, #12]
 8004e94:	6845      	ldr	r5, [r0, #4]
 8004e96:	6857      	ldr	r7, [r2, #4]
 8004e98:	0a1b      	lsrs	r3, r3, #8
 8004e9a:	d068      	beq.n	8004f6e <forward_sm+0x106>
 8004e9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ea6:	4298      	cmp	r0, r3
 8004ea8:	fb01 f202 	mul.w	r2, r1, r2
 8004eac:	d1f9      	bne.n	8004ea2 <forward_sm+0x3a>
 8004eae:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8004eb2:	69a2      	ldr	r2, [r4, #24]
 8004eb4:	69b3      	ldr	r3, [r6, #24]
 8004eb6:	6892      	ldr	r2, [r2, #8]
 8004eb8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8004ebc:	eb02 0309 	add.w	r3, r2, r9
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	d24c      	bcs.n	8004f60 <forward_sm+0xf8>
 8004ec6:	00bb      	lsls	r3, r7, #2
 8004ec8:	9303      	str	r3, [sp, #12]
 8004eca:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8004ece:	00ab      	lsls	r3, r5, #2
 8004ed0:	2d01      	cmp	r5, #1
 8004ed2:	ed92 8a00 	vldr	s16, [r2]
 8004ed6:	9302      	str	r3, [sp, #8]
 8004ed8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004edc:	463e      	mov	r6, r7
 8004ede:	d93c      	bls.n	8004f5a <forward_sm+0xf2>
 8004ee0:	1d13      	adds	r3, r2, #4
 8004ee2:	ecf3 7a01 	vldmia	r3!, {s15}
 8004ee6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eee:	bfb8      	it	lt
 8004ef0:	eeb0 8a67 	vmovlt.f32	s16, s15
 8004ef4:	429e      	cmp	r6, r3
 8004ef6:	d1f4      	bne.n	8004ee2 <forward_sm+0x7a>
 8004ef8:	eddf 8a21 	vldr	s17, [pc, #132]	; 8004f80 <forward_sm+0x118>
 8004efc:	4692      	mov	sl, r2
 8004efe:	46c3      	mov	fp, r8
 8004f00:	46c1      	mov	r9, r8
 8004f02:	2400      	movs	r4, #0
 8004f04:	ecba 0a01 	vldmia	sl!, {s0}
 8004f08:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004f0c:	f004 feb0 	bl	8009c70 <expf>
 8004f10:	3401      	adds	r4, #1
 8004f12:	42a5      	cmp	r5, r4
 8004f14:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004f18:	eca9 0a01 	vstmia	r9!, {s0}
 8004f1c:	d8f2      	bhi.n	8004f04 <forward_sm+0x9c>
 8004f1e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f26:	d00b      	beq.n	8004f40 <forward_sm+0xd8>
 8004f28:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	3301      	adds	r3, #1
 8004f30:	429d      	cmp	r5, r3
 8004f32:	eddb 7a00 	vldr	s15, [fp]
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	eceb 7a01 	vstmia	fp!, {s15}
 8004f3e:	d8f6      	bhi.n	8004f2e <forward_sm+0xc6>
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	9901      	ldr	r1, [sp, #4]
 8004f44:	4498      	add	r8, r3
 8004f46:	9b02      	ldr	r3, [sp, #8]
 8004f48:	42b9      	cmp	r1, r7
 8004f4a:	463a      	mov	r2, r7
 8004f4c:	441e      	add	r6, r3
 8004f4e:	d907      	bls.n	8004f60 <forward_sm+0xf8>
 8004f50:	2d01      	cmp	r5, #1
 8004f52:	ed92 8a00 	vldr	s16, [r2]
 8004f56:	441f      	add	r7, r3
 8004f58:	d8c2      	bhi.n	8004ee0 <forward_sm+0x78>
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	d0f0      	beq.n	8004f40 <forward_sm+0xd8>
 8004f5e:	e7cb      	b.n	8004ef8 <forward_sm+0x90>
 8004f60:	b005      	add	sp, #20
 8004f62:	ecbd 8b04 	vpop	{d8-d9}
 8004f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	deff      	udf	#255	; 0xff
 8004f6e:	f04f 0904 	mov.w	r9, #4
 8004f72:	e79e      	b.n	8004eb2 <forward_sm+0x4a>
 8004f74:	2300      	movs	r3, #0
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	deff      	udf	#255	; 0xff
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	deff      	udf	#255	; 0xff
 8004f7e:	bf00      	nop
 8004f80:	00000000 	.word	0x00000000

08004f84 <forward_lite_dense_if32of32wf32>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8004f8c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8004f90:	4287      	cmp	r7, r0
 8004f92:	f240 8106 	bls.w	80051a2 <forward_lite_dense_if32of32wf32+0x21e>
 8004f96:	f1a6 0810 	sub.w	r8, r6, #16
 8004f9a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8004f9e:	f108 0801 	add.w	r8, r8, #1
 8004fa2:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8004fa6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8004faa:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8004fae:	4605      	mov	r5, r0
 8004fb0:	f006 0a0f 	and.w	sl, r6, #15
 8004fb4:	2e0f      	cmp	r6, #15
 8004fb6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80051c8 <forward_lite_dense_if32of32wf32+0x244>
 8004fba:	f240 8101 	bls.w	80051c0 <forward_lite_dense_if32of32wf32+0x23c>
 8004fbe:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8004fc2:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8004fc6:	46b6      	mov	lr, r6
 8004fc8:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8004fcc:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8004fd0:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8004fd4:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8004fd8:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8004fdc:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8004fe0:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8004fe4:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8004fe8:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8004fec:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8004ff0:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8004ff4:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8004ff8:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8004ffc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005000:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8005004:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005008:	f1ae 0e10 	sub.w	lr, lr, #16
 800500c:	f1be 0f0f 	cmp.w	lr, #15
 8005010:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8005014:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8005018:	eee5 7a86 	vfma.f32	s15, s11, s12
 800501c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8005020:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8005024:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8005028:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800502c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005030:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8005034:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8005038:	eee5 7a25 	vfma.f32	s15, s10, s11
 800503c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8005040:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8005044:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005048:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800504c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8005050:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005054:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8005058:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800505c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005060:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8005064:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8005068:	eee5 7a25 	vfma.f32	s15, s10, s11
 800506c:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8005070:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8005074:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005078:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800507c:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8005080:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005084:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005088:	eee3 7a23 	vfma.f32	s15, s6, s7
 800508c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005090:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005094:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005098:	ee37 7a27 	vadd.f32	s14, s14, s15
 800509c:	d894      	bhi.n	8004fc8 <forward_lite_dense_if32of32wf32+0x44>
 800509e:	eb02 0e0b 	add.w	lr, r2, fp
 80050a2:	4654      	mov	r4, sl
 80050a4:	46c4      	mov	ip, r8
 80050a6:	2c00      	cmp	r4, #0
 80050a8:	d075      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 80050aa:	eddc 6a00 	vldr	s13, [ip]
 80050ae:	edde 7a00 	vldr	s15, [lr]
 80050b2:	2c01      	cmp	r4, #1
 80050b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050b8:	d06d      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 80050ba:	eddc 6a01 	vldr	s13, [ip, #4]
 80050be:	edde 7a01 	vldr	s15, [lr, #4]
 80050c2:	2c02      	cmp	r4, #2
 80050c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050c8:	d065      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 80050ca:	eddc 6a02 	vldr	s13, [ip, #8]
 80050ce:	edde 7a02 	vldr	s15, [lr, #8]
 80050d2:	2c03      	cmp	r4, #3
 80050d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050d8:	d05d      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 80050da:	eddc 6a03 	vldr	s13, [ip, #12]
 80050de:	edde 7a03 	vldr	s15, [lr, #12]
 80050e2:	2c04      	cmp	r4, #4
 80050e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050e8:	d055      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 80050ea:	eddc 6a04 	vldr	s13, [ip, #16]
 80050ee:	edde 7a04 	vldr	s15, [lr, #16]
 80050f2:	2c05      	cmp	r4, #5
 80050f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050f8:	d04d      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 80050fa:	eddc 6a05 	vldr	s13, [ip, #20]
 80050fe:	edde 7a05 	vldr	s15, [lr, #20]
 8005102:	2c06      	cmp	r4, #6
 8005104:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005108:	d045      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 800510a:	eddc 6a06 	vldr	s13, [ip, #24]
 800510e:	edde 7a06 	vldr	s15, [lr, #24]
 8005112:	2c07      	cmp	r4, #7
 8005114:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005118:	d03d      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 800511a:	eddc 6a07 	vldr	s13, [ip, #28]
 800511e:	edde 7a07 	vldr	s15, [lr, #28]
 8005122:	2c08      	cmp	r4, #8
 8005124:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005128:	d035      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 800512a:	eddc 6a08 	vldr	s13, [ip, #32]
 800512e:	edde 7a08 	vldr	s15, [lr, #32]
 8005132:	2c09      	cmp	r4, #9
 8005134:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005138:	d02d      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 800513a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800513e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8005142:	2c0a      	cmp	r4, #10
 8005144:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005148:	d025      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 800514a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800514e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8005152:	2c0b      	cmp	r4, #11
 8005154:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005158:	d01d      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 800515a:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800515e:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8005162:	2c0c      	cmp	r4, #12
 8005164:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005168:	d015      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 800516a:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800516e:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8005172:	3c0d      	subs	r4, #13
 8005174:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005178:	d00d      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 800517a:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800517e:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8005182:	2c01      	cmp	r4, #1
 8005184:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005188:	d005      	beq.n	8005196 <forward_lite_dense_if32of32wf32+0x212>
 800518a:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800518e:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8005192:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005196:	444a      	add	r2, r9
 8005198:	eca5 7a01 	vstmia	r5!, {s14}
 800519c:	42af      	cmp	r7, r5
 800519e:	f63f af09 	bhi.w	8004fb4 <forward_lite_dense_if32of32wf32+0x30>
 80051a2:	b15b      	cbz	r3, 80051bc <forward_lite_dense_if32of32wf32+0x238>
 80051a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051a6:	b14a      	cbz	r2, 80051bc <forward_lite_dense_if32of32wf32+0x238>
 80051a8:	edd0 7a00 	vldr	s15, [r0]
 80051ac:	ecb3 7a01 	vldmia	r3!, {s14}
 80051b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051b4:	ece0 7a01 	vstmia	r0!, {s15}
 80051b8:	4287      	cmp	r7, r0
 80051ba:	d1f5      	bne.n	80051a8 <forward_lite_dense_if32of32wf32+0x224>
 80051bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c0:	4634      	mov	r4, r6
 80051c2:	4696      	mov	lr, r2
 80051c4:	468c      	mov	ip, r1
 80051c6:	e76e      	b.n	80050a6 <forward_lite_dense_if32of32wf32+0x122>
 80051c8:	00000000 	.word	0x00000000

080051cc <st_int8_copy>:
 80051cc:	4288      	cmp	r0, r1
 80051ce:	d057      	beq.n	8005280 <st_int8_copy+0xb4>
 80051d0:	2a00      	cmp	r2, #0
 80051d2:	d055      	beq.n	8005280 <st_int8_copy+0xb4>
 80051d4:	4288      	cmp	r0, r1
 80051d6:	d354      	bcc.n	8005282 <st_int8_copy+0xb6>
 80051d8:	078b      	lsls	r3, r1, #30
 80051da:	d102      	bne.n	80051e2 <st_int8_copy+0x16>
 80051dc:	e009      	b.n	80051f2 <st_int8_copy+0x26>
 80051de:	2a00      	cmp	r2, #0
 80051e0:	d05c      	beq.n	800529c <st_int8_copy+0xd0>
 80051e2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80051e6:	f801 3b01 	strb.w	r3, [r1], #1
 80051ea:	078b      	lsls	r3, r1, #30
 80051ec:	f102 32ff 	add.w	r2, r2, #4294967295
 80051f0:	d1f5      	bne.n	80051de <st_int8_copy+0x12>
 80051f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f6:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80051fa:	d069      	beq.n	80052d0 <st_int8_copy+0x104>
 80051fc:	ea41 0300 	orr.w	r3, r1, r0
 8005200:	075b      	lsls	r3, r3, #29
 8005202:	d14c      	bne.n	800529e <st_int8_copy+0xd2>
 8005204:	f10e 33ff 	add.w	r3, lr, #4294967295
 8005208:	2b01      	cmp	r3, #1
 800520a:	d948      	bls.n	800529e <st_int8_copy+0xd2>
 800520c:	f100 0310 	add.w	r3, r0, #16
 8005210:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8005214:	f101 0c10 	add.w	ip, r1, #16
 8005218:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800521c:	ed13 6b04 	vldr	d6, [r3, #-16]
 8005220:	ed13 7b02 	vldr	d7, [r3, #-8]
 8005224:	3310      	adds	r3, #16
 8005226:	4573      	cmp	r3, lr
 8005228:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800522c:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8005230:	f10c 0c10 	add.w	ip, ip, #16
 8005234:	d1f2      	bne.n	800521c <st_int8_copy+0x50>
 8005236:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800523a:	4421      	add	r1, r4
 800523c:	4420      	add	r0, r4
 800523e:	f002 0203 	and.w	r2, r2, #3
 8005242:	b16b      	cbz	r3, 8005260 <st_int8_copy+0x94>
 8005244:	6804      	ldr	r4, [r0, #0]
 8005246:	600c      	str	r4, [r1, #0]
 8005248:	1e5c      	subs	r4, r3, #1
 800524a:	d005      	beq.n	8005258 <st_int8_copy+0x8c>
 800524c:	6845      	ldr	r5, [r0, #4]
 800524e:	604d      	str	r5, [r1, #4]
 8005250:	2c01      	cmp	r4, #1
 8005252:	bf1c      	itt	ne
 8005254:	6884      	ldrne	r4, [r0, #8]
 8005256:	608c      	strne	r4, [r1, #8]
 8005258:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800525c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005260:	b162      	cbz	r2, 800527c <st_int8_copy+0xb0>
 8005262:	f990 3000 	ldrsb.w	r3, [r0]
 8005266:	700b      	strb	r3, [r1, #0]
 8005268:	3a01      	subs	r2, #1
 800526a:	d007      	beq.n	800527c <st_int8_copy+0xb0>
 800526c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8005270:	704b      	strb	r3, [r1, #1]
 8005272:	2a01      	cmp	r2, #1
 8005274:	bf1c      	itt	ne
 8005276:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 800527a:	708b      	strbne	r3, [r1, #2]
 800527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005280:	4770      	bx	lr
 8005282:	1883      	adds	r3, r0, r2
 8005284:	428b      	cmp	r3, r1
 8005286:	d9a7      	bls.n	80051d8 <st_int8_copy+0xc>
 8005288:	4283      	cmp	r3, r0
 800528a:	440a      	add	r2, r1
 800528c:	d9f8      	bls.n	8005280 <st_int8_copy+0xb4>
 800528e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8005292:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8005296:	4283      	cmp	r3, r0
 8005298:	d1f9      	bne.n	800528e <st_int8_copy+0xc2>
 800529a:	4770      	bx	lr
 800529c:	4770      	bx	lr
 800529e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80052a2:	460b      	mov	r3, r1
 80052a4:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80052a8:	4684      	mov	ip, r0
 80052aa:	f8dc 7000 	ldr.w	r7, [ip]
 80052ae:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80052b2:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80052b6:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80052ba:	f8c3 800c 	str.w	r8, [r3, #12]
 80052be:	601f      	str	r7, [r3, #0]
 80052c0:	605e      	str	r6, [r3, #4]
 80052c2:	609d      	str	r5, [r3, #8]
 80052c4:	3310      	adds	r3, #16
 80052c6:	459e      	cmp	lr, r3
 80052c8:	f10c 0c10 	add.w	ip, ip, #16
 80052cc:	d1ed      	bne.n	80052aa <st_int8_copy+0xde>
 80052ce:	e7b2      	b.n	8005236 <st_int8_copy+0x6a>
 80052d0:	0893      	lsrs	r3, r2, #2
 80052d2:	f002 0203 	and.w	r2, r2, #3
 80052d6:	e7b4      	b.n	8005242 <st_int8_copy+0x76>

080052d8 <ai_array_to_buffer_fmt>:
 80052d8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d050      	beq.n	8005382 <ai_array_to_buffer_fmt+0xaa>
 80052e0:	4b2a      	ldr	r3, [pc, #168]	; (800538c <ai_array_to_buffer_fmt+0xb4>)
 80052e2:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d00b      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 80052ea:	dc1c      	bgt.n	8005326 <ai_array_to_buffer_fmt+0x4e>
 80052ec:	4b28      	ldr	r3, [pc, #160]	; (8005390 <ai_array_to_buffer_fmt+0xb8>)
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d007      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 80052f2:	dd0b      	ble.n	800530c <ai_array_to_buffer_fmt+0x34>
 80052f4:	4b27      	ldr	r3, [pc, #156]	; (8005394 <ai_array_to_buffer_fmt+0xbc>)
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d003      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 80052fa:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80052fe:	429a      	cmp	r2, r3
 8005300:	d131      	bne.n	8005366 <ai_array_to_buffer_fmt+0x8e>
 8005302:	4613      	mov	r3, r2
 8005304:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005308:	4318      	orrs	r0, r3
 800530a:	4770      	bx	lr
 800530c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005310:	429a      	cmp	r2, r3
 8005312:	d0f6      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 8005314:	dd2c      	ble.n	8005370 <ai_array_to_buffer_fmt+0x98>
 8005316:	4b20      	ldr	r3, [pc, #128]	; (8005398 <ai_array_to_buffer_fmt+0xc0>)
 8005318:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800531c:	429a      	cmp	r2, r3
 800531e:	bf18      	it	ne
 8005320:	2340      	movne	r3, #64	; 0x40
 8005322:	4318      	orrs	r0, r3
 8005324:	4770      	bx	lr
 8005326:	4b1d      	ldr	r3, [pc, #116]	; (800539c <ai_array_to_buffer_fmt+0xc4>)
 8005328:	429a      	cmp	r2, r3
 800532a:	d0ea      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 800532c:	dd0e      	ble.n	800534c <ai_array_to_buffer_fmt+0x74>
 800532e:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <ai_array_to_buffer_fmt+0xc8>)
 8005330:	429a      	cmp	r2, r3
 8005332:	d0e6      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 8005334:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8005338:	429a      	cmp	r2, r3
 800533a:	d0e2      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <ai_array_to_buffer_fmt+0xcc>)
 800533e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005342:	429a      	cmp	r2, r3
 8005344:	bf18      	it	ne
 8005346:	2340      	movne	r3, #64	; 0x40
 8005348:	4318      	orrs	r0, r3
 800534a:	4770      	bx	lr
 800534c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005350:	429a      	cmp	r2, r3
 8005352:	d0d6      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 8005354:	3307      	adds	r3, #7
 8005356:	429a      	cmp	r2, r3
 8005358:	d0d3      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 800535a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800535e:	429a      	cmp	r2, r3
 8005360:	bf18      	it	ne
 8005362:	2340      	movne	r3, #64	; 0x40
 8005364:	e7ce      	b.n	8005304 <ai_array_to_buffer_fmt+0x2c>
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <ai_array_to_buffer_fmt+0xd0>)
 8005368:	429a      	cmp	r2, r3
 800536a:	bf18      	it	ne
 800536c:	2340      	movne	r3, #64	; 0x40
 800536e:	e7c9      	b.n	8005304 <ai_array_to_buffer_fmt+0x2c>
 8005370:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005374:	429a      	cmp	r2, r3
 8005376:	d0c4      	beq.n	8005302 <ai_array_to_buffer_fmt+0x2a>
 8005378:	3380      	adds	r3, #128	; 0x80
 800537a:	429a      	cmp	r2, r3
 800537c:	bf18      	it	ne
 800537e:	2340      	movne	r3, #64	; 0x40
 8005380:	e7c0      	b.n	8005304 <ai_array_to_buffer_fmt+0x2c>
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <ai_array_to_buffer_fmt+0xd4>)
 8005384:	4003      	ands	r3, r0
 8005386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800538a:	e7bb      	b.n	8005304 <ai_array_to_buffer_fmt+0x2c>
 800538c:	00840040 	.word	0x00840040
 8005390:	00040840 	.word	0x00040840
 8005394:	00041040 	.word	0x00041040
 8005398:	00040447 	.word	0x00040447
 800539c:	00840840 	.word	0x00840840
 80053a0:	00841040 	.word	0x00841040
 80053a4:	0084084f 	.word	0x0084084f
 80053a8:	0004084f 	.word	0x0004084f
 80053ac:	00803fff 	.word	0x00803fff

080053b0 <ai_array_get_byte_size>:
 80053b0:	b319      	cbz	r1, 80053fa <ai_array_get_byte_size+0x4a>
 80053b2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80053b6:	fb03 f101 	mul.w	r1, r3, r1
 80053ba:	3107      	adds	r1, #7
 80053bc:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80053c0:	f021 0307 	bic.w	r3, r1, #7
 80053c4:	2a04      	cmp	r2, #4
 80053c6:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80053ca:	fa23 f101 	lsr.w	r1, r3, r1
 80053ce:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80053d2:	d00b      	beq.n	80053ec <ai_array_get_byte_size+0x3c>
 80053d4:	2a08      	cmp	r2, #8
 80053d6:	d002      	beq.n	80053de <ai_array_get_byte_size+0x2e>
 80053d8:	3107      	adds	r1, #7
 80053da:	08c8      	lsrs	r0, r1, #3
 80053dc:	4770      	bx	lr
 80053de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80053e2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80053e6:	3107      	adds	r1, #7
 80053e8:	08c8      	lsrs	r0, r1, #3
 80053ea:	4770      	bx	lr
 80053ec:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80053f0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80053f4:	3107      	adds	r1, #7
 80053f6:	08c8      	lsrs	r0, r1, #3
 80053f8:	4770      	bx	lr
 80053fa:	4608      	mov	r0, r1
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop

08005400 <ai_array_get_data_byte_size>:
 8005400:	b169      	cbz	r1, 800541e <ai_array_get_data_byte_size+0x1e>
 8005402:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8005406:	fb02 f101 	mul.w	r1, r2, r1
 800540a:	1dcb      	adds	r3, r1, #7
 800540c:	f023 0307 	bic.w	r3, r3, #7
 8005410:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8005414:	fa23 f000 	lsr.w	r0, r3, r0
 8005418:	3007      	adds	r0, #7
 800541a:	08c0      	lsrs	r0, r0, #3
 800541c:	4770      	bx	lr
 800541e:	4608      	mov	r0, r1
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop

08005424 <ai_version_get>:
 8005424:	0212      	lsls	r2, r2, #8
 8005426:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800542a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800542e:	4770      	bx	lr

08005430 <get_tensor_byte_size>:
 8005430:	b410      	push	{r4}
 8005432:	6983      	ldr	r3, [r0, #24]
 8005434:	68c4      	ldr	r4, [r0, #12]
 8005436:	6941      	ldr	r1, [r0, #20]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68e0      	ldr	r0, [r4, #12]
 800543c:	4a07      	ldr	r2, [pc, #28]	; (800545c <get_tensor_byte_size+0x2c>)
 800543e:	68c9      	ldr	r1, [r1, #12]
 8005440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005444:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005448:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800544c:	fb01 f000 	mul.w	r0, r1, r0
 8005450:	4293      	cmp	r3, r2
 8005452:	bf04      	itt	eq
 8005454:	3007      	addeq	r0, #7
 8005456:	08c0      	lsreq	r0, r0, #3
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	000400c0 	.word	0x000400c0

08005460 <malloc>:
 8005460:	4b02      	ldr	r3, [pc, #8]	; (800546c <malloc+0xc>)
 8005462:	4601      	mov	r1, r0
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	f000 b823 	b.w	80054b0 <_malloc_r>
 800546a:	bf00      	nop
 800546c:	20000790 	.word	0x20000790

08005470 <sbrk_aligned>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4e0e      	ldr	r6, [pc, #56]	; (80054ac <sbrk_aligned+0x3c>)
 8005474:	460c      	mov	r4, r1
 8005476:	6831      	ldr	r1, [r6, #0]
 8005478:	4605      	mov	r5, r0
 800547a:	b911      	cbnz	r1, 8005482 <sbrk_aligned+0x12>
 800547c:	f001 f8e4 	bl	8006648 <_sbrk_r>
 8005480:	6030      	str	r0, [r6, #0]
 8005482:	4621      	mov	r1, r4
 8005484:	4628      	mov	r0, r5
 8005486:	f001 f8df 	bl	8006648 <_sbrk_r>
 800548a:	1c43      	adds	r3, r0, #1
 800548c:	d00a      	beq.n	80054a4 <sbrk_aligned+0x34>
 800548e:	1cc4      	adds	r4, r0, #3
 8005490:	f024 0403 	bic.w	r4, r4, #3
 8005494:	42a0      	cmp	r0, r4
 8005496:	d007      	beq.n	80054a8 <sbrk_aligned+0x38>
 8005498:	1a21      	subs	r1, r4, r0
 800549a:	4628      	mov	r0, r5
 800549c:	f001 f8d4 	bl	8006648 <_sbrk_r>
 80054a0:	3001      	adds	r0, #1
 80054a2:	d101      	bne.n	80054a8 <sbrk_aligned+0x38>
 80054a4:	f04f 34ff 	mov.w	r4, #4294967295
 80054a8:	4620      	mov	r0, r4
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	200010a0 	.word	0x200010a0

080054b0 <_malloc_r>:
 80054b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b4:	1ccd      	adds	r5, r1, #3
 80054b6:	f025 0503 	bic.w	r5, r5, #3
 80054ba:	3508      	adds	r5, #8
 80054bc:	2d0c      	cmp	r5, #12
 80054be:	bf38      	it	cc
 80054c0:	250c      	movcc	r5, #12
 80054c2:	2d00      	cmp	r5, #0
 80054c4:	4607      	mov	r7, r0
 80054c6:	db01      	blt.n	80054cc <_malloc_r+0x1c>
 80054c8:	42a9      	cmp	r1, r5
 80054ca:	d905      	bls.n	80054d8 <_malloc_r+0x28>
 80054cc:	230c      	movs	r3, #12
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	2600      	movs	r6, #0
 80054d2:	4630      	mov	r0, r6
 80054d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055ac <_malloc_r+0xfc>
 80054dc:	f000 f868 	bl	80055b0 <__malloc_lock>
 80054e0:	f8d8 3000 	ldr.w	r3, [r8]
 80054e4:	461c      	mov	r4, r3
 80054e6:	bb5c      	cbnz	r4, 8005540 <_malloc_r+0x90>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	f7ff ffc0 	bl	8005470 <sbrk_aligned>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	4604      	mov	r4, r0
 80054f4:	d155      	bne.n	80055a2 <_malloc_r+0xf2>
 80054f6:	f8d8 4000 	ldr.w	r4, [r8]
 80054fa:	4626      	mov	r6, r4
 80054fc:	2e00      	cmp	r6, #0
 80054fe:	d145      	bne.n	800558c <_malloc_r+0xdc>
 8005500:	2c00      	cmp	r4, #0
 8005502:	d048      	beq.n	8005596 <_malloc_r+0xe6>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	4631      	mov	r1, r6
 8005508:	4638      	mov	r0, r7
 800550a:	eb04 0903 	add.w	r9, r4, r3
 800550e:	f001 f89b 	bl	8006648 <_sbrk_r>
 8005512:	4581      	cmp	r9, r0
 8005514:	d13f      	bne.n	8005596 <_malloc_r+0xe6>
 8005516:	6821      	ldr	r1, [r4, #0]
 8005518:	1a6d      	subs	r5, r5, r1
 800551a:	4629      	mov	r1, r5
 800551c:	4638      	mov	r0, r7
 800551e:	f7ff ffa7 	bl	8005470 <sbrk_aligned>
 8005522:	3001      	adds	r0, #1
 8005524:	d037      	beq.n	8005596 <_malloc_r+0xe6>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	442b      	add	r3, r5
 800552a:	6023      	str	r3, [r4, #0]
 800552c:	f8d8 3000 	ldr.w	r3, [r8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d038      	beq.n	80055a6 <_malloc_r+0xf6>
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	42a2      	cmp	r2, r4
 8005538:	d12b      	bne.n	8005592 <_malloc_r+0xe2>
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	e00f      	b.n	8005560 <_malloc_r+0xb0>
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	1b52      	subs	r2, r2, r5
 8005544:	d41f      	bmi.n	8005586 <_malloc_r+0xd6>
 8005546:	2a0b      	cmp	r2, #11
 8005548:	d917      	bls.n	800557a <_malloc_r+0xca>
 800554a:	1961      	adds	r1, r4, r5
 800554c:	42a3      	cmp	r3, r4
 800554e:	6025      	str	r5, [r4, #0]
 8005550:	bf18      	it	ne
 8005552:	6059      	strne	r1, [r3, #4]
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	bf08      	it	eq
 8005558:	f8c8 1000 	streq.w	r1, [r8]
 800555c:	5162      	str	r2, [r4, r5]
 800555e:	604b      	str	r3, [r1, #4]
 8005560:	4638      	mov	r0, r7
 8005562:	f104 060b 	add.w	r6, r4, #11
 8005566:	f000 f829 	bl	80055bc <__malloc_unlock>
 800556a:	f026 0607 	bic.w	r6, r6, #7
 800556e:	1d23      	adds	r3, r4, #4
 8005570:	1af2      	subs	r2, r6, r3
 8005572:	d0ae      	beq.n	80054d2 <_malloc_r+0x22>
 8005574:	1b9b      	subs	r3, r3, r6
 8005576:	50a3      	str	r3, [r4, r2]
 8005578:	e7ab      	b.n	80054d2 <_malloc_r+0x22>
 800557a:	42a3      	cmp	r3, r4
 800557c:	6862      	ldr	r2, [r4, #4]
 800557e:	d1dd      	bne.n	800553c <_malloc_r+0x8c>
 8005580:	f8c8 2000 	str.w	r2, [r8]
 8005584:	e7ec      	b.n	8005560 <_malloc_r+0xb0>
 8005586:	4623      	mov	r3, r4
 8005588:	6864      	ldr	r4, [r4, #4]
 800558a:	e7ac      	b.n	80054e6 <_malloc_r+0x36>
 800558c:	4634      	mov	r4, r6
 800558e:	6876      	ldr	r6, [r6, #4]
 8005590:	e7b4      	b.n	80054fc <_malloc_r+0x4c>
 8005592:	4613      	mov	r3, r2
 8005594:	e7cc      	b.n	8005530 <_malloc_r+0x80>
 8005596:	230c      	movs	r3, #12
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	4638      	mov	r0, r7
 800559c:	f000 f80e 	bl	80055bc <__malloc_unlock>
 80055a0:	e797      	b.n	80054d2 <_malloc_r+0x22>
 80055a2:	6025      	str	r5, [r4, #0]
 80055a4:	e7dc      	b.n	8005560 <_malloc_r+0xb0>
 80055a6:	605b      	str	r3, [r3, #4]
 80055a8:	deff      	udf	#255	; 0xff
 80055aa:	bf00      	nop
 80055ac:	2000109c 	.word	0x2000109c

080055b0 <__malloc_lock>:
 80055b0:	4801      	ldr	r0, [pc, #4]	; (80055b8 <__malloc_lock+0x8>)
 80055b2:	f001 b896 	b.w	80066e2 <__retarget_lock_acquire_recursive>
 80055b6:	bf00      	nop
 80055b8:	200011e4 	.word	0x200011e4

080055bc <__malloc_unlock>:
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <__malloc_unlock+0x8>)
 80055be:	f001 b891 	b.w	80066e4 <__retarget_lock_release_recursive>
 80055c2:	bf00      	nop
 80055c4:	200011e4 	.word	0x200011e4

080055c8 <_realloc_r>:
 80055c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055cc:	4680      	mov	r8, r0
 80055ce:	4614      	mov	r4, r2
 80055d0:	460e      	mov	r6, r1
 80055d2:	b921      	cbnz	r1, 80055de <_realloc_r+0x16>
 80055d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055d8:	4611      	mov	r1, r2
 80055da:	f7ff bf69 	b.w	80054b0 <_malloc_r>
 80055de:	b92a      	cbnz	r2, 80055ec <_realloc_r+0x24>
 80055e0:	f001 ff10 	bl	8007404 <_free_r>
 80055e4:	4625      	mov	r5, r4
 80055e6:	4628      	mov	r0, r5
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ec:	f002 fc03 	bl	8007df6 <_malloc_usable_size_r>
 80055f0:	4284      	cmp	r4, r0
 80055f2:	4607      	mov	r7, r0
 80055f4:	d802      	bhi.n	80055fc <_realloc_r+0x34>
 80055f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055fa:	d812      	bhi.n	8005622 <_realloc_r+0x5a>
 80055fc:	4621      	mov	r1, r4
 80055fe:	4640      	mov	r0, r8
 8005600:	f7ff ff56 	bl	80054b0 <_malloc_r>
 8005604:	4605      	mov	r5, r0
 8005606:	2800      	cmp	r0, #0
 8005608:	d0ed      	beq.n	80055e6 <_realloc_r+0x1e>
 800560a:	42bc      	cmp	r4, r7
 800560c:	4622      	mov	r2, r4
 800560e:	4631      	mov	r1, r6
 8005610:	bf28      	it	cs
 8005612:	463a      	movcs	r2, r7
 8005614:	f001 f867 	bl	80066e6 <memcpy>
 8005618:	4631      	mov	r1, r6
 800561a:	4640      	mov	r0, r8
 800561c:	f001 fef2 	bl	8007404 <_free_r>
 8005620:	e7e1      	b.n	80055e6 <_realloc_r+0x1e>
 8005622:	4635      	mov	r5, r6
 8005624:	e7df      	b.n	80055e6 <_realloc_r+0x1e>

08005626 <__cvt>:
 8005626:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800562a:	ec55 4b10 	vmov	r4, r5, d0
 800562e:	2d00      	cmp	r5, #0
 8005630:	460e      	mov	r6, r1
 8005632:	4619      	mov	r1, r3
 8005634:	462b      	mov	r3, r5
 8005636:	bfbb      	ittet	lt
 8005638:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800563c:	461d      	movlt	r5, r3
 800563e:	2300      	movge	r3, #0
 8005640:	232d      	movlt	r3, #45	; 0x2d
 8005642:	700b      	strb	r3, [r1, #0]
 8005644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005646:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800564a:	4691      	mov	r9, r2
 800564c:	f023 0820 	bic.w	r8, r3, #32
 8005650:	bfbc      	itt	lt
 8005652:	4622      	movlt	r2, r4
 8005654:	4614      	movlt	r4, r2
 8005656:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800565a:	d005      	beq.n	8005668 <__cvt+0x42>
 800565c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005660:	d100      	bne.n	8005664 <__cvt+0x3e>
 8005662:	3601      	adds	r6, #1
 8005664:	2102      	movs	r1, #2
 8005666:	e000      	b.n	800566a <__cvt+0x44>
 8005668:	2103      	movs	r1, #3
 800566a:	ab03      	add	r3, sp, #12
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	ab02      	add	r3, sp, #8
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	ec45 4b10 	vmov	d0, r4, r5
 8005676:	4653      	mov	r3, sl
 8005678:	4632      	mov	r2, r6
 800567a:	f001 f8d1 	bl	8006820 <_dtoa_r>
 800567e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005682:	4607      	mov	r7, r0
 8005684:	d102      	bne.n	800568c <__cvt+0x66>
 8005686:	f019 0f01 	tst.w	r9, #1
 800568a:	d022      	beq.n	80056d2 <__cvt+0xac>
 800568c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005690:	eb07 0906 	add.w	r9, r7, r6
 8005694:	d110      	bne.n	80056b8 <__cvt+0x92>
 8005696:	783b      	ldrb	r3, [r7, #0]
 8005698:	2b30      	cmp	r3, #48	; 0x30
 800569a:	d10a      	bne.n	80056b2 <__cvt+0x8c>
 800569c:	2200      	movs	r2, #0
 800569e:	2300      	movs	r3, #0
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f7fb fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 80056a8:	b918      	cbnz	r0, 80056b2 <__cvt+0x8c>
 80056aa:	f1c6 0601 	rsb	r6, r6, #1
 80056ae:	f8ca 6000 	str.w	r6, [sl]
 80056b2:	f8da 3000 	ldr.w	r3, [sl]
 80056b6:	4499      	add	r9, r3
 80056b8:	2200      	movs	r2, #0
 80056ba:	2300      	movs	r3, #0
 80056bc:	4620      	mov	r0, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	f7fb fa0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80056c4:	b108      	cbz	r0, 80056ca <__cvt+0xa4>
 80056c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80056ca:	2230      	movs	r2, #48	; 0x30
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	454b      	cmp	r3, r9
 80056d0:	d307      	bcc.n	80056e2 <__cvt+0xbc>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056d6:	1bdb      	subs	r3, r3, r7
 80056d8:	4638      	mov	r0, r7
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	b004      	add	sp, #16
 80056de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	9103      	str	r1, [sp, #12]
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	e7f0      	b.n	80056cc <__cvt+0xa6>

080056ea <__exponent>:
 80056ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ec:	4603      	mov	r3, r0
 80056ee:	2900      	cmp	r1, #0
 80056f0:	bfb8      	it	lt
 80056f2:	4249      	neglt	r1, r1
 80056f4:	f803 2b02 	strb.w	r2, [r3], #2
 80056f8:	bfb4      	ite	lt
 80056fa:	222d      	movlt	r2, #45	; 0x2d
 80056fc:	222b      	movge	r2, #43	; 0x2b
 80056fe:	2909      	cmp	r1, #9
 8005700:	7042      	strb	r2, [r0, #1]
 8005702:	dd2a      	ble.n	800575a <__exponent+0x70>
 8005704:	f10d 0207 	add.w	r2, sp, #7
 8005708:	4617      	mov	r7, r2
 800570a:	260a      	movs	r6, #10
 800570c:	4694      	mov	ip, r2
 800570e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005712:	fb06 1415 	mls	r4, r6, r5, r1
 8005716:	3430      	adds	r4, #48	; 0x30
 8005718:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800571c:	460c      	mov	r4, r1
 800571e:	2c63      	cmp	r4, #99	; 0x63
 8005720:	f102 32ff 	add.w	r2, r2, #4294967295
 8005724:	4629      	mov	r1, r5
 8005726:	dcf1      	bgt.n	800570c <__exponent+0x22>
 8005728:	3130      	adds	r1, #48	; 0x30
 800572a:	f1ac 0402 	sub.w	r4, ip, #2
 800572e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005732:	1c41      	adds	r1, r0, #1
 8005734:	4622      	mov	r2, r4
 8005736:	42ba      	cmp	r2, r7
 8005738:	d30a      	bcc.n	8005750 <__exponent+0x66>
 800573a:	f10d 0209 	add.w	r2, sp, #9
 800573e:	eba2 020c 	sub.w	r2, r2, ip
 8005742:	42bc      	cmp	r4, r7
 8005744:	bf88      	it	hi
 8005746:	2200      	movhi	r2, #0
 8005748:	4413      	add	r3, r2
 800574a:	1a18      	subs	r0, r3, r0
 800574c:	b003      	add	sp, #12
 800574e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005750:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005754:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005758:	e7ed      	b.n	8005736 <__exponent+0x4c>
 800575a:	2330      	movs	r3, #48	; 0x30
 800575c:	3130      	adds	r1, #48	; 0x30
 800575e:	7083      	strb	r3, [r0, #2]
 8005760:	70c1      	strb	r1, [r0, #3]
 8005762:	1d03      	adds	r3, r0, #4
 8005764:	e7f1      	b.n	800574a <__exponent+0x60>
	...

08005768 <_printf_float>:
 8005768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576c:	ed2d 8b02 	vpush	{d8}
 8005770:	b08d      	sub	sp, #52	; 0x34
 8005772:	460c      	mov	r4, r1
 8005774:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005778:	4616      	mov	r6, r2
 800577a:	461f      	mov	r7, r3
 800577c:	4605      	mov	r5, r0
 800577e:	f000 ff2b 	bl	80065d8 <_localeconv_r>
 8005782:	f8d0 a000 	ldr.w	sl, [r0]
 8005786:	4650      	mov	r0, sl
 8005788:	f7fa fd7a 	bl	8000280 <strlen>
 800578c:	2300      	movs	r3, #0
 800578e:	930a      	str	r3, [sp, #40]	; 0x28
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	9305      	str	r3, [sp, #20]
 8005794:	f8d8 3000 	ldr.w	r3, [r8]
 8005798:	f894 b018 	ldrb.w	fp, [r4, #24]
 800579c:	3307      	adds	r3, #7
 800579e:	f023 0307 	bic.w	r3, r3, #7
 80057a2:	f103 0208 	add.w	r2, r3, #8
 80057a6:	f8c8 2000 	str.w	r2, [r8]
 80057aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057b2:	9307      	str	r3, [sp, #28]
 80057b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80057b8:	ee08 0a10 	vmov	s16, r0
 80057bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80057c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057c4:	4b9e      	ldr	r3, [pc, #632]	; (8005a40 <_printf_float+0x2d8>)
 80057c6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ca:	f7fb f9b7 	bl	8000b3c <__aeabi_dcmpun>
 80057ce:	bb88      	cbnz	r0, 8005834 <_printf_float+0xcc>
 80057d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057d4:	4b9a      	ldr	r3, [pc, #616]	; (8005a40 <_printf_float+0x2d8>)
 80057d6:	f04f 32ff 	mov.w	r2, #4294967295
 80057da:	f7fb f991 	bl	8000b00 <__aeabi_dcmple>
 80057de:	bb48      	cbnz	r0, 8005834 <_printf_float+0xcc>
 80057e0:	2200      	movs	r2, #0
 80057e2:	2300      	movs	r3, #0
 80057e4:	4640      	mov	r0, r8
 80057e6:	4649      	mov	r1, r9
 80057e8:	f7fb f980 	bl	8000aec <__aeabi_dcmplt>
 80057ec:	b110      	cbz	r0, 80057f4 <_printf_float+0x8c>
 80057ee:	232d      	movs	r3, #45	; 0x2d
 80057f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f4:	4a93      	ldr	r2, [pc, #588]	; (8005a44 <_printf_float+0x2dc>)
 80057f6:	4b94      	ldr	r3, [pc, #592]	; (8005a48 <_printf_float+0x2e0>)
 80057f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057fc:	bf94      	ite	ls
 80057fe:	4690      	movls	r8, r2
 8005800:	4698      	movhi	r8, r3
 8005802:	2303      	movs	r3, #3
 8005804:	6123      	str	r3, [r4, #16]
 8005806:	9b05      	ldr	r3, [sp, #20]
 8005808:	f023 0304 	bic.w	r3, r3, #4
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	f04f 0900 	mov.w	r9, #0
 8005812:	9700      	str	r7, [sp, #0]
 8005814:	4633      	mov	r3, r6
 8005816:	aa0b      	add	r2, sp, #44	; 0x2c
 8005818:	4621      	mov	r1, r4
 800581a:	4628      	mov	r0, r5
 800581c:	f000 f9da 	bl	8005bd4 <_printf_common>
 8005820:	3001      	adds	r0, #1
 8005822:	f040 8090 	bne.w	8005946 <_printf_float+0x1de>
 8005826:	f04f 30ff 	mov.w	r0, #4294967295
 800582a:	b00d      	add	sp, #52	; 0x34
 800582c:	ecbd 8b02 	vpop	{d8}
 8005830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	4640      	mov	r0, r8
 800583a:	4649      	mov	r1, r9
 800583c:	f7fb f97e 	bl	8000b3c <__aeabi_dcmpun>
 8005840:	b140      	cbz	r0, 8005854 <_printf_float+0xec>
 8005842:	464b      	mov	r3, r9
 8005844:	2b00      	cmp	r3, #0
 8005846:	bfbc      	itt	lt
 8005848:	232d      	movlt	r3, #45	; 0x2d
 800584a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800584e:	4a7f      	ldr	r2, [pc, #508]	; (8005a4c <_printf_float+0x2e4>)
 8005850:	4b7f      	ldr	r3, [pc, #508]	; (8005a50 <_printf_float+0x2e8>)
 8005852:	e7d1      	b.n	80057f8 <_printf_float+0x90>
 8005854:	6863      	ldr	r3, [r4, #4]
 8005856:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800585a:	9206      	str	r2, [sp, #24]
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	d13f      	bne.n	80058e0 <_printf_float+0x178>
 8005860:	2306      	movs	r3, #6
 8005862:	6063      	str	r3, [r4, #4]
 8005864:	9b05      	ldr	r3, [sp, #20]
 8005866:	6861      	ldr	r1, [r4, #4]
 8005868:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800586c:	2300      	movs	r3, #0
 800586e:	9303      	str	r3, [sp, #12]
 8005870:	ab0a      	add	r3, sp, #40	; 0x28
 8005872:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005876:	ab09      	add	r3, sp, #36	; 0x24
 8005878:	ec49 8b10 	vmov	d0, r8, r9
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	6022      	str	r2, [r4, #0]
 8005880:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005884:	4628      	mov	r0, r5
 8005886:	f7ff fece 	bl	8005626 <__cvt>
 800588a:	9b06      	ldr	r3, [sp, #24]
 800588c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800588e:	2b47      	cmp	r3, #71	; 0x47
 8005890:	4680      	mov	r8, r0
 8005892:	d108      	bne.n	80058a6 <_printf_float+0x13e>
 8005894:	1cc8      	adds	r0, r1, #3
 8005896:	db02      	blt.n	800589e <_printf_float+0x136>
 8005898:	6863      	ldr	r3, [r4, #4]
 800589a:	4299      	cmp	r1, r3
 800589c:	dd41      	ble.n	8005922 <_printf_float+0x1ba>
 800589e:	f1ab 0302 	sub.w	r3, fp, #2
 80058a2:	fa5f fb83 	uxtb.w	fp, r3
 80058a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058aa:	d820      	bhi.n	80058ee <_printf_float+0x186>
 80058ac:	3901      	subs	r1, #1
 80058ae:	465a      	mov	r2, fp
 80058b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058b4:	9109      	str	r1, [sp, #36]	; 0x24
 80058b6:	f7ff ff18 	bl	80056ea <__exponent>
 80058ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058bc:	1813      	adds	r3, r2, r0
 80058be:	2a01      	cmp	r2, #1
 80058c0:	4681      	mov	r9, r0
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	dc02      	bgt.n	80058cc <_printf_float+0x164>
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	07d2      	lsls	r2, r2, #31
 80058ca:	d501      	bpl.n	80058d0 <_printf_float+0x168>
 80058cc:	3301      	adds	r3, #1
 80058ce:	6123      	str	r3, [r4, #16]
 80058d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d09c      	beq.n	8005812 <_printf_float+0xaa>
 80058d8:	232d      	movs	r3, #45	; 0x2d
 80058da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058de:	e798      	b.n	8005812 <_printf_float+0xaa>
 80058e0:	9a06      	ldr	r2, [sp, #24]
 80058e2:	2a47      	cmp	r2, #71	; 0x47
 80058e4:	d1be      	bne.n	8005864 <_printf_float+0xfc>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1bc      	bne.n	8005864 <_printf_float+0xfc>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e7b9      	b.n	8005862 <_printf_float+0xfa>
 80058ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058f2:	d118      	bne.n	8005926 <_printf_float+0x1be>
 80058f4:	2900      	cmp	r1, #0
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	dd0b      	ble.n	8005912 <_printf_float+0x1aa>
 80058fa:	6121      	str	r1, [r4, #16]
 80058fc:	b913      	cbnz	r3, 8005904 <_printf_float+0x19c>
 80058fe:	6822      	ldr	r2, [r4, #0]
 8005900:	07d0      	lsls	r0, r2, #31
 8005902:	d502      	bpl.n	800590a <_printf_float+0x1a2>
 8005904:	3301      	adds	r3, #1
 8005906:	440b      	add	r3, r1
 8005908:	6123      	str	r3, [r4, #16]
 800590a:	65a1      	str	r1, [r4, #88]	; 0x58
 800590c:	f04f 0900 	mov.w	r9, #0
 8005910:	e7de      	b.n	80058d0 <_printf_float+0x168>
 8005912:	b913      	cbnz	r3, 800591a <_printf_float+0x1b2>
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	07d2      	lsls	r2, r2, #31
 8005918:	d501      	bpl.n	800591e <_printf_float+0x1b6>
 800591a:	3302      	adds	r3, #2
 800591c:	e7f4      	b.n	8005908 <_printf_float+0x1a0>
 800591e:	2301      	movs	r3, #1
 8005920:	e7f2      	b.n	8005908 <_printf_float+0x1a0>
 8005922:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005928:	4299      	cmp	r1, r3
 800592a:	db05      	blt.n	8005938 <_printf_float+0x1d0>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	6121      	str	r1, [r4, #16]
 8005930:	07d8      	lsls	r0, r3, #31
 8005932:	d5ea      	bpl.n	800590a <_printf_float+0x1a2>
 8005934:	1c4b      	adds	r3, r1, #1
 8005936:	e7e7      	b.n	8005908 <_printf_float+0x1a0>
 8005938:	2900      	cmp	r1, #0
 800593a:	bfd4      	ite	le
 800593c:	f1c1 0202 	rsble	r2, r1, #2
 8005940:	2201      	movgt	r2, #1
 8005942:	4413      	add	r3, r2
 8005944:	e7e0      	b.n	8005908 <_printf_float+0x1a0>
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	055a      	lsls	r2, r3, #21
 800594a:	d407      	bmi.n	800595c <_printf_float+0x1f4>
 800594c:	6923      	ldr	r3, [r4, #16]
 800594e:	4642      	mov	r2, r8
 8005950:	4631      	mov	r1, r6
 8005952:	4628      	mov	r0, r5
 8005954:	47b8      	blx	r7
 8005956:	3001      	adds	r0, #1
 8005958:	d12c      	bne.n	80059b4 <_printf_float+0x24c>
 800595a:	e764      	b.n	8005826 <_printf_float+0xbe>
 800595c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005960:	f240 80e0 	bls.w	8005b24 <_printf_float+0x3bc>
 8005964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005968:	2200      	movs	r2, #0
 800596a:	2300      	movs	r3, #0
 800596c:	f7fb f8b4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005970:	2800      	cmp	r0, #0
 8005972:	d034      	beq.n	80059de <_printf_float+0x276>
 8005974:	4a37      	ldr	r2, [pc, #220]	; (8005a54 <_printf_float+0x2ec>)
 8005976:	2301      	movs	r3, #1
 8005978:	4631      	mov	r1, r6
 800597a:	4628      	mov	r0, r5
 800597c:	47b8      	blx	r7
 800597e:	3001      	adds	r0, #1
 8005980:	f43f af51 	beq.w	8005826 <_printf_float+0xbe>
 8005984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005988:	429a      	cmp	r2, r3
 800598a:	db02      	blt.n	8005992 <_printf_float+0x22a>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	07d8      	lsls	r0, r3, #31
 8005990:	d510      	bpl.n	80059b4 <_printf_float+0x24c>
 8005992:	ee18 3a10 	vmov	r3, s16
 8005996:	4652      	mov	r2, sl
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	f43f af41 	beq.w	8005826 <_printf_float+0xbe>
 80059a4:	f04f 0800 	mov.w	r8, #0
 80059a8:	f104 091a 	add.w	r9, r4, #26
 80059ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ae:	3b01      	subs	r3, #1
 80059b0:	4543      	cmp	r3, r8
 80059b2:	dc09      	bgt.n	80059c8 <_printf_float+0x260>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	079b      	lsls	r3, r3, #30
 80059b8:	f100 8107 	bmi.w	8005bca <_printf_float+0x462>
 80059bc:	68e0      	ldr	r0, [r4, #12]
 80059be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059c0:	4298      	cmp	r0, r3
 80059c2:	bfb8      	it	lt
 80059c4:	4618      	movlt	r0, r3
 80059c6:	e730      	b.n	800582a <_printf_float+0xc2>
 80059c8:	2301      	movs	r3, #1
 80059ca:	464a      	mov	r2, r9
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f af27 	beq.w	8005826 <_printf_float+0xbe>
 80059d8:	f108 0801 	add.w	r8, r8, #1
 80059dc:	e7e6      	b.n	80059ac <_printf_float+0x244>
 80059de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dc39      	bgt.n	8005a58 <_printf_float+0x2f0>
 80059e4:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <_printf_float+0x2ec>)
 80059e6:	2301      	movs	r3, #1
 80059e8:	4631      	mov	r1, r6
 80059ea:	4628      	mov	r0, r5
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	f43f af19 	beq.w	8005826 <_printf_float+0xbe>
 80059f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059f8:	4313      	orrs	r3, r2
 80059fa:	d102      	bne.n	8005a02 <_printf_float+0x29a>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	07d9      	lsls	r1, r3, #31
 8005a00:	d5d8      	bpl.n	80059b4 <_printf_float+0x24c>
 8005a02:	ee18 3a10 	vmov	r3, s16
 8005a06:	4652      	mov	r2, sl
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	47b8      	blx	r7
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f43f af09 	beq.w	8005826 <_printf_float+0xbe>
 8005a14:	f04f 0900 	mov.w	r9, #0
 8005a18:	f104 0a1a 	add.w	sl, r4, #26
 8005a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1e:	425b      	negs	r3, r3
 8005a20:	454b      	cmp	r3, r9
 8005a22:	dc01      	bgt.n	8005a28 <_printf_float+0x2c0>
 8005a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a26:	e792      	b.n	800594e <_printf_float+0x1e6>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	4652      	mov	r2, sl
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b8      	blx	r7
 8005a32:	3001      	adds	r0, #1
 8005a34:	f43f aef7 	beq.w	8005826 <_printf_float+0xbe>
 8005a38:	f109 0901 	add.w	r9, r9, #1
 8005a3c:	e7ee      	b.n	8005a1c <_printf_float+0x2b4>
 8005a3e:	bf00      	nop
 8005a40:	7fefffff 	.word	0x7fefffff
 8005a44:	08016610 	.word	0x08016610
 8005a48:	08016614 	.word	0x08016614
 8005a4c:	08016618 	.word	0x08016618
 8005a50:	0801661c 	.word	0x0801661c
 8005a54:	08016620 	.word	0x08016620
 8005a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	bfa8      	it	ge
 8005a60:	461a      	movge	r2, r3
 8005a62:	2a00      	cmp	r2, #0
 8005a64:	4691      	mov	r9, r2
 8005a66:	dc37      	bgt.n	8005ad8 <_printf_float+0x370>
 8005a68:	f04f 0b00 	mov.w	fp, #0
 8005a6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a70:	f104 021a 	add.w	r2, r4, #26
 8005a74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a76:	9305      	str	r3, [sp, #20]
 8005a78:	eba3 0309 	sub.w	r3, r3, r9
 8005a7c:	455b      	cmp	r3, fp
 8005a7e:	dc33      	bgt.n	8005ae8 <_printf_float+0x380>
 8005a80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a84:	429a      	cmp	r2, r3
 8005a86:	db3b      	blt.n	8005b00 <_printf_float+0x398>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	07da      	lsls	r2, r3, #31
 8005a8c:	d438      	bmi.n	8005b00 <_printf_float+0x398>
 8005a8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a92:	eba2 0903 	sub.w	r9, r2, r3
 8005a96:	9b05      	ldr	r3, [sp, #20]
 8005a98:	1ad2      	subs	r2, r2, r3
 8005a9a:	4591      	cmp	r9, r2
 8005a9c:	bfa8      	it	ge
 8005a9e:	4691      	movge	r9, r2
 8005aa0:	f1b9 0f00 	cmp.w	r9, #0
 8005aa4:	dc35      	bgt.n	8005b12 <_printf_float+0x3aa>
 8005aa6:	f04f 0800 	mov.w	r8, #0
 8005aaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aae:	f104 0a1a 	add.w	sl, r4, #26
 8005ab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	eba3 0309 	sub.w	r3, r3, r9
 8005abc:	4543      	cmp	r3, r8
 8005abe:	f77f af79 	ble.w	80059b4 <_printf_float+0x24c>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4652      	mov	r2, sl
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	f43f aeaa 	beq.w	8005826 <_printf_float+0xbe>
 8005ad2:	f108 0801 	add.w	r8, r8, #1
 8005ad6:	e7ec      	b.n	8005ab2 <_printf_float+0x34a>
 8005ad8:	4613      	mov	r3, r2
 8005ada:	4631      	mov	r1, r6
 8005adc:	4642      	mov	r2, r8
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d1c0      	bne.n	8005a68 <_printf_float+0x300>
 8005ae6:	e69e      	b.n	8005826 <_printf_float+0xbe>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4631      	mov	r1, r6
 8005aec:	4628      	mov	r0, r5
 8005aee:	9205      	str	r2, [sp, #20]
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f ae97 	beq.w	8005826 <_printf_float+0xbe>
 8005af8:	9a05      	ldr	r2, [sp, #20]
 8005afa:	f10b 0b01 	add.w	fp, fp, #1
 8005afe:	e7b9      	b.n	8005a74 <_printf_float+0x30c>
 8005b00:	ee18 3a10 	vmov	r3, s16
 8005b04:	4652      	mov	r2, sl
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d1be      	bne.n	8005a8e <_printf_float+0x326>
 8005b10:	e689      	b.n	8005826 <_printf_float+0xbe>
 8005b12:	9a05      	ldr	r2, [sp, #20]
 8005b14:	464b      	mov	r3, r9
 8005b16:	4442      	add	r2, r8
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d1c1      	bne.n	8005aa6 <_printf_float+0x33e>
 8005b22:	e680      	b.n	8005826 <_printf_float+0xbe>
 8005b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b26:	2a01      	cmp	r2, #1
 8005b28:	dc01      	bgt.n	8005b2e <_printf_float+0x3c6>
 8005b2a:	07db      	lsls	r3, r3, #31
 8005b2c:	d53a      	bpl.n	8005ba4 <_printf_float+0x43c>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4642      	mov	r2, r8
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f43f ae74 	beq.w	8005826 <_printf_float+0xbe>
 8005b3e:	ee18 3a10 	vmov	r3, s16
 8005b42:	4652      	mov	r2, sl
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b8      	blx	r7
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f43f ae6b 	beq.w	8005826 <_printf_float+0xbe>
 8005b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b54:	2200      	movs	r2, #0
 8005b56:	2300      	movs	r3, #0
 8005b58:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b5c:	f7fa ffbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b60:	b9d8      	cbnz	r0, 8005b9a <_printf_float+0x432>
 8005b62:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b66:	f108 0201 	add.w	r2, r8, #1
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b8      	blx	r7
 8005b70:	3001      	adds	r0, #1
 8005b72:	d10e      	bne.n	8005b92 <_printf_float+0x42a>
 8005b74:	e657      	b.n	8005826 <_printf_float+0xbe>
 8005b76:	2301      	movs	r3, #1
 8005b78:	4652      	mov	r2, sl
 8005b7a:	4631      	mov	r1, r6
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	47b8      	blx	r7
 8005b80:	3001      	adds	r0, #1
 8005b82:	f43f ae50 	beq.w	8005826 <_printf_float+0xbe>
 8005b86:	f108 0801 	add.w	r8, r8, #1
 8005b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	4543      	cmp	r3, r8
 8005b90:	dcf1      	bgt.n	8005b76 <_printf_float+0x40e>
 8005b92:	464b      	mov	r3, r9
 8005b94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b98:	e6da      	b.n	8005950 <_printf_float+0x1e8>
 8005b9a:	f04f 0800 	mov.w	r8, #0
 8005b9e:	f104 0a1a 	add.w	sl, r4, #26
 8005ba2:	e7f2      	b.n	8005b8a <_printf_float+0x422>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	4642      	mov	r2, r8
 8005ba8:	e7df      	b.n	8005b6a <_printf_float+0x402>
 8005baa:	2301      	movs	r3, #1
 8005bac:	464a      	mov	r2, r9
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae36 	beq.w	8005826 <_printf_float+0xbe>
 8005bba:	f108 0801 	add.w	r8, r8, #1
 8005bbe:	68e3      	ldr	r3, [r4, #12]
 8005bc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bc2:	1a5b      	subs	r3, r3, r1
 8005bc4:	4543      	cmp	r3, r8
 8005bc6:	dcf0      	bgt.n	8005baa <_printf_float+0x442>
 8005bc8:	e6f8      	b.n	80059bc <_printf_float+0x254>
 8005bca:	f04f 0800 	mov.w	r8, #0
 8005bce:	f104 0919 	add.w	r9, r4, #25
 8005bd2:	e7f4      	b.n	8005bbe <_printf_float+0x456>

08005bd4 <_printf_common>:
 8005bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd8:	4616      	mov	r6, r2
 8005bda:	4699      	mov	r9, r3
 8005bdc:	688a      	ldr	r2, [r1, #8]
 8005bde:	690b      	ldr	r3, [r1, #16]
 8005be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005be4:	4293      	cmp	r3, r2
 8005be6:	bfb8      	it	lt
 8005be8:	4613      	movlt	r3, r2
 8005bea:	6033      	str	r3, [r6, #0]
 8005bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bf0:	4607      	mov	r7, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	b10a      	cbz	r2, 8005bfa <_printf_common+0x26>
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	6033      	str	r3, [r6, #0]
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	0699      	lsls	r1, r3, #26
 8005bfe:	bf42      	ittt	mi
 8005c00:	6833      	ldrmi	r3, [r6, #0]
 8005c02:	3302      	addmi	r3, #2
 8005c04:	6033      	strmi	r3, [r6, #0]
 8005c06:	6825      	ldr	r5, [r4, #0]
 8005c08:	f015 0506 	ands.w	r5, r5, #6
 8005c0c:	d106      	bne.n	8005c1c <_printf_common+0x48>
 8005c0e:	f104 0a19 	add.w	sl, r4, #25
 8005c12:	68e3      	ldr	r3, [r4, #12]
 8005c14:	6832      	ldr	r2, [r6, #0]
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	dc26      	bgt.n	8005c6a <_printf_common+0x96>
 8005c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c20:	1e13      	subs	r3, r2, #0
 8005c22:	6822      	ldr	r2, [r4, #0]
 8005c24:	bf18      	it	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	0692      	lsls	r2, r2, #26
 8005c2a:	d42b      	bmi.n	8005c84 <_printf_common+0xb0>
 8005c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c30:	4649      	mov	r1, r9
 8005c32:	4638      	mov	r0, r7
 8005c34:	47c0      	blx	r8
 8005c36:	3001      	adds	r0, #1
 8005c38:	d01e      	beq.n	8005c78 <_printf_common+0xa4>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	6922      	ldr	r2, [r4, #16]
 8005c3e:	f003 0306 	and.w	r3, r3, #6
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	bf02      	ittt	eq
 8005c46:	68e5      	ldreq	r5, [r4, #12]
 8005c48:	6833      	ldreq	r3, [r6, #0]
 8005c4a:	1aed      	subeq	r5, r5, r3
 8005c4c:	68a3      	ldr	r3, [r4, #8]
 8005c4e:	bf0c      	ite	eq
 8005c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c54:	2500      	movne	r5, #0
 8005c56:	4293      	cmp	r3, r2
 8005c58:	bfc4      	itt	gt
 8005c5a:	1a9b      	subgt	r3, r3, r2
 8005c5c:	18ed      	addgt	r5, r5, r3
 8005c5e:	2600      	movs	r6, #0
 8005c60:	341a      	adds	r4, #26
 8005c62:	42b5      	cmp	r5, r6
 8005c64:	d11a      	bne.n	8005c9c <_printf_common+0xc8>
 8005c66:	2000      	movs	r0, #0
 8005c68:	e008      	b.n	8005c7c <_printf_common+0xa8>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	4652      	mov	r2, sl
 8005c6e:	4649      	mov	r1, r9
 8005c70:	4638      	mov	r0, r7
 8005c72:	47c0      	blx	r8
 8005c74:	3001      	adds	r0, #1
 8005c76:	d103      	bne.n	8005c80 <_printf_common+0xac>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c80:	3501      	adds	r5, #1
 8005c82:	e7c6      	b.n	8005c12 <_printf_common+0x3e>
 8005c84:	18e1      	adds	r1, r4, r3
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	2030      	movs	r0, #48	; 0x30
 8005c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c8e:	4422      	add	r2, r4
 8005c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c98:	3302      	adds	r3, #2
 8005c9a:	e7c7      	b.n	8005c2c <_printf_common+0x58>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	47c0      	blx	r8
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d0e6      	beq.n	8005c78 <_printf_common+0xa4>
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7d9      	b.n	8005c62 <_printf_common+0x8e>
	...

08005cb0 <_printf_i>:
 8005cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb4:	7e0f      	ldrb	r7, [r1, #24]
 8005cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb8:	2f78      	cmp	r7, #120	; 0x78
 8005cba:	4691      	mov	r9, r2
 8005cbc:	4680      	mov	r8, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	469a      	mov	sl, r3
 8005cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cc6:	d807      	bhi.n	8005cd8 <_printf_i+0x28>
 8005cc8:	2f62      	cmp	r7, #98	; 0x62
 8005cca:	d80a      	bhi.n	8005ce2 <_printf_i+0x32>
 8005ccc:	2f00      	cmp	r7, #0
 8005cce:	f000 80d4 	beq.w	8005e7a <_printf_i+0x1ca>
 8005cd2:	2f58      	cmp	r7, #88	; 0x58
 8005cd4:	f000 80c0 	beq.w	8005e58 <_printf_i+0x1a8>
 8005cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ce0:	e03a      	b.n	8005d58 <_printf_i+0xa8>
 8005ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ce6:	2b15      	cmp	r3, #21
 8005ce8:	d8f6      	bhi.n	8005cd8 <_printf_i+0x28>
 8005cea:	a101      	add	r1, pc, #4	; (adr r1, 8005cf0 <_printf_i+0x40>)
 8005cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cf0:	08005d49 	.word	0x08005d49
 8005cf4:	08005d5d 	.word	0x08005d5d
 8005cf8:	08005cd9 	.word	0x08005cd9
 8005cfc:	08005cd9 	.word	0x08005cd9
 8005d00:	08005cd9 	.word	0x08005cd9
 8005d04:	08005cd9 	.word	0x08005cd9
 8005d08:	08005d5d 	.word	0x08005d5d
 8005d0c:	08005cd9 	.word	0x08005cd9
 8005d10:	08005cd9 	.word	0x08005cd9
 8005d14:	08005cd9 	.word	0x08005cd9
 8005d18:	08005cd9 	.word	0x08005cd9
 8005d1c:	08005e61 	.word	0x08005e61
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005e1b 	.word	0x08005e1b
 8005d28:	08005cd9 	.word	0x08005cd9
 8005d2c:	08005cd9 	.word	0x08005cd9
 8005d30:	08005e83 	.word	0x08005e83
 8005d34:	08005cd9 	.word	0x08005cd9
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005cd9 	.word	0x08005cd9
 8005d40:	08005cd9 	.word	0x08005cd9
 8005d44:	08005e23 	.word	0x08005e23
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	1d1a      	adds	r2, r3, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	602a      	str	r2, [r5, #0]
 8005d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e09f      	b.n	8005e9c <_printf_i+0x1ec>
 8005d5c:	6820      	ldr	r0, [r4, #0]
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	0607      	lsls	r7, r0, #24
 8005d62:	f103 0104 	add.w	r1, r3, #4
 8005d66:	6029      	str	r1, [r5, #0]
 8005d68:	d501      	bpl.n	8005d6e <_printf_i+0xbe>
 8005d6a:	681e      	ldr	r6, [r3, #0]
 8005d6c:	e003      	b.n	8005d76 <_printf_i+0xc6>
 8005d6e:	0646      	lsls	r6, r0, #25
 8005d70:	d5fb      	bpl.n	8005d6a <_printf_i+0xba>
 8005d72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	da03      	bge.n	8005d82 <_printf_i+0xd2>
 8005d7a:	232d      	movs	r3, #45	; 0x2d
 8005d7c:	4276      	negs	r6, r6
 8005d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d82:	485a      	ldr	r0, [pc, #360]	; (8005eec <_printf_i+0x23c>)
 8005d84:	230a      	movs	r3, #10
 8005d86:	e012      	b.n	8005dae <_printf_i+0xfe>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	6820      	ldr	r0, [r4, #0]
 8005d8c:	1d19      	adds	r1, r3, #4
 8005d8e:	6029      	str	r1, [r5, #0]
 8005d90:	0605      	lsls	r5, r0, #24
 8005d92:	d501      	bpl.n	8005d98 <_printf_i+0xe8>
 8005d94:	681e      	ldr	r6, [r3, #0]
 8005d96:	e002      	b.n	8005d9e <_printf_i+0xee>
 8005d98:	0641      	lsls	r1, r0, #25
 8005d9a:	d5fb      	bpl.n	8005d94 <_printf_i+0xe4>
 8005d9c:	881e      	ldrh	r6, [r3, #0]
 8005d9e:	4853      	ldr	r0, [pc, #332]	; (8005eec <_printf_i+0x23c>)
 8005da0:	2f6f      	cmp	r7, #111	; 0x6f
 8005da2:	bf0c      	ite	eq
 8005da4:	2308      	moveq	r3, #8
 8005da6:	230a      	movne	r3, #10
 8005da8:	2100      	movs	r1, #0
 8005daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dae:	6865      	ldr	r5, [r4, #4]
 8005db0:	60a5      	str	r5, [r4, #8]
 8005db2:	2d00      	cmp	r5, #0
 8005db4:	bfa2      	ittt	ge
 8005db6:	6821      	ldrge	r1, [r4, #0]
 8005db8:	f021 0104 	bicge.w	r1, r1, #4
 8005dbc:	6021      	strge	r1, [r4, #0]
 8005dbe:	b90e      	cbnz	r6, 8005dc4 <_printf_i+0x114>
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	d04b      	beq.n	8005e5c <_printf_i+0x1ac>
 8005dc4:	4615      	mov	r5, r2
 8005dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dca:	fb03 6711 	mls	r7, r3, r1, r6
 8005dce:	5dc7      	ldrb	r7, [r0, r7]
 8005dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dd4:	4637      	mov	r7, r6
 8005dd6:	42bb      	cmp	r3, r7
 8005dd8:	460e      	mov	r6, r1
 8005dda:	d9f4      	bls.n	8005dc6 <_printf_i+0x116>
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d10b      	bne.n	8005df8 <_printf_i+0x148>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	07de      	lsls	r6, r3, #31
 8005de4:	d508      	bpl.n	8005df8 <_printf_i+0x148>
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	6861      	ldr	r1, [r4, #4]
 8005dea:	4299      	cmp	r1, r3
 8005dec:	bfde      	ittt	le
 8005dee:	2330      	movle	r3, #48	; 0x30
 8005df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005df8:	1b52      	subs	r2, r2, r5
 8005dfa:	6122      	str	r2, [r4, #16]
 8005dfc:	f8cd a000 	str.w	sl, [sp]
 8005e00:	464b      	mov	r3, r9
 8005e02:	aa03      	add	r2, sp, #12
 8005e04:	4621      	mov	r1, r4
 8005e06:	4640      	mov	r0, r8
 8005e08:	f7ff fee4 	bl	8005bd4 <_printf_common>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d14a      	bne.n	8005ea6 <_printf_i+0x1f6>
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	b004      	add	sp, #16
 8005e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	f043 0320 	orr.w	r3, r3, #32
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	4833      	ldr	r0, [pc, #204]	; (8005ef0 <_printf_i+0x240>)
 8005e24:	2778      	movs	r7, #120	; 0x78
 8005e26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	6829      	ldr	r1, [r5, #0]
 8005e2e:	061f      	lsls	r7, r3, #24
 8005e30:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e34:	d402      	bmi.n	8005e3c <_printf_i+0x18c>
 8005e36:	065f      	lsls	r7, r3, #25
 8005e38:	bf48      	it	mi
 8005e3a:	b2b6      	uxthmi	r6, r6
 8005e3c:	07df      	lsls	r7, r3, #31
 8005e3e:	bf48      	it	mi
 8005e40:	f043 0320 	orrmi.w	r3, r3, #32
 8005e44:	6029      	str	r1, [r5, #0]
 8005e46:	bf48      	it	mi
 8005e48:	6023      	strmi	r3, [r4, #0]
 8005e4a:	b91e      	cbnz	r6, 8005e54 <_printf_i+0x1a4>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	f023 0320 	bic.w	r3, r3, #32
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	2310      	movs	r3, #16
 8005e56:	e7a7      	b.n	8005da8 <_printf_i+0xf8>
 8005e58:	4824      	ldr	r0, [pc, #144]	; (8005eec <_printf_i+0x23c>)
 8005e5a:	e7e4      	b.n	8005e26 <_printf_i+0x176>
 8005e5c:	4615      	mov	r5, r2
 8005e5e:	e7bd      	b.n	8005ddc <_printf_i+0x12c>
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	6826      	ldr	r6, [r4, #0]
 8005e64:	6961      	ldr	r1, [r4, #20]
 8005e66:	1d18      	adds	r0, r3, #4
 8005e68:	6028      	str	r0, [r5, #0]
 8005e6a:	0635      	lsls	r5, r6, #24
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	d501      	bpl.n	8005e74 <_printf_i+0x1c4>
 8005e70:	6019      	str	r1, [r3, #0]
 8005e72:	e002      	b.n	8005e7a <_printf_i+0x1ca>
 8005e74:	0670      	lsls	r0, r6, #25
 8005e76:	d5fb      	bpl.n	8005e70 <_printf_i+0x1c0>
 8005e78:	8019      	strh	r1, [r3, #0]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6123      	str	r3, [r4, #16]
 8005e7e:	4615      	mov	r5, r2
 8005e80:	e7bc      	b.n	8005dfc <_printf_i+0x14c>
 8005e82:	682b      	ldr	r3, [r5, #0]
 8005e84:	1d1a      	adds	r2, r3, #4
 8005e86:	602a      	str	r2, [r5, #0]
 8005e88:	681d      	ldr	r5, [r3, #0]
 8005e8a:	6862      	ldr	r2, [r4, #4]
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f7fa f9a6 	bl	80001e0 <memchr>
 8005e94:	b108      	cbz	r0, 8005e9a <_printf_i+0x1ea>
 8005e96:	1b40      	subs	r0, r0, r5
 8005e98:	6060      	str	r0, [r4, #4]
 8005e9a:	6863      	ldr	r3, [r4, #4]
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea4:	e7aa      	b.n	8005dfc <_printf_i+0x14c>
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	462a      	mov	r2, r5
 8005eaa:	4649      	mov	r1, r9
 8005eac:	4640      	mov	r0, r8
 8005eae:	47d0      	blx	sl
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d0ad      	beq.n	8005e10 <_printf_i+0x160>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	079b      	lsls	r3, r3, #30
 8005eb8:	d413      	bmi.n	8005ee2 <_printf_i+0x232>
 8005eba:	68e0      	ldr	r0, [r4, #12]
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	4298      	cmp	r0, r3
 8005ec0:	bfb8      	it	lt
 8005ec2:	4618      	movlt	r0, r3
 8005ec4:	e7a6      	b.n	8005e14 <_printf_i+0x164>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4632      	mov	r2, r6
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4640      	mov	r0, r8
 8005ece:	47d0      	blx	sl
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d09d      	beq.n	8005e10 <_printf_i+0x160>
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	9903      	ldr	r1, [sp, #12]
 8005eda:	1a5b      	subs	r3, r3, r1
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dcf2      	bgt.n	8005ec6 <_printf_i+0x216>
 8005ee0:	e7eb      	b.n	8005eba <_printf_i+0x20a>
 8005ee2:	2500      	movs	r5, #0
 8005ee4:	f104 0619 	add.w	r6, r4, #25
 8005ee8:	e7f5      	b.n	8005ed6 <_printf_i+0x226>
 8005eea:	bf00      	nop
 8005eec:	08016622 	.word	0x08016622
 8005ef0:	08016633 	.word	0x08016633

08005ef4 <_scanf_float>:
 8005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	b087      	sub	sp, #28
 8005efa:	4617      	mov	r7, r2
 8005efc:	9303      	str	r3, [sp, #12]
 8005efe:	688b      	ldr	r3, [r1, #8]
 8005f00:	1e5a      	subs	r2, r3, #1
 8005f02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f06:	bf83      	ittte	hi
 8005f08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f0c:	195b      	addhi	r3, r3, r5
 8005f0e:	9302      	strhi	r3, [sp, #8]
 8005f10:	2300      	movls	r3, #0
 8005f12:	bf86      	itte	hi
 8005f14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f18:	608b      	strhi	r3, [r1, #8]
 8005f1a:	9302      	strls	r3, [sp, #8]
 8005f1c:	680b      	ldr	r3, [r1, #0]
 8005f1e:	468b      	mov	fp, r1
 8005f20:	2500      	movs	r5, #0
 8005f22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f26:	f84b 3b1c 	str.w	r3, [fp], #28
 8005f2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f2e:	4680      	mov	r8, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	465e      	mov	r6, fp
 8005f34:	46aa      	mov	sl, r5
 8005f36:	46a9      	mov	r9, r5
 8005f38:	9501      	str	r5, [sp, #4]
 8005f3a:	68a2      	ldr	r2, [r4, #8]
 8005f3c:	b152      	cbz	r2, 8005f54 <_scanf_float+0x60>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b4e      	cmp	r3, #78	; 0x4e
 8005f44:	d864      	bhi.n	8006010 <_scanf_float+0x11c>
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d83c      	bhi.n	8005fc4 <_scanf_float+0xd0>
 8005f4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005f4e:	b2c8      	uxtb	r0, r1
 8005f50:	280e      	cmp	r0, #14
 8005f52:	d93a      	bls.n	8005fca <_scanf_float+0xd6>
 8005f54:	f1b9 0f00 	cmp.w	r9, #0
 8005f58:	d003      	beq.n	8005f62 <_scanf_float+0x6e>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f66:	f1ba 0f01 	cmp.w	sl, #1
 8005f6a:	f200 8113 	bhi.w	8006194 <_scanf_float+0x2a0>
 8005f6e:	455e      	cmp	r6, fp
 8005f70:	f200 8105 	bhi.w	800617e <_scanf_float+0x28a>
 8005f74:	2501      	movs	r5, #1
 8005f76:	4628      	mov	r0, r5
 8005f78:	b007      	add	sp, #28
 8005f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005f82:	2a0d      	cmp	r2, #13
 8005f84:	d8e6      	bhi.n	8005f54 <_scanf_float+0x60>
 8005f86:	a101      	add	r1, pc, #4	; (adr r1, 8005f8c <_scanf_float+0x98>)
 8005f88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f8c:	080060cb 	.word	0x080060cb
 8005f90:	08005f55 	.word	0x08005f55
 8005f94:	08005f55 	.word	0x08005f55
 8005f98:	08005f55 	.word	0x08005f55
 8005f9c:	0800612b 	.word	0x0800612b
 8005fa0:	08006103 	.word	0x08006103
 8005fa4:	08005f55 	.word	0x08005f55
 8005fa8:	08005f55 	.word	0x08005f55
 8005fac:	080060d9 	.word	0x080060d9
 8005fb0:	08005f55 	.word	0x08005f55
 8005fb4:	08005f55 	.word	0x08005f55
 8005fb8:	08005f55 	.word	0x08005f55
 8005fbc:	08005f55 	.word	0x08005f55
 8005fc0:	08006091 	.word	0x08006091
 8005fc4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005fc8:	e7db      	b.n	8005f82 <_scanf_float+0x8e>
 8005fca:	290e      	cmp	r1, #14
 8005fcc:	d8c2      	bhi.n	8005f54 <_scanf_float+0x60>
 8005fce:	a001      	add	r0, pc, #4	; (adr r0, 8005fd4 <_scanf_float+0xe0>)
 8005fd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005fd4:	08006083 	.word	0x08006083
 8005fd8:	08005f55 	.word	0x08005f55
 8005fdc:	08006083 	.word	0x08006083
 8005fe0:	08006117 	.word	0x08006117
 8005fe4:	08005f55 	.word	0x08005f55
 8005fe8:	08006031 	.word	0x08006031
 8005fec:	0800606d 	.word	0x0800606d
 8005ff0:	0800606d 	.word	0x0800606d
 8005ff4:	0800606d 	.word	0x0800606d
 8005ff8:	0800606d 	.word	0x0800606d
 8005ffc:	0800606d 	.word	0x0800606d
 8006000:	0800606d 	.word	0x0800606d
 8006004:	0800606d 	.word	0x0800606d
 8006008:	0800606d 	.word	0x0800606d
 800600c:	0800606d 	.word	0x0800606d
 8006010:	2b6e      	cmp	r3, #110	; 0x6e
 8006012:	d809      	bhi.n	8006028 <_scanf_float+0x134>
 8006014:	2b60      	cmp	r3, #96	; 0x60
 8006016:	d8b2      	bhi.n	8005f7e <_scanf_float+0x8a>
 8006018:	2b54      	cmp	r3, #84	; 0x54
 800601a:	d077      	beq.n	800610c <_scanf_float+0x218>
 800601c:	2b59      	cmp	r3, #89	; 0x59
 800601e:	d199      	bne.n	8005f54 <_scanf_float+0x60>
 8006020:	2d07      	cmp	r5, #7
 8006022:	d197      	bne.n	8005f54 <_scanf_float+0x60>
 8006024:	2508      	movs	r5, #8
 8006026:	e029      	b.n	800607c <_scanf_float+0x188>
 8006028:	2b74      	cmp	r3, #116	; 0x74
 800602a:	d06f      	beq.n	800610c <_scanf_float+0x218>
 800602c:	2b79      	cmp	r3, #121	; 0x79
 800602e:	e7f6      	b.n	800601e <_scanf_float+0x12a>
 8006030:	6821      	ldr	r1, [r4, #0]
 8006032:	05c8      	lsls	r0, r1, #23
 8006034:	d51a      	bpl.n	800606c <_scanf_float+0x178>
 8006036:	9b02      	ldr	r3, [sp, #8]
 8006038:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800603c:	6021      	str	r1, [r4, #0]
 800603e:	f109 0901 	add.w	r9, r9, #1
 8006042:	b11b      	cbz	r3, 800604c <_scanf_float+0x158>
 8006044:	3b01      	subs	r3, #1
 8006046:	3201      	adds	r2, #1
 8006048:	9302      	str	r3, [sp, #8]
 800604a:	60a2      	str	r2, [r4, #8]
 800604c:	68a3      	ldr	r3, [r4, #8]
 800604e:	3b01      	subs	r3, #1
 8006050:	60a3      	str	r3, [r4, #8]
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	3301      	adds	r3, #1
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3b01      	subs	r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	f340 8084 	ble.w	800616c <_scanf_float+0x278>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	3301      	adds	r3, #1
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	e766      	b.n	8005f3a <_scanf_float+0x46>
 800606c:	eb1a 0f05 	cmn.w	sl, r5
 8006070:	f47f af70 	bne.w	8005f54 <_scanf_float+0x60>
 8006074:	6822      	ldr	r2, [r4, #0]
 8006076:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800607a:	6022      	str	r2, [r4, #0]
 800607c:	f806 3b01 	strb.w	r3, [r6], #1
 8006080:	e7e4      	b.n	800604c <_scanf_float+0x158>
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	0610      	lsls	r0, r2, #24
 8006086:	f57f af65 	bpl.w	8005f54 <_scanf_float+0x60>
 800608a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800608e:	e7f4      	b.n	800607a <_scanf_float+0x186>
 8006090:	f1ba 0f00 	cmp.w	sl, #0
 8006094:	d10e      	bne.n	80060b4 <_scanf_float+0x1c0>
 8006096:	f1b9 0f00 	cmp.w	r9, #0
 800609a:	d10e      	bne.n	80060ba <_scanf_float+0x1c6>
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060a6:	d108      	bne.n	80060ba <_scanf_float+0x1c6>
 80060a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060ac:	6022      	str	r2, [r4, #0]
 80060ae:	f04f 0a01 	mov.w	sl, #1
 80060b2:	e7e3      	b.n	800607c <_scanf_float+0x188>
 80060b4:	f1ba 0f02 	cmp.w	sl, #2
 80060b8:	d055      	beq.n	8006166 <_scanf_float+0x272>
 80060ba:	2d01      	cmp	r5, #1
 80060bc:	d002      	beq.n	80060c4 <_scanf_float+0x1d0>
 80060be:	2d04      	cmp	r5, #4
 80060c0:	f47f af48 	bne.w	8005f54 <_scanf_float+0x60>
 80060c4:	3501      	adds	r5, #1
 80060c6:	b2ed      	uxtb	r5, r5
 80060c8:	e7d8      	b.n	800607c <_scanf_float+0x188>
 80060ca:	f1ba 0f01 	cmp.w	sl, #1
 80060ce:	f47f af41 	bne.w	8005f54 <_scanf_float+0x60>
 80060d2:	f04f 0a02 	mov.w	sl, #2
 80060d6:	e7d1      	b.n	800607c <_scanf_float+0x188>
 80060d8:	b97d      	cbnz	r5, 80060fa <_scanf_float+0x206>
 80060da:	f1b9 0f00 	cmp.w	r9, #0
 80060de:	f47f af3c 	bne.w	8005f5a <_scanf_float+0x66>
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060ec:	f47f af39 	bne.w	8005f62 <_scanf_float+0x6e>
 80060f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060f4:	6022      	str	r2, [r4, #0]
 80060f6:	2501      	movs	r5, #1
 80060f8:	e7c0      	b.n	800607c <_scanf_float+0x188>
 80060fa:	2d03      	cmp	r5, #3
 80060fc:	d0e2      	beq.n	80060c4 <_scanf_float+0x1d0>
 80060fe:	2d05      	cmp	r5, #5
 8006100:	e7de      	b.n	80060c0 <_scanf_float+0x1cc>
 8006102:	2d02      	cmp	r5, #2
 8006104:	f47f af26 	bne.w	8005f54 <_scanf_float+0x60>
 8006108:	2503      	movs	r5, #3
 800610a:	e7b7      	b.n	800607c <_scanf_float+0x188>
 800610c:	2d06      	cmp	r5, #6
 800610e:	f47f af21 	bne.w	8005f54 <_scanf_float+0x60>
 8006112:	2507      	movs	r5, #7
 8006114:	e7b2      	b.n	800607c <_scanf_float+0x188>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	0591      	lsls	r1, r2, #22
 800611a:	f57f af1b 	bpl.w	8005f54 <_scanf_float+0x60>
 800611e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006122:	6022      	str	r2, [r4, #0]
 8006124:	f8cd 9004 	str.w	r9, [sp, #4]
 8006128:	e7a8      	b.n	800607c <_scanf_float+0x188>
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006130:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006134:	d006      	beq.n	8006144 <_scanf_float+0x250>
 8006136:	0550      	lsls	r0, r2, #21
 8006138:	f57f af0c 	bpl.w	8005f54 <_scanf_float+0x60>
 800613c:	f1b9 0f00 	cmp.w	r9, #0
 8006140:	f43f af0f 	beq.w	8005f62 <_scanf_float+0x6e>
 8006144:	0591      	lsls	r1, r2, #22
 8006146:	bf58      	it	pl
 8006148:	9901      	ldrpl	r1, [sp, #4]
 800614a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800614e:	bf58      	it	pl
 8006150:	eba9 0101 	subpl.w	r1, r9, r1
 8006154:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006158:	bf58      	it	pl
 800615a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800615e:	6022      	str	r2, [r4, #0]
 8006160:	f04f 0900 	mov.w	r9, #0
 8006164:	e78a      	b.n	800607c <_scanf_float+0x188>
 8006166:	f04f 0a03 	mov.w	sl, #3
 800616a:	e787      	b.n	800607c <_scanf_float+0x188>
 800616c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006170:	4639      	mov	r1, r7
 8006172:	4640      	mov	r0, r8
 8006174:	4798      	blx	r3
 8006176:	2800      	cmp	r0, #0
 8006178:	f43f aedf 	beq.w	8005f3a <_scanf_float+0x46>
 800617c:	e6ea      	b.n	8005f54 <_scanf_float+0x60>
 800617e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006182:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006186:	463a      	mov	r2, r7
 8006188:	4640      	mov	r0, r8
 800618a:	4798      	blx	r3
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	3b01      	subs	r3, #1
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	e6ec      	b.n	8005f6e <_scanf_float+0x7a>
 8006194:	1e6b      	subs	r3, r5, #1
 8006196:	2b06      	cmp	r3, #6
 8006198:	d825      	bhi.n	80061e6 <_scanf_float+0x2f2>
 800619a:	2d02      	cmp	r5, #2
 800619c:	d836      	bhi.n	800620c <_scanf_float+0x318>
 800619e:	455e      	cmp	r6, fp
 80061a0:	f67f aee8 	bls.w	8005f74 <_scanf_float+0x80>
 80061a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061ac:	463a      	mov	r2, r7
 80061ae:	4640      	mov	r0, r8
 80061b0:	4798      	blx	r3
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	e7f1      	b.n	800619e <_scanf_float+0x2aa>
 80061ba:	9802      	ldr	r0, [sp, #8]
 80061bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80061c4:	9002      	str	r0, [sp, #8]
 80061c6:	463a      	mov	r2, r7
 80061c8:	4640      	mov	r0, r8
 80061ca:	4798      	blx	r3
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	6123      	str	r3, [r4, #16]
 80061d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061d6:	fa5f fa8a 	uxtb.w	sl, sl
 80061da:	f1ba 0f02 	cmp.w	sl, #2
 80061de:	d1ec      	bne.n	80061ba <_scanf_float+0x2c6>
 80061e0:	3d03      	subs	r5, #3
 80061e2:	b2ed      	uxtb	r5, r5
 80061e4:	1b76      	subs	r6, r6, r5
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	05da      	lsls	r2, r3, #23
 80061ea:	d52f      	bpl.n	800624c <_scanf_float+0x358>
 80061ec:	055b      	lsls	r3, r3, #21
 80061ee:	d510      	bpl.n	8006212 <_scanf_float+0x31e>
 80061f0:	455e      	cmp	r6, fp
 80061f2:	f67f aebf 	bls.w	8005f74 <_scanf_float+0x80>
 80061f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061fe:	463a      	mov	r2, r7
 8006200:	4640      	mov	r0, r8
 8006202:	4798      	blx	r3
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	3b01      	subs	r3, #1
 8006208:	6123      	str	r3, [r4, #16]
 800620a:	e7f1      	b.n	80061f0 <_scanf_float+0x2fc>
 800620c:	46aa      	mov	sl, r5
 800620e:	9602      	str	r6, [sp, #8]
 8006210:	e7df      	b.n	80061d2 <_scanf_float+0x2de>
 8006212:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	2965      	cmp	r1, #101	; 0x65
 800621a:	f103 33ff 	add.w	r3, r3, #4294967295
 800621e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	d00c      	beq.n	8006240 <_scanf_float+0x34c>
 8006226:	2945      	cmp	r1, #69	; 0x45
 8006228:	d00a      	beq.n	8006240 <_scanf_float+0x34c>
 800622a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800622e:	463a      	mov	r2, r7
 8006230:	4640      	mov	r0, r8
 8006232:	4798      	blx	r3
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800623a:	3b01      	subs	r3, #1
 800623c:	1eb5      	subs	r5, r6, #2
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006244:	463a      	mov	r2, r7
 8006246:	4640      	mov	r0, r8
 8006248:	4798      	blx	r3
 800624a:	462e      	mov	r6, r5
 800624c:	6825      	ldr	r5, [r4, #0]
 800624e:	f015 0510 	ands.w	r5, r5, #16
 8006252:	d158      	bne.n	8006306 <_scanf_float+0x412>
 8006254:	7035      	strb	r5, [r6, #0]
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800625c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006260:	d11c      	bne.n	800629c <_scanf_float+0x3a8>
 8006262:	9b01      	ldr	r3, [sp, #4]
 8006264:	454b      	cmp	r3, r9
 8006266:	eba3 0209 	sub.w	r2, r3, r9
 800626a:	d124      	bne.n	80062b6 <_scanf_float+0x3c2>
 800626c:	2200      	movs	r2, #0
 800626e:	4659      	mov	r1, fp
 8006270:	4640      	mov	r0, r8
 8006272:	f002 fbd5 	bl	8008a20 <_strtod_r>
 8006276:	9b03      	ldr	r3, [sp, #12]
 8006278:	6821      	ldr	r1, [r4, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f011 0f02 	tst.w	r1, #2
 8006280:	ec57 6b10 	vmov	r6, r7, d0
 8006284:	f103 0204 	add.w	r2, r3, #4
 8006288:	d020      	beq.n	80062cc <_scanf_float+0x3d8>
 800628a:	9903      	ldr	r1, [sp, #12]
 800628c:	600a      	str	r2, [r1, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	e9c3 6700 	strd	r6, r7, [r3]
 8006294:	68e3      	ldr	r3, [r4, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60e3      	str	r3, [r4, #12]
 800629a:	e66c      	b.n	8005f76 <_scanf_float+0x82>
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0e4      	beq.n	800626c <_scanf_float+0x378>
 80062a2:	9905      	ldr	r1, [sp, #20]
 80062a4:	230a      	movs	r3, #10
 80062a6:	462a      	mov	r2, r5
 80062a8:	3101      	adds	r1, #1
 80062aa:	4640      	mov	r0, r8
 80062ac:	f002 fc40 	bl	8008b30 <_strtol_r>
 80062b0:	9b04      	ldr	r3, [sp, #16]
 80062b2:	9e05      	ldr	r6, [sp, #20]
 80062b4:	1ac2      	subs	r2, r0, r3
 80062b6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80062ba:	429e      	cmp	r6, r3
 80062bc:	bf28      	it	cs
 80062be:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80062c2:	4912      	ldr	r1, [pc, #72]	; (800630c <_scanf_float+0x418>)
 80062c4:	4630      	mov	r0, r6
 80062c6:	f000 f91b 	bl	8006500 <siprintf>
 80062ca:	e7cf      	b.n	800626c <_scanf_float+0x378>
 80062cc:	f011 0f04 	tst.w	r1, #4
 80062d0:	9903      	ldr	r1, [sp, #12]
 80062d2:	600a      	str	r2, [r1, #0]
 80062d4:	d1db      	bne.n	800628e <_scanf_float+0x39a>
 80062d6:	f8d3 8000 	ldr.w	r8, [r3]
 80062da:	ee10 2a10 	vmov	r2, s0
 80062de:	ee10 0a10 	vmov	r0, s0
 80062e2:	463b      	mov	r3, r7
 80062e4:	4639      	mov	r1, r7
 80062e6:	f7fa fc29 	bl	8000b3c <__aeabi_dcmpun>
 80062ea:	b128      	cbz	r0, 80062f8 <_scanf_float+0x404>
 80062ec:	4808      	ldr	r0, [pc, #32]	; (8006310 <_scanf_float+0x41c>)
 80062ee:	f000 fa09 	bl	8006704 <nanf>
 80062f2:	ed88 0a00 	vstr	s0, [r8]
 80062f6:	e7cd      	b.n	8006294 <_scanf_float+0x3a0>
 80062f8:	4630      	mov	r0, r6
 80062fa:	4639      	mov	r1, r7
 80062fc:	f7fa fc7c 	bl	8000bf8 <__aeabi_d2f>
 8006300:	f8c8 0000 	str.w	r0, [r8]
 8006304:	e7c6      	b.n	8006294 <_scanf_float+0x3a0>
 8006306:	2500      	movs	r5, #0
 8006308:	e635      	b.n	8005f76 <_scanf_float+0x82>
 800630a:	bf00      	nop
 800630c:	08016644 	.word	0x08016644
 8006310:	080169d5 	.word	0x080169d5

08006314 <std>:
 8006314:	2300      	movs	r3, #0
 8006316:	b510      	push	{r4, lr}
 8006318:	4604      	mov	r4, r0
 800631a:	e9c0 3300 	strd	r3, r3, [r0]
 800631e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006322:	6083      	str	r3, [r0, #8]
 8006324:	8181      	strh	r1, [r0, #12]
 8006326:	6643      	str	r3, [r0, #100]	; 0x64
 8006328:	81c2      	strh	r2, [r0, #14]
 800632a:	6183      	str	r3, [r0, #24]
 800632c:	4619      	mov	r1, r3
 800632e:	2208      	movs	r2, #8
 8006330:	305c      	adds	r0, #92	; 0x5c
 8006332:	f000 f948 	bl	80065c6 <memset>
 8006336:	4b0d      	ldr	r3, [pc, #52]	; (800636c <std+0x58>)
 8006338:	6263      	str	r3, [r4, #36]	; 0x24
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <std+0x5c>)
 800633c:	62a3      	str	r3, [r4, #40]	; 0x28
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <std+0x60>)
 8006340:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006342:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <std+0x64>)
 8006344:	6323      	str	r3, [r4, #48]	; 0x30
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <std+0x68>)
 8006348:	6224      	str	r4, [r4, #32]
 800634a:	429c      	cmp	r4, r3
 800634c:	d006      	beq.n	800635c <std+0x48>
 800634e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006352:	4294      	cmp	r4, r2
 8006354:	d002      	beq.n	800635c <std+0x48>
 8006356:	33d0      	adds	r3, #208	; 0xd0
 8006358:	429c      	cmp	r4, r3
 800635a:	d105      	bne.n	8006368 <std+0x54>
 800635c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006364:	f000 b9bc 	b.w	80066e0 <__retarget_lock_init_recursive>
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	08006541 	.word	0x08006541
 8006370:	08006563 	.word	0x08006563
 8006374:	0800659b 	.word	0x0800659b
 8006378:	080065bf 	.word	0x080065bf
 800637c:	200010a4 	.word	0x200010a4

08006380 <stdio_exit_handler>:
 8006380:	4a02      	ldr	r2, [pc, #8]	; (800638c <stdio_exit_handler+0xc>)
 8006382:	4903      	ldr	r1, [pc, #12]	; (8006390 <stdio_exit_handler+0x10>)
 8006384:	4803      	ldr	r0, [pc, #12]	; (8006394 <stdio_exit_handler+0x14>)
 8006386:	f000 b869 	b.w	800645c <_fwalk_sglue>
 800638a:	bf00      	nop
 800638c:	20000738 	.word	0x20000738
 8006390:	08008ef1 	.word	0x08008ef1
 8006394:	20000744 	.word	0x20000744

08006398 <cleanup_stdio>:
 8006398:	6841      	ldr	r1, [r0, #4]
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <cleanup_stdio+0x34>)
 800639c:	4299      	cmp	r1, r3
 800639e:	b510      	push	{r4, lr}
 80063a0:	4604      	mov	r4, r0
 80063a2:	d001      	beq.n	80063a8 <cleanup_stdio+0x10>
 80063a4:	f002 fda4 	bl	8008ef0 <_fflush_r>
 80063a8:	68a1      	ldr	r1, [r4, #8]
 80063aa:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <cleanup_stdio+0x38>)
 80063ac:	4299      	cmp	r1, r3
 80063ae:	d002      	beq.n	80063b6 <cleanup_stdio+0x1e>
 80063b0:	4620      	mov	r0, r4
 80063b2:	f002 fd9d 	bl	8008ef0 <_fflush_r>
 80063b6:	68e1      	ldr	r1, [r4, #12]
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <cleanup_stdio+0x3c>)
 80063ba:	4299      	cmp	r1, r3
 80063bc:	d004      	beq.n	80063c8 <cleanup_stdio+0x30>
 80063be:	4620      	mov	r0, r4
 80063c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c4:	f002 bd94 	b.w	8008ef0 <_fflush_r>
 80063c8:	bd10      	pop	{r4, pc}
 80063ca:	bf00      	nop
 80063cc:	200010a4 	.word	0x200010a4
 80063d0:	2000110c 	.word	0x2000110c
 80063d4:	20001174 	.word	0x20001174

080063d8 <global_stdio_init.part.0>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <global_stdio_init.part.0+0x30>)
 80063dc:	4c0b      	ldr	r4, [pc, #44]	; (800640c <global_stdio_init.part.0+0x34>)
 80063de:	4a0c      	ldr	r2, [pc, #48]	; (8006410 <global_stdio_init.part.0+0x38>)
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	4620      	mov	r0, r4
 80063e4:	2200      	movs	r2, #0
 80063e6:	2104      	movs	r1, #4
 80063e8:	f7ff ff94 	bl	8006314 <std>
 80063ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80063f0:	2201      	movs	r2, #1
 80063f2:	2109      	movs	r1, #9
 80063f4:	f7ff ff8e 	bl	8006314 <std>
 80063f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80063fc:	2202      	movs	r2, #2
 80063fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006402:	2112      	movs	r1, #18
 8006404:	f7ff bf86 	b.w	8006314 <std>
 8006408:	200011dc 	.word	0x200011dc
 800640c:	200010a4 	.word	0x200010a4
 8006410:	08006381 	.word	0x08006381

08006414 <__sfp_lock_acquire>:
 8006414:	4801      	ldr	r0, [pc, #4]	; (800641c <__sfp_lock_acquire+0x8>)
 8006416:	f000 b964 	b.w	80066e2 <__retarget_lock_acquire_recursive>
 800641a:	bf00      	nop
 800641c:	200011e5 	.word	0x200011e5

08006420 <__sfp_lock_release>:
 8006420:	4801      	ldr	r0, [pc, #4]	; (8006428 <__sfp_lock_release+0x8>)
 8006422:	f000 b95f 	b.w	80066e4 <__retarget_lock_release_recursive>
 8006426:	bf00      	nop
 8006428:	200011e5 	.word	0x200011e5

0800642c <__sinit>:
 800642c:	b510      	push	{r4, lr}
 800642e:	4604      	mov	r4, r0
 8006430:	f7ff fff0 	bl	8006414 <__sfp_lock_acquire>
 8006434:	6a23      	ldr	r3, [r4, #32]
 8006436:	b11b      	cbz	r3, 8006440 <__sinit+0x14>
 8006438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643c:	f7ff bff0 	b.w	8006420 <__sfp_lock_release>
 8006440:	4b04      	ldr	r3, [pc, #16]	; (8006454 <__sinit+0x28>)
 8006442:	6223      	str	r3, [r4, #32]
 8006444:	4b04      	ldr	r3, [pc, #16]	; (8006458 <__sinit+0x2c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f5      	bne.n	8006438 <__sinit+0xc>
 800644c:	f7ff ffc4 	bl	80063d8 <global_stdio_init.part.0>
 8006450:	e7f2      	b.n	8006438 <__sinit+0xc>
 8006452:	bf00      	nop
 8006454:	08006399 	.word	0x08006399
 8006458:	200011dc 	.word	0x200011dc

0800645c <_fwalk_sglue>:
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	4607      	mov	r7, r0
 8006462:	4688      	mov	r8, r1
 8006464:	4614      	mov	r4, r2
 8006466:	2600      	movs	r6, #0
 8006468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800646c:	f1b9 0901 	subs.w	r9, r9, #1
 8006470:	d505      	bpl.n	800647e <_fwalk_sglue+0x22>
 8006472:	6824      	ldr	r4, [r4, #0]
 8006474:	2c00      	cmp	r4, #0
 8006476:	d1f7      	bne.n	8006468 <_fwalk_sglue+0xc>
 8006478:	4630      	mov	r0, r6
 800647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d907      	bls.n	8006494 <_fwalk_sglue+0x38>
 8006484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006488:	3301      	adds	r3, #1
 800648a:	d003      	beq.n	8006494 <_fwalk_sglue+0x38>
 800648c:	4629      	mov	r1, r5
 800648e:	4638      	mov	r0, r7
 8006490:	47c0      	blx	r8
 8006492:	4306      	orrs	r6, r0
 8006494:	3568      	adds	r5, #104	; 0x68
 8006496:	e7e9      	b.n	800646c <_fwalk_sglue+0x10>

08006498 <sniprintf>:
 8006498:	b40c      	push	{r2, r3}
 800649a:	b530      	push	{r4, r5, lr}
 800649c:	4b17      	ldr	r3, [pc, #92]	; (80064fc <sniprintf+0x64>)
 800649e:	1e0c      	subs	r4, r1, #0
 80064a0:	681d      	ldr	r5, [r3, #0]
 80064a2:	b09d      	sub	sp, #116	; 0x74
 80064a4:	da08      	bge.n	80064b8 <sniprintf+0x20>
 80064a6:	238b      	movs	r3, #139	; 0x8b
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	f04f 30ff 	mov.w	r0, #4294967295
 80064ae:	b01d      	add	sp, #116	; 0x74
 80064b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064b4:	b002      	add	sp, #8
 80064b6:	4770      	bx	lr
 80064b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80064bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80064c0:	bf14      	ite	ne
 80064c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064c6:	4623      	moveq	r3, r4
 80064c8:	9304      	str	r3, [sp, #16]
 80064ca:	9307      	str	r3, [sp, #28]
 80064cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064d0:	9002      	str	r0, [sp, #8]
 80064d2:	9006      	str	r0, [sp, #24]
 80064d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80064da:	ab21      	add	r3, sp, #132	; 0x84
 80064dc:	a902      	add	r1, sp, #8
 80064de:	4628      	mov	r0, r5
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	f002 fb81 	bl	8008be8 <_svfiprintf_r>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	bfbc      	itt	lt
 80064ea:	238b      	movlt	r3, #139	; 0x8b
 80064ec:	602b      	strlt	r3, [r5, #0]
 80064ee:	2c00      	cmp	r4, #0
 80064f0:	d0dd      	beq.n	80064ae <sniprintf+0x16>
 80064f2:	9b02      	ldr	r3, [sp, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	e7d9      	b.n	80064ae <sniprintf+0x16>
 80064fa:	bf00      	nop
 80064fc:	20000790 	.word	0x20000790

08006500 <siprintf>:
 8006500:	b40e      	push	{r1, r2, r3}
 8006502:	b500      	push	{lr}
 8006504:	b09c      	sub	sp, #112	; 0x70
 8006506:	ab1d      	add	r3, sp, #116	; 0x74
 8006508:	9002      	str	r0, [sp, #8]
 800650a:	9006      	str	r0, [sp, #24]
 800650c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006510:	4809      	ldr	r0, [pc, #36]	; (8006538 <siprintf+0x38>)
 8006512:	9107      	str	r1, [sp, #28]
 8006514:	9104      	str	r1, [sp, #16]
 8006516:	4909      	ldr	r1, [pc, #36]	; (800653c <siprintf+0x3c>)
 8006518:	f853 2b04 	ldr.w	r2, [r3], #4
 800651c:	9105      	str	r1, [sp, #20]
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	a902      	add	r1, sp, #8
 8006524:	f002 fb60 	bl	8008be8 <_svfiprintf_r>
 8006528:	9b02      	ldr	r3, [sp, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	b01c      	add	sp, #112	; 0x70
 8006530:	f85d eb04 	ldr.w	lr, [sp], #4
 8006534:	b003      	add	sp, #12
 8006536:	4770      	bx	lr
 8006538:	20000790 	.word	0x20000790
 800653c:	ffff0208 	.word	0xffff0208

08006540 <__sread>:
 8006540:	b510      	push	{r4, lr}
 8006542:	460c      	mov	r4, r1
 8006544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006548:	f000 f86c 	bl	8006624 <_read_r>
 800654c:	2800      	cmp	r0, #0
 800654e:	bfab      	itete	ge
 8006550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006552:	89a3      	ldrhlt	r3, [r4, #12]
 8006554:	181b      	addge	r3, r3, r0
 8006556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800655a:	bfac      	ite	ge
 800655c:	6563      	strge	r3, [r4, #84]	; 0x54
 800655e:	81a3      	strhlt	r3, [r4, #12]
 8006560:	bd10      	pop	{r4, pc}

08006562 <__swrite>:
 8006562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006566:	461f      	mov	r7, r3
 8006568:	898b      	ldrh	r3, [r1, #12]
 800656a:	05db      	lsls	r3, r3, #23
 800656c:	4605      	mov	r5, r0
 800656e:	460c      	mov	r4, r1
 8006570:	4616      	mov	r6, r2
 8006572:	d505      	bpl.n	8006580 <__swrite+0x1e>
 8006574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006578:	2302      	movs	r3, #2
 800657a:	2200      	movs	r2, #0
 800657c:	f000 f840 	bl	8006600 <_lseek_r>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	4632      	mov	r2, r6
 800658e:	463b      	mov	r3, r7
 8006590:	4628      	mov	r0, r5
 8006592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006596:	f000 b867 	b.w	8006668 <_write_r>

0800659a <__sseek>:
 800659a:	b510      	push	{r4, lr}
 800659c:	460c      	mov	r4, r1
 800659e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a2:	f000 f82d 	bl	8006600 <_lseek_r>
 80065a6:	1c43      	adds	r3, r0, #1
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	bf15      	itete	ne
 80065ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065b6:	81a3      	strheq	r3, [r4, #12]
 80065b8:	bf18      	it	ne
 80065ba:	81a3      	strhne	r3, [r4, #12]
 80065bc:	bd10      	pop	{r4, pc}

080065be <__sclose>:
 80065be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c2:	f000 b80d 	b.w	80065e0 <_close_r>

080065c6 <memset>:
 80065c6:	4402      	add	r2, r0
 80065c8:	4603      	mov	r3, r0
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d100      	bne.n	80065d0 <memset+0xa>
 80065ce:	4770      	bx	lr
 80065d0:	f803 1b01 	strb.w	r1, [r3], #1
 80065d4:	e7f9      	b.n	80065ca <memset+0x4>
	...

080065d8 <_localeconv_r>:
 80065d8:	4800      	ldr	r0, [pc, #0]	; (80065dc <_localeconv_r+0x4>)
 80065da:	4770      	bx	lr
 80065dc:	20000884 	.word	0x20000884

080065e0 <_close_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4d06      	ldr	r5, [pc, #24]	; (80065fc <_close_r+0x1c>)
 80065e4:	2300      	movs	r3, #0
 80065e6:	4604      	mov	r4, r0
 80065e8:	4608      	mov	r0, r1
 80065ea:	602b      	str	r3, [r5, #0]
 80065ec:	f003 fc74 	bl	8009ed8 <_close>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	d102      	bne.n	80065fa <_close_r+0x1a>
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	b103      	cbz	r3, 80065fa <_close_r+0x1a>
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
 80065fc:	200011e0 	.word	0x200011e0

08006600 <_lseek_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4d07      	ldr	r5, [pc, #28]	; (8006620 <_lseek_r+0x20>)
 8006604:	4604      	mov	r4, r0
 8006606:	4608      	mov	r0, r1
 8006608:	4611      	mov	r1, r2
 800660a:	2200      	movs	r2, #0
 800660c:	602a      	str	r2, [r5, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	f003 fc8a 	bl	8009f28 <_lseek>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_lseek_r+0x1e>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_lseek_r+0x1e>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	200011e0 	.word	0x200011e0

08006624 <_read_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d07      	ldr	r5, [pc, #28]	; (8006644 <_read_r+0x20>)
 8006628:	4604      	mov	r4, r0
 800662a:	4608      	mov	r0, r1
 800662c:	4611      	mov	r1, r2
 800662e:	2200      	movs	r2, #0
 8006630:	602a      	str	r2, [r5, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	f003 fc80 	bl	8009f38 <_read>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_read_r+0x1e>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_read_r+0x1e>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	200011e0 	.word	0x200011e0

08006648 <_sbrk_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4d06      	ldr	r5, [pc, #24]	; (8006664 <_sbrk_r+0x1c>)
 800664c:	2300      	movs	r3, #0
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	f7fa fffc 	bl	8001650 <_sbrk>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_sbrk_r+0x1a>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_sbrk_r+0x1a>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200011e0 	.word	0x200011e0

08006668 <_write_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d07      	ldr	r5, [pc, #28]	; (8006688 <_write_r+0x20>)
 800666c:	4604      	mov	r4, r0
 800666e:	4608      	mov	r0, r1
 8006670:	4611      	mov	r1, r2
 8006672:	2200      	movs	r2, #0
 8006674:	602a      	str	r2, [r5, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	f003 fc66 	bl	8009f48 <_write>
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	d102      	bne.n	8006686 <_write_r+0x1e>
 8006680:	682b      	ldr	r3, [r5, #0]
 8006682:	b103      	cbz	r3, 8006686 <_write_r+0x1e>
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	bd38      	pop	{r3, r4, r5, pc}
 8006688:	200011e0 	.word	0x200011e0

0800668c <__errno>:
 800668c:	4b01      	ldr	r3, [pc, #4]	; (8006694 <__errno+0x8>)
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000790 	.word	0x20000790

08006698 <__libc_init_array>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4d0d      	ldr	r5, [pc, #52]	; (80066d0 <__libc_init_array+0x38>)
 800669c:	4c0d      	ldr	r4, [pc, #52]	; (80066d4 <__libc_init_array+0x3c>)
 800669e:	1b64      	subs	r4, r4, r5
 80066a0:	10a4      	asrs	r4, r4, #2
 80066a2:	2600      	movs	r6, #0
 80066a4:	42a6      	cmp	r6, r4
 80066a6:	d109      	bne.n	80066bc <__libc_init_array+0x24>
 80066a8:	4d0b      	ldr	r5, [pc, #44]	; (80066d8 <__libc_init_array+0x40>)
 80066aa:	4c0c      	ldr	r4, [pc, #48]	; (80066dc <__libc_init_array+0x44>)
 80066ac:	f003 fc56 	bl	8009f5c <_init>
 80066b0:	1b64      	subs	r4, r4, r5
 80066b2:	10a4      	asrs	r4, r4, #2
 80066b4:	2600      	movs	r6, #0
 80066b6:	42a6      	cmp	r6, r4
 80066b8:	d105      	bne.n	80066c6 <__libc_init_array+0x2e>
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c0:	4798      	blx	r3
 80066c2:	3601      	adds	r6, #1
 80066c4:	e7ee      	b.n	80066a4 <__libc_init_array+0xc>
 80066c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ca:	4798      	blx	r3
 80066cc:	3601      	adds	r6, #1
 80066ce:	e7f2      	b.n	80066b6 <__libc_init_array+0x1e>
 80066d0:	08016a58 	.word	0x08016a58
 80066d4:	08016a58 	.word	0x08016a58
 80066d8:	08016a58 	.word	0x08016a58
 80066dc:	08016a5c 	.word	0x08016a5c

080066e0 <__retarget_lock_init_recursive>:
 80066e0:	4770      	bx	lr

080066e2 <__retarget_lock_acquire_recursive>:
 80066e2:	4770      	bx	lr

080066e4 <__retarget_lock_release_recursive>:
 80066e4:	4770      	bx	lr

080066e6 <memcpy>:
 80066e6:	440a      	add	r2, r1
 80066e8:	4291      	cmp	r1, r2
 80066ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80066ee:	d100      	bne.n	80066f2 <memcpy+0xc>
 80066f0:	4770      	bx	lr
 80066f2:	b510      	push	{r4, lr}
 80066f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066fc:	4291      	cmp	r1, r2
 80066fe:	d1f9      	bne.n	80066f4 <memcpy+0xe>
 8006700:	bd10      	pop	{r4, pc}
	...

08006704 <nanf>:
 8006704:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800670c <nanf+0x8>
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	7fc00000 	.word	0x7fc00000

08006710 <quorem>:
 8006710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	6903      	ldr	r3, [r0, #16]
 8006716:	690c      	ldr	r4, [r1, #16]
 8006718:	42a3      	cmp	r3, r4
 800671a:	4607      	mov	r7, r0
 800671c:	db7e      	blt.n	800681c <quorem+0x10c>
 800671e:	3c01      	subs	r4, #1
 8006720:	f101 0814 	add.w	r8, r1, #20
 8006724:	f100 0514 	add.w	r5, r0, #20
 8006728:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800672c:	9301      	str	r3, [sp, #4]
 800672e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006732:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006736:	3301      	adds	r3, #1
 8006738:	429a      	cmp	r2, r3
 800673a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800673e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006742:	fbb2 f6f3 	udiv	r6, r2, r3
 8006746:	d331      	bcc.n	80067ac <quorem+0x9c>
 8006748:	f04f 0e00 	mov.w	lr, #0
 800674c:	4640      	mov	r0, r8
 800674e:	46ac      	mov	ip, r5
 8006750:	46f2      	mov	sl, lr
 8006752:	f850 2b04 	ldr.w	r2, [r0], #4
 8006756:	b293      	uxth	r3, r2
 8006758:	fb06 e303 	mla	r3, r6, r3, lr
 800675c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006760:	0c1a      	lsrs	r2, r3, #16
 8006762:	b29b      	uxth	r3, r3
 8006764:	ebaa 0303 	sub.w	r3, sl, r3
 8006768:	f8dc a000 	ldr.w	sl, [ip]
 800676c:	fa13 f38a 	uxtah	r3, r3, sl
 8006770:	fb06 220e 	mla	r2, r6, lr, r2
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	9b00      	ldr	r3, [sp, #0]
 8006778:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800677c:	b292      	uxth	r2, r2
 800677e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006782:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006786:	f8bd 3000 	ldrh.w	r3, [sp]
 800678a:	4581      	cmp	r9, r0
 800678c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006790:	f84c 3b04 	str.w	r3, [ip], #4
 8006794:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006798:	d2db      	bcs.n	8006752 <quorem+0x42>
 800679a:	f855 300b 	ldr.w	r3, [r5, fp]
 800679e:	b92b      	cbnz	r3, 80067ac <quorem+0x9c>
 80067a0:	9b01      	ldr	r3, [sp, #4]
 80067a2:	3b04      	subs	r3, #4
 80067a4:	429d      	cmp	r5, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	d32c      	bcc.n	8006804 <quorem+0xf4>
 80067aa:	613c      	str	r4, [r7, #16]
 80067ac:	4638      	mov	r0, r7
 80067ae:	f001 f93b 	bl	8007a28 <__mcmp>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	db22      	blt.n	80067fc <quorem+0xec>
 80067b6:	3601      	adds	r6, #1
 80067b8:	4629      	mov	r1, r5
 80067ba:	2000      	movs	r0, #0
 80067bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80067c0:	f8d1 c000 	ldr.w	ip, [r1]
 80067c4:	b293      	uxth	r3, r2
 80067c6:	1ac3      	subs	r3, r0, r3
 80067c8:	0c12      	lsrs	r2, r2, #16
 80067ca:	fa13 f38c 	uxtah	r3, r3, ip
 80067ce:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80067d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067dc:	45c1      	cmp	r9, r8
 80067de:	f841 3b04 	str.w	r3, [r1], #4
 80067e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067e6:	d2e9      	bcs.n	80067bc <quorem+0xac>
 80067e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067f0:	b922      	cbnz	r2, 80067fc <quorem+0xec>
 80067f2:	3b04      	subs	r3, #4
 80067f4:	429d      	cmp	r5, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	d30a      	bcc.n	8006810 <quorem+0x100>
 80067fa:	613c      	str	r4, [r7, #16]
 80067fc:	4630      	mov	r0, r6
 80067fe:	b003      	add	sp, #12
 8006800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	3b04      	subs	r3, #4
 8006808:	2a00      	cmp	r2, #0
 800680a:	d1ce      	bne.n	80067aa <quorem+0x9a>
 800680c:	3c01      	subs	r4, #1
 800680e:	e7c9      	b.n	80067a4 <quorem+0x94>
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	3b04      	subs	r3, #4
 8006814:	2a00      	cmp	r2, #0
 8006816:	d1f0      	bne.n	80067fa <quorem+0xea>
 8006818:	3c01      	subs	r4, #1
 800681a:	e7eb      	b.n	80067f4 <quorem+0xe4>
 800681c:	2000      	movs	r0, #0
 800681e:	e7ee      	b.n	80067fe <quorem+0xee>

08006820 <_dtoa_r>:
 8006820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006824:	ed2d 8b04 	vpush	{d8-d9}
 8006828:	69c5      	ldr	r5, [r0, #28]
 800682a:	b093      	sub	sp, #76	; 0x4c
 800682c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006830:	ec57 6b10 	vmov	r6, r7, d0
 8006834:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006838:	9107      	str	r1, [sp, #28]
 800683a:	4604      	mov	r4, r0
 800683c:	920a      	str	r2, [sp, #40]	; 0x28
 800683e:	930d      	str	r3, [sp, #52]	; 0x34
 8006840:	b975      	cbnz	r5, 8006860 <_dtoa_r+0x40>
 8006842:	2010      	movs	r0, #16
 8006844:	f7fe fe0c 	bl	8005460 <malloc>
 8006848:	4602      	mov	r2, r0
 800684a:	61e0      	str	r0, [r4, #28]
 800684c:	b920      	cbnz	r0, 8006858 <_dtoa_r+0x38>
 800684e:	4bae      	ldr	r3, [pc, #696]	; (8006b08 <_dtoa_r+0x2e8>)
 8006850:	21ef      	movs	r1, #239	; 0xef
 8006852:	48ae      	ldr	r0, [pc, #696]	; (8006b0c <_dtoa_r+0x2ec>)
 8006854:	f002 fba8 	bl	8008fa8 <__assert_func>
 8006858:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800685c:	6005      	str	r5, [r0, #0]
 800685e:	60c5      	str	r5, [r0, #12]
 8006860:	69e3      	ldr	r3, [r4, #28]
 8006862:	6819      	ldr	r1, [r3, #0]
 8006864:	b151      	cbz	r1, 800687c <_dtoa_r+0x5c>
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	604a      	str	r2, [r1, #4]
 800686a:	2301      	movs	r3, #1
 800686c:	4093      	lsls	r3, r2
 800686e:	608b      	str	r3, [r1, #8]
 8006870:	4620      	mov	r0, r4
 8006872:	f000 fe53 	bl	800751c <_Bfree>
 8006876:	69e3      	ldr	r3, [r4, #28]
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	1e3b      	subs	r3, r7, #0
 800687e:	bfbb      	ittet	lt
 8006880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006884:	9303      	strlt	r3, [sp, #12]
 8006886:	2300      	movge	r3, #0
 8006888:	2201      	movlt	r2, #1
 800688a:	bfac      	ite	ge
 800688c:	f8c8 3000 	strge.w	r3, [r8]
 8006890:	f8c8 2000 	strlt.w	r2, [r8]
 8006894:	4b9e      	ldr	r3, [pc, #632]	; (8006b10 <_dtoa_r+0x2f0>)
 8006896:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800689a:	ea33 0308 	bics.w	r3, r3, r8
 800689e:	d11b      	bne.n	80068d8 <_dtoa_r+0xb8>
 80068a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80068ac:	4333      	orrs	r3, r6
 80068ae:	f000 8593 	beq.w	80073d8 <_dtoa_r+0xbb8>
 80068b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068b4:	b963      	cbnz	r3, 80068d0 <_dtoa_r+0xb0>
 80068b6:	4b97      	ldr	r3, [pc, #604]	; (8006b14 <_dtoa_r+0x2f4>)
 80068b8:	e027      	b.n	800690a <_dtoa_r+0xea>
 80068ba:	4b97      	ldr	r3, [pc, #604]	; (8006b18 <_dtoa_r+0x2f8>)
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	9800      	ldr	r0, [sp, #0]
 80068c6:	b013      	add	sp, #76	; 0x4c
 80068c8:	ecbd 8b04 	vpop	{d8-d9}
 80068cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d0:	4b90      	ldr	r3, [pc, #576]	; (8006b14 <_dtoa_r+0x2f4>)
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	3303      	adds	r3, #3
 80068d6:	e7f3      	b.n	80068c0 <_dtoa_r+0xa0>
 80068d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068dc:	2200      	movs	r2, #0
 80068de:	ec51 0b17 	vmov	r0, r1, d7
 80068e2:	eeb0 8a47 	vmov.f32	s16, s14
 80068e6:	eef0 8a67 	vmov.f32	s17, s15
 80068ea:	2300      	movs	r3, #0
 80068ec:	f7fa f8f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80068f0:	4681      	mov	r9, r0
 80068f2:	b160      	cbz	r0, 800690e <_dtoa_r+0xee>
 80068f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068f6:	2301      	movs	r3, #1
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8568 	beq.w	80073d2 <_dtoa_r+0xbb2>
 8006902:	4b86      	ldr	r3, [pc, #536]	; (8006b1c <_dtoa_r+0x2fc>)
 8006904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	3b01      	subs	r3, #1
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	e7da      	b.n	80068c4 <_dtoa_r+0xa4>
 800690e:	aa10      	add	r2, sp, #64	; 0x40
 8006910:	a911      	add	r1, sp, #68	; 0x44
 8006912:	4620      	mov	r0, r4
 8006914:	eeb0 0a48 	vmov.f32	s0, s16
 8006918:	eef0 0a68 	vmov.f32	s1, s17
 800691c:	f001 f99a 	bl	8007c54 <__d2b>
 8006920:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006924:	4682      	mov	sl, r0
 8006926:	2d00      	cmp	r5, #0
 8006928:	d07f      	beq.n	8006a2a <_dtoa_r+0x20a>
 800692a:	ee18 3a90 	vmov	r3, s17
 800692e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006932:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006936:	ec51 0b18 	vmov	r0, r1, d8
 800693a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800693e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006942:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006946:	4619      	mov	r1, r3
 8006948:	2200      	movs	r2, #0
 800694a:	4b75      	ldr	r3, [pc, #468]	; (8006b20 <_dtoa_r+0x300>)
 800694c:	f7f9 fca4 	bl	8000298 <__aeabi_dsub>
 8006950:	a367      	add	r3, pc, #412	; (adr r3, 8006af0 <_dtoa_r+0x2d0>)
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	f7f9 fe57 	bl	8000608 <__aeabi_dmul>
 800695a:	a367      	add	r3, pc, #412	; (adr r3, 8006af8 <_dtoa_r+0x2d8>)
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	f7f9 fc9c 	bl	800029c <__adddf3>
 8006964:	4606      	mov	r6, r0
 8006966:	4628      	mov	r0, r5
 8006968:	460f      	mov	r7, r1
 800696a:	f7f9 fde3 	bl	8000534 <__aeabi_i2d>
 800696e:	a364      	add	r3, pc, #400	; (adr r3, 8006b00 <_dtoa_r+0x2e0>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f7f9 fe48 	bl	8000608 <__aeabi_dmul>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4630      	mov	r0, r6
 800697e:	4639      	mov	r1, r7
 8006980:	f7f9 fc8c 	bl	800029c <__adddf3>
 8006984:	4606      	mov	r6, r0
 8006986:	460f      	mov	r7, r1
 8006988:	f7fa f8ee 	bl	8000b68 <__aeabi_d2iz>
 800698c:	2200      	movs	r2, #0
 800698e:	4683      	mov	fp, r0
 8006990:	2300      	movs	r3, #0
 8006992:	4630      	mov	r0, r6
 8006994:	4639      	mov	r1, r7
 8006996:	f7fa f8a9 	bl	8000aec <__aeabi_dcmplt>
 800699a:	b148      	cbz	r0, 80069b0 <_dtoa_r+0x190>
 800699c:	4658      	mov	r0, fp
 800699e:	f7f9 fdc9 	bl	8000534 <__aeabi_i2d>
 80069a2:	4632      	mov	r2, r6
 80069a4:	463b      	mov	r3, r7
 80069a6:	f7fa f897 	bl	8000ad8 <__aeabi_dcmpeq>
 80069aa:	b908      	cbnz	r0, 80069b0 <_dtoa_r+0x190>
 80069ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069b0:	f1bb 0f16 	cmp.w	fp, #22
 80069b4:	d857      	bhi.n	8006a66 <_dtoa_r+0x246>
 80069b6:	4b5b      	ldr	r3, [pc, #364]	; (8006b24 <_dtoa_r+0x304>)
 80069b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	ec51 0b18 	vmov	r0, r1, d8
 80069c4:	f7fa f892 	bl	8000aec <__aeabi_dcmplt>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d04e      	beq.n	8006a6a <_dtoa_r+0x24a>
 80069cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069d0:	2300      	movs	r3, #0
 80069d2:	930c      	str	r3, [sp, #48]	; 0x30
 80069d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069d6:	1b5b      	subs	r3, r3, r5
 80069d8:	1e5a      	subs	r2, r3, #1
 80069da:	bf45      	ittet	mi
 80069dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80069e0:	9305      	strmi	r3, [sp, #20]
 80069e2:	2300      	movpl	r3, #0
 80069e4:	2300      	movmi	r3, #0
 80069e6:	9206      	str	r2, [sp, #24]
 80069e8:	bf54      	ite	pl
 80069ea:	9305      	strpl	r3, [sp, #20]
 80069ec:	9306      	strmi	r3, [sp, #24]
 80069ee:	f1bb 0f00 	cmp.w	fp, #0
 80069f2:	db3c      	blt.n	8006a6e <_dtoa_r+0x24e>
 80069f4:	9b06      	ldr	r3, [sp, #24]
 80069f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80069fa:	445b      	add	r3, fp
 80069fc:	9306      	str	r3, [sp, #24]
 80069fe:	2300      	movs	r3, #0
 8006a00:	9308      	str	r3, [sp, #32]
 8006a02:	9b07      	ldr	r3, [sp, #28]
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	d868      	bhi.n	8006ada <_dtoa_r+0x2ba>
 8006a08:	2b05      	cmp	r3, #5
 8006a0a:	bfc4      	itt	gt
 8006a0c:	3b04      	subgt	r3, #4
 8006a0e:	9307      	strgt	r3, [sp, #28]
 8006a10:	9b07      	ldr	r3, [sp, #28]
 8006a12:	f1a3 0302 	sub.w	r3, r3, #2
 8006a16:	bfcc      	ite	gt
 8006a18:	2500      	movgt	r5, #0
 8006a1a:	2501      	movle	r5, #1
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	f200 8085 	bhi.w	8006b2c <_dtoa_r+0x30c>
 8006a22:	e8df f003 	tbb	[pc, r3]
 8006a26:	3b2e      	.short	0x3b2e
 8006a28:	5839      	.short	0x5839
 8006a2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006a2e:	441d      	add	r5, r3
 8006a30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	bfc1      	itttt	gt
 8006a38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006a40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006a44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006a48:	bfd6      	itet	le
 8006a4a:	f1c3 0320 	rsble	r3, r3, #32
 8006a4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006a52:	fa06 f003 	lslle.w	r0, r6, r3
 8006a56:	f7f9 fd5d 	bl	8000514 <__aeabi_ui2d>
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006a60:	3d01      	subs	r5, #1
 8006a62:	920e      	str	r2, [sp, #56]	; 0x38
 8006a64:	e76f      	b.n	8006946 <_dtoa_r+0x126>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e7b3      	b.n	80069d2 <_dtoa_r+0x1b2>
 8006a6a:	900c      	str	r0, [sp, #48]	; 0x30
 8006a6c:	e7b2      	b.n	80069d4 <_dtoa_r+0x1b4>
 8006a6e:	9b05      	ldr	r3, [sp, #20]
 8006a70:	eba3 030b 	sub.w	r3, r3, fp
 8006a74:	9305      	str	r3, [sp, #20]
 8006a76:	f1cb 0300 	rsb	r3, fp, #0
 8006a7a:	9308      	str	r3, [sp, #32]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a80:	e7bf      	b.n	8006a02 <_dtoa_r+0x1e2>
 8006a82:	2300      	movs	r3, #0
 8006a84:	9309      	str	r3, [sp, #36]	; 0x24
 8006a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dc52      	bgt.n	8006b32 <_dtoa_r+0x312>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	9304      	str	r3, [sp, #16]
 8006a92:	461a      	mov	r2, r3
 8006a94:	920a      	str	r2, [sp, #40]	; 0x28
 8006a96:	e00b      	b.n	8006ab0 <_dtoa_r+0x290>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e7f3      	b.n	8006a84 <_dtoa_r+0x264>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa2:	445b      	add	r3, fp
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	bfb8      	it	lt
 8006aae:	2301      	movlt	r3, #1
 8006ab0:	69e0      	ldr	r0, [r4, #28]
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	2204      	movs	r2, #4
 8006ab6:	f102 0614 	add.w	r6, r2, #20
 8006aba:	429e      	cmp	r6, r3
 8006abc:	d93d      	bls.n	8006b3a <_dtoa_r+0x31a>
 8006abe:	6041      	str	r1, [r0, #4]
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fceb 	bl	800749c <_Balloc>
 8006ac6:	9000      	str	r0, [sp, #0]
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d139      	bne.n	8006b40 <_dtoa_r+0x320>
 8006acc:	4b16      	ldr	r3, [pc, #88]	; (8006b28 <_dtoa_r+0x308>)
 8006ace:	4602      	mov	r2, r0
 8006ad0:	f240 11af 	movw	r1, #431	; 0x1af
 8006ad4:	e6bd      	b.n	8006852 <_dtoa_r+0x32>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e7e1      	b.n	8006a9e <_dtoa_r+0x27e>
 8006ada:	2501      	movs	r5, #1
 8006adc:	2300      	movs	r3, #0
 8006ade:	9307      	str	r3, [sp, #28]
 8006ae0:	9509      	str	r5, [sp, #36]	; 0x24
 8006ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	2200      	movs	r2, #0
 8006aec:	2312      	movs	r3, #18
 8006aee:	e7d1      	b.n	8006a94 <_dtoa_r+0x274>
 8006af0:	636f4361 	.word	0x636f4361
 8006af4:	3fd287a7 	.word	0x3fd287a7
 8006af8:	8b60c8b3 	.word	0x8b60c8b3
 8006afc:	3fc68a28 	.word	0x3fc68a28
 8006b00:	509f79fb 	.word	0x509f79fb
 8006b04:	3fd34413 	.word	0x3fd34413
 8006b08:	08016656 	.word	0x08016656
 8006b0c:	0801666d 	.word	0x0801666d
 8006b10:	7ff00000 	.word	0x7ff00000
 8006b14:	08016652 	.word	0x08016652
 8006b18:	08016649 	.word	0x08016649
 8006b1c:	08016621 	.word	0x08016621
 8006b20:	3ff80000 	.word	0x3ff80000
 8006b24:	08016758 	.word	0x08016758
 8006b28:	080166c5 	.word	0x080166c5
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b30:	e7d7      	b.n	8006ae2 <_dtoa_r+0x2c2>
 8006b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	9304      	str	r3, [sp, #16]
 8006b38:	e7ba      	b.n	8006ab0 <_dtoa_r+0x290>
 8006b3a:	3101      	adds	r1, #1
 8006b3c:	0052      	lsls	r2, r2, #1
 8006b3e:	e7ba      	b.n	8006ab6 <_dtoa_r+0x296>
 8006b40:	69e3      	ldr	r3, [r4, #28]
 8006b42:	9a00      	ldr	r2, [sp, #0]
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	2b0e      	cmp	r3, #14
 8006b4a:	f200 80a8 	bhi.w	8006c9e <_dtoa_r+0x47e>
 8006b4e:	2d00      	cmp	r5, #0
 8006b50:	f000 80a5 	beq.w	8006c9e <_dtoa_r+0x47e>
 8006b54:	f1bb 0f00 	cmp.w	fp, #0
 8006b58:	dd38      	ble.n	8006bcc <_dtoa_r+0x3ac>
 8006b5a:	4bc0      	ldr	r3, [pc, #768]	; (8006e5c <_dtoa_r+0x63c>)
 8006b5c:	f00b 020f 	and.w	r2, fp, #15
 8006b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006b6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006b70:	d019      	beq.n	8006ba6 <_dtoa_r+0x386>
 8006b72:	4bbb      	ldr	r3, [pc, #748]	; (8006e60 <_dtoa_r+0x640>)
 8006b74:	ec51 0b18 	vmov	r0, r1, d8
 8006b78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b7c:	f7f9 fe6e 	bl	800085c <__aeabi_ddiv>
 8006b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b84:	f008 080f 	and.w	r8, r8, #15
 8006b88:	2503      	movs	r5, #3
 8006b8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006e60 <_dtoa_r+0x640>
 8006b8e:	f1b8 0f00 	cmp.w	r8, #0
 8006b92:	d10a      	bne.n	8006baa <_dtoa_r+0x38a>
 8006b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b98:	4632      	mov	r2, r6
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	f7f9 fe5e 	bl	800085c <__aeabi_ddiv>
 8006ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ba4:	e02b      	b.n	8006bfe <_dtoa_r+0x3de>
 8006ba6:	2502      	movs	r5, #2
 8006ba8:	e7ef      	b.n	8006b8a <_dtoa_r+0x36a>
 8006baa:	f018 0f01 	tst.w	r8, #1
 8006bae:	d008      	beq.n	8006bc2 <_dtoa_r+0x3a2>
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006bb8:	f7f9 fd26 	bl	8000608 <__aeabi_dmul>
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006bc6:	f109 0908 	add.w	r9, r9, #8
 8006bca:	e7e0      	b.n	8006b8e <_dtoa_r+0x36e>
 8006bcc:	f000 809f 	beq.w	8006d0e <_dtoa_r+0x4ee>
 8006bd0:	f1cb 0600 	rsb	r6, fp, #0
 8006bd4:	4ba1      	ldr	r3, [pc, #644]	; (8006e5c <_dtoa_r+0x63c>)
 8006bd6:	4fa2      	ldr	r7, [pc, #648]	; (8006e60 <_dtoa_r+0x640>)
 8006bd8:	f006 020f 	and.w	r2, r6, #15
 8006bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	ec51 0b18 	vmov	r0, r1, d8
 8006be8:	f7f9 fd0e 	bl	8000608 <__aeabi_dmul>
 8006bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bf0:	1136      	asrs	r6, r6, #4
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2502      	movs	r5, #2
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	d17e      	bne.n	8006cf8 <_dtoa_r+0x4d8>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1d0      	bne.n	8006ba0 <_dtoa_r+0x380>
 8006bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8084 	beq.w	8006d12 <_dtoa_r+0x4f2>
 8006c0a:	4b96      	ldr	r3, [pc, #600]	; (8006e64 <_dtoa_r+0x644>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4640      	mov	r0, r8
 8006c10:	4649      	mov	r1, r9
 8006c12:	f7f9 ff6b 	bl	8000aec <__aeabi_dcmplt>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d07b      	beq.n	8006d12 <_dtoa_r+0x4f2>
 8006c1a:	9b04      	ldr	r3, [sp, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d078      	beq.n	8006d12 <_dtoa_r+0x4f2>
 8006c20:	9b01      	ldr	r3, [sp, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dd39      	ble.n	8006c9a <_dtoa_r+0x47a>
 8006c26:	4b90      	ldr	r3, [pc, #576]	; (8006e68 <_dtoa_r+0x648>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	f7f9 fceb 	bl	8000608 <__aeabi_dmul>
 8006c32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c36:	9e01      	ldr	r6, [sp, #4]
 8006c38:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006c42:	4628      	mov	r0, r5
 8006c44:	f7f9 fc76 	bl	8000534 <__aeabi_i2d>
 8006c48:	4642      	mov	r2, r8
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	f7f9 fcdc 	bl	8000608 <__aeabi_dmul>
 8006c50:	4b86      	ldr	r3, [pc, #536]	; (8006e6c <_dtoa_r+0x64c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	f7f9 fb22 	bl	800029c <__adddf3>
 8006c58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c60:	9303      	str	r3, [sp, #12]
 8006c62:	2e00      	cmp	r6, #0
 8006c64:	d158      	bne.n	8006d18 <_dtoa_r+0x4f8>
 8006c66:	4b82      	ldr	r3, [pc, #520]	; (8006e70 <_dtoa_r+0x650>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	f7f9 fb13 	bl	8000298 <__aeabi_dsub>
 8006c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c76:	4680      	mov	r8, r0
 8006c78:	4689      	mov	r9, r1
 8006c7a:	f7f9 ff55 	bl	8000b28 <__aeabi_dcmpgt>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f040 8296 	bne.w	80071b0 <_dtoa_r+0x990>
 8006c84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006c88:	4640      	mov	r0, r8
 8006c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c8e:	4649      	mov	r1, r9
 8006c90:	f7f9 ff2c 	bl	8000aec <__aeabi_dcmplt>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	f040 8289 	bne.w	80071ac <_dtoa_r+0x98c>
 8006c9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006c9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f2c0 814e 	blt.w	8006f42 <_dtoa_r+0x722>
 8006ca6:	f1bb 0f0e 	cmp.w	fp, #14
 8006caa:	f300 814a 	bgt.w	8006f42 <_dtoa_r+0x722>
 8006cae:	4b6b      	ldr	r3, [pc, #428]	; (8006e5c <_dtoa_r+0x63c>)
 8006cb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006cb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f280 80dc 	bge.w	8006e78 <_dtoa_r+0x658>
 8006cc0:	9b04      	ldr	r3, [sp, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f300 80d8 	bgt.w	8006e78 <_dtoa_r+0x658>
 8006cc8:	f040 826f 	bne.w	80071aa <_dtoa_r+0x98a>
 8006ccc:	4b68      	ldr	r3, [pc, #416]	; (8006e70 <_dtoa_r+0x650>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	f7f9 fc98 	bl	8000608 <__aeabi_dmul>
 8006cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cdc:	f7f9 ff1a 	bl	8000b14 <__aeabi_dcmpge>
 8006ce0:	9e04      	ldr	r6, [sp, #16]
 8006ce2:	4637      	mov	r7, r6
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f040 8245 	bne.w	8007174 <_dtoa_r+0x954>
 8006cea:	9d00      	ldr	r5, [sp, #0]
 8006cec:	2331      	movs	r3, #49	; 0x31
 8006cee:	f805 3b01 	strb.w	r3, [r5], #1
 8006cf2:	f10b 0b01 	add.w	fp, fp, #1
 8006cf6:	e241      	b.n	800717c <_dtoa_r+0x95c>
 8006cf8:	07f2      	lsls	r2, r6, #31
 8006cfa:	d505      	bpl.n	8006d08 <_dtoa_r+0x4e8>
 8006cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d00:	f7f9 fc82 	bl	8000608 <__aeabi_dmul>
 8006d04:	3501      	adds	r5, #1
 8006d06:	2301      	movs	r3, #1
 8006d08:	1076      	asrs	r6, r6, #1
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	e773      	b.n	8006bf6 <_dtoa_r+0x3d6>
 8006d0e:	2502      	movs	r5, #2
 8006d10:	e775      	b.n	8006bfe <_dtoa_r+0x3de>
 8006d12:	9e04      	ldr	r6, [sp, #16]
 8006d14:	465f      	mov	r7, fp
 8006d16:	e792      	b.n	8006c3e <_dtoa_r+0x41e>
 8006d18:	9900      	ldr	r1, [sp, #0]
 8006d1a:	4b50      	ldr	r3, [pc, #320]	; (8006e5c <_dtoa_r+0x63c>)
 8006d1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d20:	4431      	add	r1, r6
 8006d22:	9102      	str	r1, [sp, #8]
 8006d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d26:	eeb0 9a47 	vmov.f32	s18, s14
 8006d2a:	eef0 9a67 	vmov.f32	s19, s15
 8006d2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d36:	2900      	cmp	r1, #0
 8006d38:	d044      	beq.n	8006dc4 <_dtoa_r+0x5a4>
 8006d3a:	494e      	ldr	r1, [pc, #312]	; (8006e74 <_dtoa_r+0x654>)
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f7f9 fd8d 	bl	800085c <__aeabi_ddiv>
 8006d42:	ec53 2b19 	vmov	r2, r3, d9
 8006d46:	f7f9 faa7 	bl	8000298 <__aeabi_dsub>
 8006d4a:	9d00      	ldr	r5, [sp, #0]
 8006d4c:	ec41 0b19 	vmov	d9, r0, r1
 8006d50:	4649      	mov	r1, r9
 8006d52:	4640      	mov	r0, r8
 8006d54:	f7f9 ff08 	bl	8000b68 <__aeabi_d2iz>
 8006d58:	4606      	mov	r6, r0
 8006d5a:	f7f9 fbeb 	bl	8000534 <__aeabi_i2d>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4640      	mov	r0, r8
 8006d64:	4649      	mov	r1, r9
 8006d66:	f7f9 fa97 	bl	8000298 <__aeabi_dsub>
 8006d6a:	3630      	adds	r6, #48	; 0x30
 8006d6c:	f805 6b01 	strb.w	r6, [r5], #1
 8006d70:	ec53 2b19 	vmov	r2, r3, d9
 8006d74:	4680      	mov	r8, r0
 8006d76:	4689      	mov	r9, r1
 8006d78:	f7f9 feb8 	bl	8000aec <__aeabi_dcmplt>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d164      	bne.n	8006e4a <_dtoa_r+0x62a>
 8006d80:	4642      	mov	r2, r8
 8006d82:	464b      	mov	r3, r9
 8006d84:	4937      	ldr	r1, [pc, #220]	; (8006e64 <_dtoa_r+0x644>)
 8006d86:	2000      	movs	r0, #0
 8006d88:	f7f9 fa86 	bl	8000298 <__aeabi_dsub>
 8006d8c:	ec53 2b19 	vmov	r2, r3, d9
 8006d90:	f7f9 feac 	bl	8000aec <__aeabi_dcmplt>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f040 80b6 	bne.w	8006f06 <_dtoa_r+0x6e6>
 8006d9a:	9b02      	ldr	r3, [sp, #8]
 8006d9c:	429d      	cmp	r5, r3
 8006d9e:	f43f af7c 	beq.w	8006c9a <_dtoa_r+0x47a>
 8006da2:	4b31      	ldr	r3, [pc, #196]	; (8006e68 <_dtoa_r+0x648>)
 8006da4:	ec51 0b19 	vmov	r0, r1, d9
 8006da8:	2200      	movs	r2, #0
 8006daa:	f7f9 fc2d 	bl	8000608 <__aeabi_dmul>
 8006dae:	4b2e      	ldr	r3, [pc, #184]	; (8006e68 <_dtoa_r+0x648>)
 8006db0:	ec41 0b19 	vmov	d9, r0, r1
 8006db4:	2200      	movs	r2, #0
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fc25 	bl	8000608 <__aeabi_dmul>
 8006dbe:	4680      	mov	r8, r0
 8006dc0:	4689      	mov	r9, r1
 8006dc2:	e7c5      	b.n	8006d50 <_dtoa_r+0x530>
 8006dc4:	ec51 0b17 	vmov	r0, r1, d7
 8006dc8:	f7f9 fc1e 	bl	8000608 <__aeabi_dmul>
 8006dcc:	9b02      	ldr	r3, [sp, #8]
 8006dce:	9d00      	ldr	r5, [sp, #0]
 8006dd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dd2:	ec41 0b19 	vmov	d9, r0, r1
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4640      	mov	r0, r8
 8006dda:	f7f9 fec5 	bl	8000b68 <__aeabi_d2iz>
 8006dde:	4606      	mov	r6, r0
 8006de0:	f7f9 fba8 	bl	8000534 <__aeabi_i2d>
 8006de4:	3630      	adds	r6, #48	; 0x30
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f7f9 fa53 	bl	8000298 <__aeabi_dsub>
 8006df2:	f805 6b01 	strb.w	r6, [r5], #1
 8006df6:	9b02      	ldr	r3, [sp, #8]
 8006df8:	429d      	cmp	r5, r3
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	4689      	mov	r9, r1
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	d124      	bne.n	8006e4e <_dtoa_r+0x62e>
 8006e04:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <_dtoa_r+0x654>)
 8006e06:	ec51 0b19 	vmov	r0, r1, d9
 8006e0a:	f7f9 fa47 	bl	800029c <__adddf3>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4640      	mov	r0, r8
 8006e14:	4649      	mov	r1, r9
 8006e16:	f7f9 fe87 	bl	8000b28 <__aeabi_dcmpgt>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d173      	bne.n	8006f06 <_dtoa_r+0x6e6>
 8006e1e:	ec53 2b19 	vmov	r2, r3, d9
 8006e22:	4914      	ldr	r1, [pc, #80]	; (8006e74 <_dtoa_r+0x654>)
 8006e24:	2000      	movs	r0, #0
 8006e26:	f7f9 fa37 	bl	8000298 <__aeabi_dsub>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4640      	mov	r0, r8
 8006e30:	4649      	mov	r1, r9
 8006e32:	f7f9 fe5b 	bl	8000aec <__aeabi_dcmplt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f43f af2f 	beq.w	8006c9a <_dtoa_r+0x47a>
 8006e3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006e3e:	1e6b      	subs	r3, r5, #1
 8006e40:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e46:	2b30      	cmp	r3, #48	; 0x30
 8006e48:	d0f8      	beq.n	8006e3c <_dtoa_r+0x61c>
 8006e4a:	46bb      	mov	fp, r7
 8006e4c:	e04a      	b.n	8006ee4 <_dtoa_r+0x6c4>
 8006e4e:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <_dtoa_r+0x648>)
 8006e50:	f7f9 fbda 	bl	8000608 <__aeabi_dmul>
 8006e54:	4680      	mov	r8, r0
 8006e56:	4689      	mov	r9, r1
 8006e58:	e7bd      	b.n	8006dd6 <_dtoa_r+0x5b6>
 8006e5a:	bf00      	nop
 8006e5c:	08016758 	.word	0x08016758
 8006e60:	08016730 	.word	0x08016730
 8006e64:	3ff00000 	.word	0x3ff00000
 8006e68:	40240000 	.word	0x40240000
 8006e6c:	401c0000 	.word	0x401c0000
 8006e70:	40140000 	.word	0x40140000
 8006e74:	3fe00000 	.word	0x3fe00000
 8006e78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e7c:	9d00      	ldr	r5, [sp, #0]
 8006e7e:	4642      	mov	r2, r8
 8006e80:	464b      	mov	r3, r9
 8006e82:	4630      	mov	r0, r6
 8006e84:	4639      	mov	r1, r7
 8006e86:	f7f9 fce9 	bl	800085c <__aeabi_ddiv>
 8006e8a:	f7f9 fe6d 	bl	8000b68 <__aeabi_d2iz>
 8006e8e:	9001      	str	r0, [sp, #4]
 8006e90:	f7f9 fb50 	bl	8000534 <__aeabi_i2d>
 8006e94:	4642      	mov	r2, r8
 8006e96:	464b      	mov	r3, r9
 8006e98:	f7f9 fbb6 	bl	8000608 <__aeabi_dmul>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	f7f9 f9f8 	bl	8000298 <__aeabi_dsub>
 8006ea8:	9e01      	ldr	r6, [sp, #4]
 8006eaa:	9f04      	ldr	r7, [sp, #16]
 8006eac:	3630      	adds	r6, #48	; 0x30
 8006eae:	f805 6b01 	strb.w	r6, [r5], #1
 8006eb2:	9e00      	ldr	r6, [sp, #0]
 8006eb4:	1bae      	subs	r6, r5, r6
 8006eb6:	42b7      	cmp	r7, r6
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	d134      	bne.n	8006f28 <_dtoa_r+0x708>
 8006ebe:	f7f9 f9ed 	bl	800029c <__adddf3>
 8006ec2:	4642      	mov	r2, r8
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	460f      	mov	r7, r1
 8006eca:	f7f9 fe2d 	bl	8000b28 <__aeabi_dcmpgt>
 8006ece:	b9c8      	cbnz	r0, 8006f04 <_dtoa_r+0x6e4>
 8006ed0:	4642      	mov	r2, r8
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	f7f9 fdfe 	bl	8000ad8 <__aeabi_dcmpeq>
 8006edc:	b110      	cbz	r0, 8006ee4 <_dtoa_r+0x6c4>
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	07db      	lsls	r3, r3, #31
 8006ee2:	d40f      	bmi.n	8006f04 <_dtoa_r+0x6e4>
 8006ee4:	4651      	mov	r1, sl
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 fb18 	bl	800751c <_Bfree>
 8006eec:	2300      	movs	r3, #0
 8006eee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ef0:	702b      	strb	r3, [r5, #0]
 8006ef2:	f10b 0301 	add.w	r3, fp, #1
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f43f ace2 	beq.w	80068c4 <_dtoa_r+0xa4>
 8006f00:	601d      	str	r5, [r3, #0]
 8006f02:	e4df      	b.n	80068c4 <_dtoa_r+0xa4>
 8006f04:	465f      	mov	r7, fp
 8006f06:	462b      	mov	r3, r5
 8006f08:	461d      	mov	r5, r3
 8006f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f0e:	2a39      	cmp	r2, #57	; 0x39
 8006f10:	d106      	bne.n	8006f20 <_dtoa_r+0x700>
 8006f12:	9a00      	ldr	r2, [sp, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d1f7      	bne.n	8006f08 <_dtoa_r+0x6e8>
 8006f18:	9900      	ldr	r1, [sp, #0]
 8006f1a:	2230      	movs	r2, #48	; 0x30
 8006f1c:	3701      	adds	r7, #1
 8006f1e:	700a      	strb	r2, [r1, #0]
 8006f20:	781a      	ldrb	r2, [r3, #0]
 8006f22:	3201      	adds	r2, #1
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	e790      	b.n	8006e4a <_dtoa_r+0x62a>
 8006f28:	4ba3      	ldr	r3, [pc, #652]	; (80071b8 <_dtoa_r+0x998>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f7f9 fb6c 	bl	8000608 <__aeabi_dmul>
 8006f30:	2200      	movs	r2, #0
 8006f32:	2300      	movs	r3, #0
 8006f34:	4606      	mov	r6, r0
 8006f36:	460f      	mov	r7, r1
 8006f38:	f7f9 fdce 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d09e      	beq.n	8006e7e <_dtoa_r+0x65e>
 8006f40:	e7d0      	b.n	8006ee4 <_dtoa_r+0x6c4>
 8006f42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f44:	2a00      	cmp	r2, #0
 8006f46:	f000 80ca 	beq.w	80070de <_dtoa_r+0x8be>
 8006f4a:	9a07      	ldr	r2, [sp, #28]
 8006f4c:	2a01      	cmp	r2, #1
 8006f4e:	f300 80ad 	bgt.w	80070ac <_dtoa_r+0x88c>
 8006f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f54:	2a00      	cmp	r2, #0
 8006f56:	f000 80a5 	beq.w	80070a4 <_dtoa_r+0x884>
 8006f5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f5e:	9e08      	ldr	r6, [sp, #32]
 8006f60:	9d05      	ldr	r5, [sp, #20]
 8006f62:	9a05      	ldr	r2, [sp, #20]
 8006f64:	441a      	add	r2, r3
 8006f66:	9205      	str	r2, [sp, #20]
 8006f68:	9a06      	ldr	r2, [sp, #24]
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	441a      	add	r2, r3
 8006f6e:	4620      	mov	r0, r4
 8006f70:	9206      	str	r2, [sp, #24]
 8006f72:	f000 fbd3 	bl	800771c <__i2b>
 8006f76:	4607      	mov	r7, r0
 8006f78:	b165      	cbz	r5, 8006f94 <_dtoa_r+0x774>
 8006f7a:	9b06      	ldr	r3, [sp, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dd09      	ble.n	8006f94 <_dtoa_r+0x774>
 8006f80:	42ab      	cmp	r3, r5
 8006f82:	9a05      	ldr	r2, [sp, #20]
 8006f84:	bfa8      	it	ge
 8006f86:	462b      	movge	r3, r5
 8006f88:	1ad2      	subs	r2, r2, r3
 8006f8a:	9205      	str	r2, [sp, #20]
 8006f8c:	9a06      	ldr	r2, [sp, #24]
 8006f8e:	1aed      	subs	r5, r5, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	9306      	str	r3, [sp, #24]
 8006f94:	9b08      	ldr	r3, [sp, #32]
 8006f96:	b1f3      	cbz	r3, 8006fd6 <_dtoa_r+0x7b6>
 8006f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80a3 	beq.w	80070e6 <_dtoa_r+0x8c6>
 8006fa0:	2e00      	cmp	r6, #0
 8006fa2:	dd10      	ble.n	8006fc6 <_dtoa_r+0x7a6>
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4632      	mov	r2, r6
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 fc77 	bl	800789c <__pow5mult>
 8006fae:	4652      	mov	r2, sl
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	4607      	mov	r7, r0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fbc7 	bl	8007748 <__multiply>
 8006fba:	4651      	mov	r1, sl
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 faac 	bl	800751c <_Bfree>
 8006fc4:	46c2      	mov	sl, r8
 8006fc6:	9b08      	ldr	r3, [sp, #32]
 8006fc8:	1b9a      	subs	r2, r3, r6
 8006fca:	d004      	beq.n	8006fd6 <_dtoa_r+0x7b6>
 8006fcc:	4651      	mov	r1, sl
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 fc64 	bl	800789c <__pow5mult>
 8006fd4:	4682      	mov	sl, r0
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fb9f 	bl	800771c <__i2b>
 8006fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	f340 8081 	ble.w	80070ea <_dtoa_r+0x8ca>
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4601      	mov	r1, r0
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 fc55 	bl	800789c <__pow5mult>
 8006ff2:	9b07      	ldr	r3, [sp, #28]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	dd7a      	ble.n	80070f0 <_dtoa_r+0x8d0>
 8006ffa:	f04f 0800 	mov.w	r8, #0
 8006ffe:	6933      	ldr	r3, [r6, #16]
 8007000:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007004:	6918      	ldr	r0, [r3, #16]
 8007006:	f000 fb3b 	bl	8007680 <__hi0bits>
 800700a:	f1c0 0020 	rsb	r0, r0, #32
 800700e:	9b06      	ldr	r3, [sp, #24]
 8007010:	4418      	add	r0, r3
 8007012:	f010 001f 	ands.w	r0, r0, #31
 8007016:	f000 8094 	beq.w	8007142 <_dtoa_r+0x922>
 800701a:	f1c0 0320 	rsb	r3, r0, #32
 800701e:	2b04      	cmp	r3, #4
 8007020:	f340 8085 	ble.w	800712e <_dtoa_r+0x90e>
 8007024:	9b05      	ldr	r3, [sp, #20]
 8007026:	f1c0 001c 	rsb	r0, r0, #28
 800702a:	4403      	add	r3, r0
 800702c:	9305      	str	r3, [sp, #20]
 800702e:	9b06      	ldr	r3, [sp, #24]
 8007030:	4403      	add	r3, r0
 8007032:	4405      	add	r5, r0
 8007034:	9306      	str	r3, [sp, #24]
 8007036:	9b05      	ldr	r3, [sp, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	dd05      	ble.n	8007048 <_dtoa_r+0x828>
 800703c:	4651      	mov	r1, sl
 800703e:	461a      	mov	r2, r3
 8007040:	4620      	mov	r0, r4
 8007042:	f000 fc85 	bl	8007950 <__lshift>
 8007046:	4682      	mov	sl, r0
 8007048:	9b06      	ldr	r3, [sp, #24]
 800704a:	2b00      	cmp	r3, #0
 800704c:	dd05      	ble.n	800705a <_dtoa_r+0x83a>
 800704e:	4631      	mov	r1, r6
 8007050:	461a      	mov	r2, r3
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fc7c 	bl	8007950 <__lshift>
 8007058:	4606      	mov	r6, r0
 800705a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800705c:	2b00      	cmp	r3, #0
 800705e:	d072      	beq.n	8007146 <_dtoa_r+0x926>
 8007060:	4631      	mov	r1, r6
 8007062:	4650      	mov	r0, sl
 8007064:	f000 fce0 	bl	8007a28 <__mcmp>
 8007068:	2800      	cmp	r0, #0
 800706a:	da6c      	bge.n	8007146 <_dtoa_r+0x926>
 800706c:	2300      	movs	r3, #0
 800706e:	4651      	mov	r1, sl
 8007070:	220a      	movs	r2, #10
 8007072:	4620      	mov	r0, r4
 8007074:	f000 fa74 	bl	8007560 <__multadd>
 8007078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800707e:	4682      	mov	sl, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 81b0 	beq.w	80073e6 <_dtoa_r+0xbc6>
 8007086:	2300      	movs	r3, #0
 8007088:	4639      	mov	r1, r7
 800708a:	220a      	movs	r2, #10
 800708c:	4620      	mov	r0, r4
 800708e:	f000 fa67 	bl	8007560 <__multadd>
 8007092:	9b01      	ldr	r3, [sp, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	4607      	mov	r7, r0
 8007098:	f300 8096 	bgt.w	80071c8 <_dtoa_r+0x9a8>
 800709c:	9b07      	ldr	r3, [sp, #28]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	dc59      	bgt.n	8007156 <_dtoa_r+0x936>
 80070a2:	e091      	b.n	80071c8 <_dtoa_r+0x9a8>
 80070a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070aa:	e758      	b.n	8006f5e <_dtoa_r+0x73e>
 80070ac:	9b04      	ldr	r3, [sp, #16]
 80070ae:	1e5e      	subs	r6, r3, #1
 80070b0:	9b08      	ldr	r3, [sp, #32]
 80070b2:	42b3      	cmp	r3, r6
 80070b4:	bfbf      	itttt	lt
 80070b6:	9b08      	ldrlt	r3, [sp, #32]
 80070b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80070ba:	9608      	strlt	r6, [sp, #32]
 80070bc:	1af3      	sublt	r3, r6, r3
 80070be:	bfb4      	ite	lt
 80070c0:	18d2      	addlt	r2, r2, r3
 80070c2:	1b9e      	subge	r6, r3, r6
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	bfbc      	itt	lt
 80070c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80070ca:	2600      	movlt	r6, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bfb7      	itett	lt
 80070d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80070d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80070d8:	1a9d      	sublt	r5, r3, r2
 80070da:	2300      	movlt	r3, #0
 80070dc:	e741      	b.n	8006f62 <_dtoa_r+0x742>
 80070de:	9e08      	ldr	r6, [sp, #32]
 80070e0:	9d05      	ldr	r5, [sp, #20]
 80070e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80070e4:	e748      	b.n	8006f78 <_dtoa_r+0x758>
 80070e6:	9a08      	ldr	r2, [sp, #32]
 80070e8:	e770      	b.n	8006fcc <_dtoa_r+0x7ac>
 80070ea:	9b07      	ldr	r3, [sp, #28]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	dc19      	bgt.n	8007124 <_dtoa_r+0x904>
 80070f0:	9b02      	ldr	r3, [sp, #8]
 80070f2:	b9bb      	cbnz	r3, 8007124 <_dtoa_r+0x904>
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070fa:	b99b      	cbnz	r3, 8007124 <_dtoa_r+0x904>
 80070fc:	9b03      	ldr	r3, [sp, #12]
 80070fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007102:	0d1b      	lsrs	r3, r3, #20
 8007104:	051b      	lsls	r3, r3, #20
 8007106:	b183      	cbz	r3, 800712a <_dtoa_r+0x90a>
 8007108:	9b05      	ldr	r3, [sp, #20]
 800710a:	3301      	adds	r3, #1
 800710c:	9305      	str	r3, [sp, #20]
 800710e:	9b06      	ldr	r3, [sp, #24]
 8007110:	3301      	adds	r3, #1
 8007112:	9306      	str	r3, [sp, #24]
 8007114:	f04f 0801 	mov.w	r8, #1
 8007118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800711a:	2b00      	cmp	r3, #0
 800711c:	f47f af6f 	bne.w	8006ffe <_dtoa_r+0x7de>
 8007120:	2001      	movs	r0, #1
 8007122:	e774      	b.n	800700e <_dtoa_r+0x7ee>
 8007124:	f04f 0800 	mov.w	r8, #0
 8007128:	e7f6      	b.n	8007118 <_dtoa_r+0x8f8>
 800712a:	4698      	mov	r8, r3
 800712c:	e7f4      	b.n	8007118 <_dtoa_r+0x8f8>
 800712e:	d082      	beq.n	8007036 <_dtoa_r+0x816>
 8007130:	9a05      	ldr	r2, [sp, #20]
 8007132:	331c      	adds	r3, #28
 8007134:	441a      	add	r2, r3
 8007136:	9205      	str	r2, [sp, #20]
 8007138:	9a06      	ldr	r2, [sp, #24]
 800713a:	441a      	add	r2, r3
 800713c:	441d      	add	r5, r3
 800713e:	9206      	str	r2, [sp, #24]
 8007140:	e779      	b.n	8007036 <_dtoa_r+0x816>
 8007142:	4603      	mov	r3, r0
 8007144:	e7f4      	b.n	8007130 <_dtoa_r+0x910>
 8007146:	9b04      	ldr	r3, [sp, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	dc37      	bgt.n	80071bc <_dtoa_r+0x99c>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	2b02      	cmp	r3, #2
 8007150:	dd34      	ble.n	80071bc <_dtoa_r+0x99c>
 8007152:	9b04      	ldr	r3, [sp, #16]
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	b963      	cbnz	r3, 8007174 <_dtoa_r+0x954>
 800715a:	4631      	mov	r1, r6
 800715c:	2205      	movs	r2, #5
 800715e:	4620      	mov	r0, r4
 8007160:	f000 f9fe 	bl	8007560 <__multadd>
 8007164:	4601      	mov	r1, r0
 8007166:	4606      	mov	r6, r0
 8007168:	4650      	mov	r0, sl
 800716a:	f000 fc5d 	bl	8007a28 <__mcmp>
 800716e:	2800      	cmp	r0, #0
 8007170:	f73f adbb 	bgt.w	8006cea <_dtoa_r+0x4ca>
 8007174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007176:	9d00      	ldr	r5, [sp, #0]
 8007178:	ea6f 0b03 	mvn.w	fp, r3
 800717c:	f04f 0800 	mov.w	r8, #0
 8007180:	4631      	mov	r1, r6
 8007182:	4620      	mov	r0, r4
 8007184:	f000 f9ca 	bl	800751c <_Bfree>
 8007188:	2f00      	cmp	r7, #0
 800718a:	f43f aeab 	beq.w	8006ee4 <_dtoa_r+0x6c4>
 800718e:	f1b8 0f00 	cmp.w	r8, #0
 8007192:	d005      	beq.n	80071a0 <_dtoa_r+0x980>
 8007194:	45b8      	cmp	r8, r7
 8007196:	d003      	beq.n	80071a0 <_dtoa_r+0x980>
 8007198:	4641      	mov	r1, r8
 800719a:	4620      	mov	r0, r4
 800719c:	f000 f9be 	bl	800751c <_Bfree>
 80071a0:	4639      	mov	r1, r7
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 f9ba 	bl	800751c <_Bfree>
 80071a8:	e69c      	b.n	8006ee4 <_dtoa_r+0x6c4>
 80071aa:	2600      	movs	r6, #0
 80071ac:	4637      	mov	r7, r6
 80071ae:	e7e1      	b.n	8007174 <_dtoa_r+0x954>
 80071b0:	46bb      	mov	fp, r7
 80071b2:	4637      	mov	r7, r6
 80071b4:	e599      	b.n	8006cea <_dtoa_r+0x4ca>
 80071b6:	bf00      	nop
 80071b8:	40240000 	.word	0x40240000
 80071bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80c8 	beq.w	8007354 <_dtoa_r+0xb34>
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	2d00      	cmp	r5, #0
 80071ca:	dd05      	ble.n	80071d8 <_dtoa_r+0x9b8>
 80071cc:	4639      	mov	r1, r7
 80071ce:	462a      	mov	r2, r5
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 fbbd 	bl	8007950 <__lshift>
 80071d6:	4607      	mov	r7, r0
 80071d8:	f1b8 0f00 	cmp.w	r8, #0
 80071dc:	d05b      	beq.n	8007296 <_dtoa_r+0xa76>
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 f95b 	bl	800749c <_Balloc>
 80071e6:	4605      	mov	r5, r0
 80071e8:	b928      	cbnz	r0, 80071f6 <_dtoa_r+0x9d6>
 80071ea:	4b83      	ldr	r3, [pc, #524]	; (80073f8 <_dtoa_r+0xbd8>)
 80071ec:	4602      	mov	r2, r0
 80071ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80071f2:	f7ff bb2e 	b.w	8006852 <_dtoa_r+0x32>
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	3202      	adds	r2, #2
 80071fa:	0092      	lsls	r2, r2, #2
 80071fc:	f107 010c 	add.w	r1, r7, #12
 8007200:	300c      	adds	r0, #12
 8007202:	f7ff fa70 	bl	80066e6 <memcpy>
 8007206:	2201      	movs	r2, #1
 8007208:	4629      	mov	r1, r5
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fba0 	bl	8007950 <__lshift>
 8007210:	9b00      	ldr	r3, [sp, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	9304      	str	r3, [sp, #16]
 8007216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800721a:	4413      	add	r3, r2
 800721c:	9308      	str	r3, [sp, #32]
 800721e:	9b02      	ldr	r3, [sp, #8]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	46b8      	mov	r8, r7
 8007226:	9306      	str	r3, [sp, #24]
 8007228:	4607      	mov	r7, r0
 800722a:	9b04      	ldr	r3, [sp, #16]
 800722c:	4631      	mov	r1, r6
 800722e:	3b01      	subs	r3, #1
 8007230:	4650      	mov	r0, sl
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	f7ff fa6c 	bl	8006710 <quorem>
 8007238:	4641      	mov	r1, r8
 800723a:	9002      	str	r0, [sp, #8]
 800723c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007240:	4650      	mov	r0, sl
 8007242:	f000 fbf1 	bl	8007a28 <__mcmp>
 8007246:	463a      	mov	r2, r7
 8007248:	9005      	str	r0, [sp, #20]
 800724a:	4631      	mov	r1, r6
 800724c:	4620      	mov	r0, r4
 800724e:	f000 fc07 	bl	8007a60 <__mdiff>
 8007252:	68c2      	ldr	r2, [r0, #12]
 8007254:	4605      	mov	r5, r0
 8007256:	bb02      	cbnz	r2, 800729a <_dtoa_r+0xa7a>
 8007258:	4601      	mov	r1, r0
 800725a:	4650      	mov	r0, sl
 800725c:	f000 fbe4 	bl	8007a28 <__mcmp>
 8007260:	4602      	mov	r2, r0
 8007262:	4629      	mov	r1, r5
 8007264:	4620      	mov	r0, r4
 8007266:	9209      	str	r2, [sp, #36]	; 0x24
 8007268:	f000 f958 	bl	800751c <_Bfree>
 800726c:	9b07      	ldr	r3, [sp, #28]
 800726e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007270:	9d04      	ldr	r5, [sp, #16]
 8007272:	ea43 0102 	orr.w	r1, r3, r2
 8007276:	9b06      	ldr	r3, [sp, #24]
 8007278:	4319      	orrs	r1, r3
 800727a:	d110      	bne.n	800729e <_dtoa_r+0xa7e>
 800727c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007280:	d029      	beq.n	80072d6 <_dtoa_r+0xab6>
 8007282:	9b05      	ldr	r3, [sp, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	dd02      	ble.n	800728e <_dtoa_r+0xa6e>
 8007288:	9b02      	ldr	r3, [sp, #8]
 800728a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800728e:	9b01      	ldr	r3, [sp, #4]
 8007290:	f883 9000 	strb.w	r9, [r3]
 8007294:	e774      	b.n	8007180 <_dtoa_r+0x960>
 8007296:	4638      	mov	r0, r7
 8007298:	e7ba      	b.n	8007210 <_dtoa_r+0x9f0>
 800729a:	2201      	movs	r2, #1
 800729c:	e7e1      	b.n	8007262 <_dtoa_r+0xa42>
 800729e:	9b05      	ldr	r3, [sp, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	db04      	blt.n	80072ae <_dtoa_r+0xa8e>
 80072a4:	9907      	ldr	r1, [sp, #28]
 80072a6:	430b      	orrs	r3, r1
 80072a8:	9906      	ldr	r1, [sp, #24]
 80072aa:	430b      	orrs	r3, r1
 80072ac:	d120      	bne.n	80072f0 <_dtoa_r+0xad0>
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	dded      	ble.n	800728e <_dtoa_r+0xa6e>
 80072b2:	4651      	mov	r1, sl
 80072b4:	2201      	movs	r2, #1
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 fb4a 	bl	8007950 <__lshift>
 80072bc:	4631      	mov	r1, r6
 80072be:	4682      	mov	sl, r0
 80072c0:	f000 fbb2 	bl	8007a28 <__mcmp>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	dc03      	bgt.n	80072d0 <_dtoa_r+0xab0>
 80072c8:	d1e1      	bne.n	800728e <_dtoa_r+0xa6e>
 80072ca:	f019 0f01 	tst.w	r9, #1
 80072ce:	d0de      	beq.n	800728e <_dtoa_r+0xa6e>
 80072d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072d4:	d1d8      	bne.n	8007288 <_dtoa_r+0xa68>
 80072d6:	9a01      	ldr	r2, [sp, #4]
 80072d8:	2339      	movs	r3, #57	; 0x39
 80072da:	7013      	strb	r3, [r2, #0]
 80072dc:	462b      	mov	r3, r5
 80072de:	461d      	mov	r5, r3
 80072e0:	3b01      	subs	r3, #1
 80072e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80072e6:	2a39      	cmp	r2, #57	; 0x39
 80072e8:	d06c      	beq.n	80073c4 <_dtoa_r+0xba4>
 80072ea:	3201      	adds	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	e747      	b.n	8007180 <_dtoa_r+0x960>
 80072f0:	2a00      	cmp	r2, #0
 80072f2:	dd07      	ble.n	8007304 <_dtoa_r+0xae4>
 80072f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80072f8:	d0ed      	beq.n	80072d6 <_dtoa_r+0xab6>
 80072fa:	9a01      	ldr	r2, [sp, #4]
 80072fc:	f109 0301 	add.w	r3, r9, #1
 8007300:	7013      	strb	r3, [r2, #0]
 8007302:	e73d      	b.n	8007180 <_dtoa_r+0x960>
 8007304:	9b04      	ldr	r3, [sp, #16]
 8007306:	9a08      	ldr	r2, [sp, #32]
 8007308:	f803 9c01 	strb.w	r9, [r3, #-1]
 800730c:	4293      	cmp	r3, r2
 800730e:	d043      	beq.n	8007398 <_dtoa_r+0xb78>
 8007310:	4651      	mov	r1, sl
 8007312:	2300      	movs	r3, #0
 8007314:	220a      	movs	r2, #10
 8007316:	4620      	mov	r0, r4
 8007318:	f000 f922 	bl	8007560 <__multadd>
 800731c:	45b8      	cmp	r8, r7
 800731e:	4682      	mov	sl, r0
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	f04f 020a 	mov.w	r2, #10
 8007328:	4641      	mov	r1, r8
 800732a:	4620      	mov	r0, r4
 800732c:	d107      	bne.n	800733e <_dtoa_r+0xb1e>
 800732e:	f000 f917 	bl	8007560 <__multadd>
 8007332:	4680      	mov	r8, r0
 8007334:	4607      	mov	r7, r0
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	3301      	adds	r3, #1
 800733a:	9304      	str	r3, [sp, #16]
 800733c:	e775      	b.n	800722a <_dtoa_r+0xa0a>
 800733e:	f000 f90f 	bl	8007560 <__multadd>
 8007342:	4639      	mov	r1, r7
 8007344:	4680      	mov	r8, r0
 8007346:	2300      	movs	r3, #0
 8007348:	220a      	movs	r2, #10
 800734a:	4620      	mov	r0, r4
 800734c:	f000 f908 	bl	8007560 <__multadd>
 8007350:	4607      	mov	r7, r0
 8007352:	e7f0      	b.n	8007336 <_dtoa_r+0xb16>
 8007354:	9b04      	ldr	r3, [sp, #16]
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	9d00      	ldr	r5, [sp, #0]
 800735a:	4631      	mov	r1, r6
 800735c:	4650      	mov	r0, sl
 800735e:	f7ff f9d7 	bl	8006710 <quorem>
 8007362:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007366:	9b00      	ldr	r3, [sp, #0]
 8007368:	f805 9b01 	strb.w	r9, [r5], #1
 800736c:	1aea      	subs	r2, r5, r3
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	4293      	cmp	r3, r2
 8007372:	dd07      	ble.n	8007384 <_dtoa_r+0xb64>
 8007374:	4651      	mov	r1, sl
 8007376:	2300      	movs	r3, #0
 8007378:	220a      	movs	r2, #10
 800737a:	4620      	mov	r0, r4
 800737c:	f000 f8f0 	bl	8007560 <__multadd>
 8007380:	4682      	mov	sl, r0
 8007382:	e7ea      	b.n	800735a <_dtoa_r+0xb3a>
 8007384:	9b01      	ldr	r3, [sp, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	bfc8      	it	gt
 800738a:	461d      	movgt	r5, r3
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	bfd8      	it	le
 8007390:	2501      	movle	r5, #1
 8007392:	441d      	add	r5, r3
 8007394:	f04f 0800 	mov.w	r8, #0
 8007398:	4651      	mov	r1, sl
 800739a:	2201      	movs	r2, #1
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fad7 	bl	8007950 <__lshift>
 80073a2:	4631      	mov	r1, r6
 80073a4:	4682      	mov	sl, r0
 80073a6:	f000 fb3f 	bl	8007a28 <__mcmp>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	dc96      	bgt.n	80072dc <_dtoa_r+0xabc>
 80073ae:	d102      	bne.n	80073b6 <_dtoa_r+0xb96>
 80073b0:	f019 0f01 	tst.w	r9, #1
 80073b4:	d192      	bne.n	80072dc <_dtoa_r+0xabc>
 80073b6:	462b      	mov	r3, r5
 80073b8:	461d      	mov	r5, r3
 80073ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073be:	2a30      	cmp	r2, #48	; 0x30
 80073c0:	d0fa      	beq.n	80073b8 <_dtoa_r+0xb98>
 80073c2:	e6dd      	b.n	8007180 <_dtoa_r+0x960>
 80073c4:	9a00      	ldr	r2, [sp, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d189      	bne.n	80072de <_dtoa_r+0xabe>
 80073ca:	f10b 0b01 	add.w	fp, fp, #1
 80073ce:	2331      	movs	r3, #49	; 0x31
 80073d0:	e796      	b.n	8007300 <_dtoa_r+0xae0>
 80073d2:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <_dtoa_r+0xbdc>)
 80073d4:	f7ff ba99 	b.w	800690a <_dtoa_r+0xea>
 80073d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f47f aa6d 	bne.w	80068ba <_dtoa_r+0x9a>
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <_dtoa_r+0xbe0>)
 80073e2:	f7ff ba92 	b.w	800690a <_dtoa_r+0xea>
 80073e6:	9b01      	ldr	r3, [sp, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dcb5      	bgt.n	8007358 <_dtoa_r+0xb38>
 80073ec:	9b07      	ldr	r3, [sp, #28]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	f73f aeb1 	bgt.w	8007156 <_dtoa_r+0x936>
 80073f4:	e7b0      	b.n	8007358 <_dtoa_r+0xb38>
 80073f6:	bf00      	nop
 80073f8:	080166c5 	.word	0x080166c5
 80073fc:	08016620 	.word	0x08016620
 8007400:	08016649 	.word	0x08016649

08007404 <_free_r>:
 8007404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007406:	2900      	cmp	r1, #0
 8007408:	d044      	beq.n	8007494 <_free_r+0x90>
 800740a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740e:	9001      	str	r0, [sp, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f1a1 0404 	sub.w	r4, r1, #4
 8007416:	bfb8      	it	lt
 8007418:	18e4      	addlt	r4, r4, r3
 800741a:	f7fe f8c9 	bl	80055b0 <__malloc_lock>
 800741e:	4a1e      	ldr	r2, [pc, #120]	; (8007498 <_free_r+0x94>)
 8007420:	9801      	ldr	r0, [sp, #4]
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	b933      	cbnz	r3, 8007434 <_free_r+0x30>
 8007426:	6063      	str	r3, [r4, #4]
 8007428:	6014      	str	r4, [r2, #0]
 800742a:	b003      	add	sp, #12
 800742c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007430:	f7fe b8c4 	b.w	80055bc <__malloc_unlock>
 8007434:	42a3      	cmp	r3, r4
 8007436:	d908      	bls.n	800744a <_free_r+0x46>
 8007438:	6825      	ldr	r5, [r4, #0]
 800743a:	1961      	adds	r1, r4, r5
 800743c:	428b      	cmp	r3, r1
 800743e:	bf01      	itttt	eq
 8007440:	6819      	ldreq	r1, [r3, #0]
 8007442:	685b      	ldreq	r3, [r3, #4]
 8007444:	1949      	addeq	r1, r1, r5
 8007446:	6021      	streq	r1, [r4, #0]
 8007448:	e7ed      	b.n	8007426 <_free_r+0x22>
 800744a:	461a      	mov	r2, r3
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	b10b      	cbz	r3, 8007454 <_free_r+0x50>
 8007450:	42a3      	cmp	r3, r4
 8007452:	d9fa      	bls.n	800744a <_free_r+0x46>
 8007454:	6811      	ldr	r1, [r2, #0]
 8007456:	1855      	adds	r5, r2, r1
 8007458:	42a5      	cmp	r5, r4
 800745a:	d10b      	bne.n	8007474 <_free_r+0x70>
 800745c:	6824      	ldr	r4, [r4, #0]
 800745e:	4421      	add	r1, r4
 8007460:	1854      	adds	r4, r2, r1
 8007462:	42a3      	cmp	r3, r4
 8007464:	6011      	str	r1, [r2, #0]
 8007466:	d1e0      	bne.n	800742a <_free_r+0x26>
 8007468:	681c      	ldr	r4, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	6053      	str	r3, [r2, #4]
 800746e:	440c      	add	r4, r1
 8007470:	6014      	str	r4, [r2, #0]
 8007472:	e7da      	b.n	800742a <_free_r+0x26>
 8007474:	d902      	bls.n	800747c <_free_r+0x78>
 8007476:	230c      	movs	r3, #12
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	e7d6      	b.n	800742a <_free_r+0x26>
 800747c:	6825      	ldr	r5, [r4, #0]
 800747e:	1961      	adds	r1, r4, r5
 8007480:	428b      	cmp	r3, r1
 8007482:	bf04      	itt	eq
 8007484:	6819      	ldreq	r1, [r3, #0]
 8007486:	685b      	ldreq	r3, [r3, #4]
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	bf04      	itt	eq
 800748c:	1949      	addeq	r1, r1, r5
 800748e:	6021      	streq	r1, [r4, #0]
 8007490:	6054      	str	r4, [r2, #4]
 8007492:	e7ca      	b.n	800742a <_free_r+0x26>
 8007494:	b003      	add	sp, #12
 8007496:	bd30      	pop	{r4, r5, pc}
 8007498:	2000109c 	.word	0x2000109c

0800749c <_Balloc>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	69c6      	ldr	r6, [r0, #28]
 80074a0:	4604      	mov	r4, r0
 80074a2:	460d      	mov	r5, r1
 80074a4:	b976      	cbnz	r6, 80074c4 <_Balloc+0x28>
 80074a6:	2010      	movs	r0, #16
 80074a8:	f7fd ffda 	bl	8005460 <malloc>
 80074ac:	4602      	mov	r2, r0
 80074ae:	61e0      	str	r0, [r4, #28]
 80074b0:	b920      	cbnz	r0, 80074bc <_Balloc+0x20>
 80074b2:	4b18      	ldr	r3, [pc, #96]	; (8007514 <_Balloc+0x78>)
 80074b4:	4818      	ldr	r0, [pc, #96]	; (8007518 <_Balloc+0x7c>)
 80074b6:	216b      	movs	r1, #107	; 0x6b
 80074b8:	f001 fd76 	bl	8008fa8 <__assert_func>
 80074bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074c0:	6006      	str	r6, [r0, #0]
 80074c2:	60c6      	str	r6, [r0, #12]
 80074c4:	69e6      	ldr	r6, [r4, #28]
 80074c6:	68f3      	ldr	r3, [r6, #12]
 80074c8:	b183      	cbz	r3, 80074ec <_Balloc+0x50>
 80074ca:	69e3      	ldr	r3, [r4, #28]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074d2:	b9b8      	cbnz	r0, 8007504 <_Balloc+0x68>
 80074d4:	2101      	movs	r1, #1
 80074d6:	fa01 f605 	lsl.w	r6, r1, r5
 80074da:	1d72      	adds	r2, r6, #5
 80074dc:	0092      	lsls	r2, r2, #2
 80074de:	4620      	mov	r0, r4
 80074e0:	f001 fd80 	bl	8008fe4 <_calloc_r>
 80074e4:	b160      	cbz	r0, 8007500 <_Balloc+0x64>
 80074e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074ea:	e00e      	b.n	800750a <_Balloc+0x6e>
 80074ec:	2221      	movs	r2, #33	; 0x21
 80074ee:	2104      	movs	r1, #4
 80074f0:	4620      	mov	r0, r4
 80074f2:	f001 fd77 	bl	8008fe4 <_calloc_r>
 80074f6:	69e3      	ldr	r3, [r4, #28]
 80074f8:	60f0      	str	r0, [r6, #12]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e4      	bne.n	80074ca <_Balloc+0x2e>
 8007500:	2000      	movs	r0, #0
 8007502:	bd70      	pop	{r4, r5, r6, pc}
 8007504:	6802      	ldr	r2, [r0, #0]
 8007506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800750a:	2300      	movs	r3, #0
 800750c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007510:	e7f7      	b.n	8007502 <_Balloc+0x66>
 8007512:	bf00      	nop
 8007514:	08016656 	.word	0x08016656
 8007518:	080166d6 	.word	0x080166d6

0800751c <_Bfree>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	69c6      	ldr	r6, [r0, #28]
 8007520:	4605      	mov	r5, r0
 8007522:	460c      	mov	r4, r1
 8007524:	b976      	cbnz	r6, 8007544 <_Bfree+0x28>
 8007526:	2010      	movs	r0, #16
 8007528:	f7fd ff9a 	bl	8005460 <malloc>
 800752c:	4602      	mov	r2, r0
 800752e:	61e8      	str	r0, [r5, #28]
 8007530:	b920      	cbnz	r0, 800753c <_Bfree+0x20>
 8007532:	4b09      	ldr	r3, [pc, #36]	; (8007558 <_Bfree+0x3c>)
 8007534:	4809      	ldr	r0, [pc, #36]	; (800755c <_Bfree+0x40>)
 8007536:	218f      	movs	r1, #143	; 0x8f
 8007538:	f001 fd36 	bl	8008fa8 <__assert_func>
 800753c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007540:	6006      	str	r6, [r0, #0]
 8007542:	60c6      	str	r6, [r0, #12]
 8007544:	b13c      	cbz	r4, 8007556 <_Bfree+0x3a>
 8007546:	69eb      	ldr	r3, [r5, #28]
 8007548:	6862      	ldr	r2, [r4, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007550:	6021      	str	r1, [r4, #0]
 8007552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	08016656 	.word	0x08016656
 800755c:	080166d6 	.word	0x080166d6

08007560 <__multadd>:
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	690d      	ldr	r5, [r1, #16]
 8007566:	4607      	mov	r7, r0
 8007568:	460c      	mov	r4, r1
 800756a:	461e      	mov	r6, r3
 800756c:	f101 0c14 	add.w	ip, r1, #20
 8007570:	2000      	movs	r0, #0
 8007572:	f8dc 3000 	ldr.w	r3, [ip]
 8007576:	b299      	uxth	r1, r3
 8007578:	fb02 6101 	mla	r1, r2, r1, r6
 800757c:	0c1e      	lsrs	r6, r3, #16
 800757e:	0c0b      	lsrs	r3, r1, #16
 8007580:	fb02 3306 	mla	r3, r2, r6, r3
 8007584:	b289      	uxth	r1, r1
 8007586:	3001      	adds	r0, #1
 8007588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800758c:	4285      	cmp	r5, r0
 800758e:	f84c 1b04 	str.w	r1, [ip], #4
 8007592:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007596:	dcec      	bgt.n	8007572 <__multadd+0x12>
 8007598:	b30e      	cbz	r6, 80075de <__multadd+0x7e>
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	42ab      	cmp	r3, r5
 800759e:	dc19      	bgt.n	80075d4 <__multadd+0x74>
 80075a0:	6861      	ldr	r1, [r4, #4]
 80075a2:	4638      	mov	r0, r7
 80075a4:	3101      	adds	r1, #1
 80075a6:	f7ff ff79 	bl	800749c <_Balloc>
 80075aa:	4680      	mov	r8, r0
 80075ac:	b928      	cbnz	r0, 80075ba <__multadd+0x5a>
 80075ae:	4602      	mov	r2, r0
 80075b0:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <__multadd+0x84>)
 80075b2:	480d      	ldr	r0, [pc, #52]	; (80075e8 <__multadd+0x88>)
 80075b4:	21ba      	movs	r1, #186	; 0xba
 80075b6:	f001 fcf7 	bl	8008fa8 <__assert_func>
 80075ba:	6922      	ldr	r2, [r4, #16]
 80075bc:	3202      	adds	r2, #2
 80075be:	f104 010c 	add.w	r1, r4, #12
 80075c2:	0092      	lsls	r2, r2, #2
 80075c4:	300c      	adds	r0, #12
 80075c6:	f7ff f88e 	bl	80066e6 <memcpy>
 80075ca:	4621      	mov	r1, r4
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff ffa5 	bl	800751c <_Bfree>
 80075d2:	4644      	mov	r4, r8
 80075d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075d8:	3501      	adds	r5, #1
 80075da:	615e      	str	r6, [r3, #20]
 80075dc:	6125      	str	r5, [r4, #16]
 80075de:	4620      	mov	r0, r4
 80075e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e4:	080166c5 	.word	0x080166c5
 80075e8:	080166d6 	.word	0x080166d6

080075ec <__s2b>:
 80075ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f0:	460c      	mov	r4, r1
 80075f2:	4615      	mov	r5, r2
 80075f4:	461f      	mov	r7, r3
 80075f6:	2209      	movs	r2, #9
 80075f8:	3308      	adds	r3, #8
 80075fa:	4606      	mov	r6, r0
 80075fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007600:	2100      	movs	r1, #0
 8007602:	2201      	movs	r2, #1
 8007604:	429a      	cmp	r2, r3
 8007606:	db09      	blt.n	800761c <__s2b+0x30>
 8007608:	4630      	mov	r0, r6
 800760a:	f7ff ff47 	bl	800749c <_Balloc>
 800760e:	b940      	cbnz	r0, 8007622 <__s2b+0x36>
 8007610:	4602      	mov	r2, r0
 8007612:	4b19      	ldr	r3, [pc, #100]	; (8007678 <__s2b+0x8c>)
 8007614:	4819      	ldr	r0, [pc, #100]	; (800767c <__s2b+0x90>)
 8007616:	21d3      	movs	r1, #211	; 0xd3
 8007618:	f001 fcc6 	bl	8008fa8 <__assert_func>
 800761c:	0052      	lsls	r2, r2, #1
 800761e:	3101      	adds	r1, #1
 8007620:	e7f0      	b.n	8007604 <__s2b+0x18>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	6143      	str	r3, [r0, #20]
 8007626:	2d09      	cmp	r5, #9
 8007628:	f04f 0301 	mov.w	r3, #1
 800762c:	6103      	str	r3, [r0, #16]
 800762e:	dd16      	ble.n	800765e <__s2b+0x72>
 8007630:	f104 0909 	add.w	r9, r4, #9
 8007634:	46c8      	mov	r8, r9
 8007636:	442c      	add	r4, r5
 8007638:	f818 3b01 	ldrb.w	r3, [r8], #1
 800763c:	4601      	mov	r1, r0
 800763e:	3b30      	subs	r3, #48	; 0x30
 8007640:	220a      	movs	r2, #10
 8007642:	4630      	mov	r0, r6
 8007644:	f7ff ff8c 	bl	8007560 <__multadd>
 8007648:	45a0      	cmp	r8, r4
 800764a:	d1f5      	bne.n	8007638 <__s2b+0x4c>
 800764c:	f1a5 0408 	sub.w	r4, r5, #8
 8007650:	444c      	add	r4, r9
 8007652:	1b2d      	subs	r5, r5, r4
 8007654:	1963      	adds	r3, r4, r5
 8007656:	42bb      	cmp	r3, r7
 8007658:	db04      	blt.n	8007664 <__s2b+0x78>
 800765a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800765e:	340a      	adds	r4, #10
 8007660:	2509      	movs	r5, #9
 8007662:	e7f6      	b.n	8007652 <__s2b+0x66>
 8007664:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007668:	4601      	mov	r1, r0
 800766a:	3b30      	subs	r3, #48	; 0x30
 800766c:	220a      	movs	r2, #10
 800766e:	4630      	mov	r0, r6
 8007670:	f7ff ff76 	bl	8007560 <__multadd>
 8007674:	e7ee      	b.n	8007654 <__s2b+0x68>
 8007676:	bf00      	nop
 8007678:	080166c5 	.word	0x080166c5
 800767c:	080166d6 	.word	0x080166d6

08007680 <__hi0bits>:
 8007680:	0c03      	lsrs	r3, r0, #16
 8007682:	041b      	lsls	r3, r3, #16
 8007684:	b9d3      	cbnz	r3, 80076bc <__hi0bits+0x3c>
 8007686:	0400      	lsls	r0, r0, #16
 8007688:	2310      	movs	r3, #16
 800768a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800768e:	bf04      	itt	eq
 8007690:	0200      	lsleq	r0, r0, #8
 8007692:	3308      	addeq	r3, #8
 8007694:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007698:	bf04      	itt	eq
 800769a:	0100      	lsleq	r0, r0, #4
 800769c:	3304      	addeq	r3, #4
 800769e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076a2:	bf04      	itt	eq
 80076a4:	0080      	lsleq	r0, r0, #2
 80076a6:	3302      	addeq	r3, #2
 80076a8:	2800      	cmp	r0, #0
 80076aa:	db05      	blt.n	80076b8 <__hi0bits+0x38>
 80076ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076b0:	f103 0301 	add.w	r3, r3, #1
 80076b4:	bf08      	it	eq
 80076b6:	2320      	moveq	r3, #32
 80076b8:	4618      	mov	r0, r3
 80076ba:	4770      	bx	lr
 80076bc:	2300      	movs	r3, #0
 80076be:	e7e4      	b.n	800768a <__hi0bits+0xa>

080076c0 <__lo0bits>:
 80076c0:	6803      	ldr	r3, [r0, #0]
 80076c2:	f013 0207 	ands.w	r2, r3, #7
 80076c6:	d00c      	beq.n	80076e2 <__lo0bits+0x22>
 80076c8:	07d9      	lsls	r1, r3, #31
 80076ca:	d422      	bmi.n	8007712 <__lo0bits+0x52>
 80076cc:	079a      	lsls	r2, r3, #30
 80076ce:	bf49      	itett	mi
 80076d0:	085b      	lsrmi	r3, r3, #1
 80076d2:	089b      	lsrpl	r3, r3, #2
 80076d4:	6003      	strmi	r3, [r0, #0]
 80076d6:	2201      	movmi	r2, #1
 80076d8:	bf5c      	itt	pl
 80076da:	6003      	strpl	r3, [r0, #0]
 80076dc:	2202      	movpl	r2, #2
 80076de:	4610      	mov	r0, r2
 80076e0:	4770      	bx	lr
 80076e2:	b299      	uxth	r1, r3
 80076e4:	b909      	cbnz	r1, 80076ea <__lo0bits+0x2a>
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	2210      	movs	r2, #16
 80076ea:	b2d9      	uxtb	r1, r3
 80076ec:	b909      	cbnz	r1, 80076f2 <__lo0bits+0x32>
 80076ee:	3208      	adds	r2, #8
 80076f0:	0a1b      	lsrs	r3, r3, #8
 80076f2:	0719      	lsls	r1, r3, #28
 80076f4:	bf04      	itt	eq
 80076f6:	091b      	lsreq	r3, r3, #4
 80076f8:	3204      	addeq	r2, #4
 80076fa:	0799      	lsls	r1, r3, #30
 80076fc:	bf04      	itt	eq
 80076fe:	089b      	lsreq	r3, r3, #2
 8007700:	3202      	addeq	r2, #2
 8007702:	07d9      	lsls	r1, r3, #31
 8007704:	d403      	bmi.n	800770e <__lo0bits+0x4e>
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	f102 0201 	add.w	r2, r2, #1
 800770c:	d003      	beq.n	8007716 <__lo0bits+0x56>
 800770e:	6003      	str	r3, [r0, #0]
 8007710:	e7e5      	b.n	80076de <__lo0bits+0x1e>
 8007712:	2200      	movs	r2, #0
 8007714:	e7e3      	b.n	80076de <__lo0bits+0x1e>
 8007716:	2220      	movs	r2, #32
 8007718:	e7e1      	b.n	80076de <__lo0bits+0x1e>
	...

0800771c <__i2b>:
 800771c:	b510      	push	{r4, lr}
 800771e:	460c      	mov	r4, r1
 8007720:	2101      	movs	r1, #1
 8007722:	f7ff febb 	bl	800749c <_Balloc>
 8007726:	4602      	mov	r2, r0
 8007728:	b928      	cbnz	r0, 8007736 <__i2b+0x1a>
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <__i2b+0x24>)
 800772c:	4805      	ldr	r0, [pc, #20]	; (8007744 <__i2b+0x28>)
 800772e:	f240 1145 	movw	r1, #325	; 0x145
 8007732:	f001 fc39 	bl	8008fa8 <__assert_func>
 8007736:	2301      	movs	r3, #1
 8007738:	6144      	str	r4, [r0, #20]
 800773a:	6103      	str	r3, [r0, #16]
 800773c:	bd10      	pop	{r4, pc}
 800773e:	bf00      	nop
 8007740:	080166c5 	.word	0x080166c5
 8007744:	080166d6 	.word	0x080166d6

08007748 <__multiply>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	4691      	mov	r9, r2
 800774e:	690a      	ldr	r2, [r1, #16]
 8007750:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007754:	429a      	cmp	r2, r3
 8007756:	bfb8      	it	lt
 8007758:	460b      	movlt	r3, r1
 800775a:	460c      	mov	r4, r1
 800775c:	bfbc      	itt	lt
 800775e:	464c      	movlt	r4, r9
 8007760:	4699      	movlt	r9, r3
 8007762:	6927      	ldr	r7, [r4, #16]
 8007764:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007768:	68a3      	ldr	r3, [r4, #8]
 800776a:	6861      	ldr	r1, [r4, #4]
 800776c:	eb07 060a 	add.w	r6, r7, sl
 8007770:	42b3      	cmp	r3, r6
 8007772:	b085      	sub	sp, #20
 8007774:	bfb8      	it	lt
 8007776:	3101      	addlt	r1, #1
 8007778:	f7ff fe90 	bl	800749c <_Balloc>
 800777c:	b930      	cbnz	r0, 800778c <__multiply+0x44>
 800777e:	4602      	mov	r2, r0
 8007780:	4b44      	ldr	r3, [pc, #272]	; (8007894 <__multiply+0x14c>)
 8007782:	4845      	ldr	r0, [pc, #276]	; (8007898 <__multiply+0x150>)
 8007784:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007788:	f001 fc0e 	bl	8008fa8 <__assert_func>
 800778c:	f100 0514 	add.w	r5, r0, #20
 8007790:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007794:	462b      	mov	r3, r5
 8007796:	2200      	movs	r2, #0
 8007798:	4543      	cmp	r3, r8
 800779a:	d321      	bcc.n	80077e0 <__multiply+0x98>
 800779c:	f104 0314 	add.w	r3, r4, #20
 80077a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077a4:	f109 0314 	add.w	r3, r9, #20
 80077a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077ac:	9202      	str	r2, [sp, #8]
 80077ae:	1b3a      	subs	r2, r7, r4
 80077b0:	3a15      	subs	r2, #21
 80077b2:	f022 0203 	bic.w	r2, r2, #3
 80077b6:	3204      	adds	r2, #4
 80077b8:	f104 0115 	add.w	r1, r4, #21
 80077bc:	428f      	cmp	r7, r1
 80077be:	bf38      	it	cc
 80077c0:	2204      	movcc	r2, #4
 80077c2:	9201      	str	r2, [sp, #4]
 80077c4:	9a02      	ldr	r2, [sp, #8]
 80077c6:	9303      	str	r3, [sp, #12]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d80c      	bhi.n	80077e6 <__multiply+0x9e>
 80077cc:	2e00      	cmp	r6, #0
 80077ce:	dd03      	ble.n	80077d8 <__multiply+0x90>
 80077d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d05b      	beq.n	8007890 <__multiply+0x148>
 80077d8:	6106      	str	r6, [r0, #16]
 80077da:	b005      	add	sp, #20
 80077dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e0:	f843 2b04 	str.w	r2, [r3], #4
 80077e4:	e7d8      	b.n	8007798 <__multiply+0x50>
 80077e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80077ea:	f1ba 0f00 	cmp.w	sl, #0
 80077ee:	d024      	beq.n	800783a <__multiply+0xf2>
 80077f0:	f104 0e14 	add.w	lr, r4, #20
 80077f4:	46a9      	mov	r9, r5
 80077f6:	f04f 0c00 	mov.w	ip, #0
 80077fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077fe:	f8d9 1000 	ldr.w	r1, [r9]
 8007802:	fa1f fb82 	uxth.w	fp, r2
 8007806:	b289      	uxth	r1, r1
 8007808:	fb0a 110b 	mla	r1, sl, fp, r1
 800780c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007810:	f8d9 2000 	ldr.w	r2, [r9]
 8007814:	4461      	add	r1, ip
 8007816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800781a:	fb0a c20b 	mla	r2, sl, fp, ip
 800781e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007822:	b289      	uxth	r1, r1
 8007824:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007828:	4577      	cmp	r7, lr
 800782a:	f849 1b04 	str.w	r1, [r9], #4
 800782e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007832:	d8e2      	bhi.n	80077fa <__multiply+0xb2>
 8007834:	9a01      	ldr	r2, [sp, #4]
 8007836:	f845 c002 	str.w	ip, [r5, r2]
 800783a:	9a03      	ldr	r2, [sp, #12]
 800783c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007840:	3304      	adds	r3, #4
 8007842:	f1b9 0f00 	cmp.w	r9, #0
 8007846:	d021      	beq.n	800788c <__multiply+0x144>
 8007848:	6829      	ldr	r1, [r5, #0]
 800784a:	f104 0c14 	add.w	ip, r4, #20
 800784e:	46ae      	mov	lr, r5
 8007850:	f04f 0a00 	mov.w	sl, #0
 8007854:	f8bc b000 	ldrh.w	fp, [ip]
 8007858:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800785c:	fb09 220b 	mla	r2, r9, fp, r2
 8007860:	4452      	add	r2, sl
 8007862:	b289      	uxth	r1, r1
 8007864:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007868:	f84e 1b04 	str.w	r1, [lr], #4
 800786c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007870:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007874:	f8be 1000 	ldrh.w	r1, [lr]
 8007878:	fb09 110a 	mla	r1, r9, sl, r1
 800787c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007880:	4567      	cmp	r7, ip
 8007882:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007886:	d8e5      	bhi.n	8007854 <__multiply+0x10c>
 8007888:	9a01      	ldr	r2, [sp, #4]
 800788a:	50a9      	str	r1, [r5, r2]
 800788c:	3504      	adds	r5, #4
 800788e:	e799      	b.n	80077c4 <__multiply+0x7c>
 8007890:	3e01      	subs	r6, #1
 8007892:	e79b      	b.n	80077cc <__multiply+0x84>
 8007894:	080166c5 	.word	0x080166c5
 8007898:	080166d6 	.word	0x080166d6

0800789c <__pow5mult>:
 800789c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a0:	4615      	mov	r5, r2
 80078a2:	f012 0203 	ands.w	r2, r2, #3
 80078a6:	4606      	mov	r6, r0
 80078a8:	460f      	mov	r7, r1
 80078aa:	d007      	beq.n	80078bc <__pow5mult+0x20>
 80078ac:	4c25      	ldr	r4, [pc, #148]	; (8007944 <__pow5mult+0xa8>)
 80078ae:	3a01      	subs	r2, #1
 80078b0:	2300      	movs	r3, #0
 80078b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078b6:	f7ff fe53 	bl	8007560 <__multadd>
 80078ba:	4607      	mov	r7, r0
 80078bc:	10ad      	asrs	r5, r5, #2
 80078be:	d03d      	beq.n	800793c <__pow5mult+0xa0>
 80078c0:	69f4      	ldr	r4, [r6, #28]
 80078c2:	b97c      	cbnz	r4, 80078e4 <__pow5mult+0x48>
 80078c4:	2010      	movs	r0, #16
 80078c6:	f7fd fdcb 	bl	8005460 <malloc>
 80078ca:	4602      	mov	r2, r0
 80078cc:	61f0      	str	r0, [r6, #28]
 80078ce:	b928      	cbnz	r0, 80078dc <__pow5mult+0x40>
 80078d0:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <__pow5mult+0xac>)
 80078d2:	481e      	ldr	r0, [pc, #120]	; (800794c <__pow5mult+0xb0>)
 80078d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80078d8:	f001 fb66 	bl	8008fa8 <__assert_func>
 80078dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078e0:	6004      	str	r4, [r0, #0]
 80078e2:	60c4      	str	r4, [r0, #12]
 80078e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80078e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078ec:	b94c      	cbnz	r4, 8007902 <__pow5mult+0x66>
 80078ee:	f240 2171 	movw	r1, #625	; 0x271
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7ff ff12 	bl	800771c <__i2b>
 80078f8:	2300      	movs	r3, #0
 80078fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80078fe:	4604      	mov	r4, r0
 8007900:	6003      	str	r3, [r0, #0]
 8007902:	f04f 0900 	mov.w	r9, #0
 8007906:	07eb      	lsls	r3, r5, #31
 8007908:	d50a      	bpl.n	8007920 <__pow5mult+0x84>
 800790a:	4639      	mov	r1, r7
 800790c:	4622      	mov	r2, r4
 800790e:	4630      	mov	r0, r6
 8007910:	f7ff ff1a 	bl	8007748 <__multiply>
 8007914:	4639      	mov	r1, r7
 8007916:	4680      	mov	r8, r0
 8007918:	4630      	mov	r0, r6
 800791a:	f7ff fdff 	bl	800751c <_Bfree>
 800791e:	4647      	mov	r7, r8
 8007920:	106d      	asrs	r5, r5, #1
 8007922:	d00b      	beq.n	800793c <__pow5mult+0xa0>
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	b938      	cbnz	r0, 8007938 <__pow5mult+0x9c>
 8007928:	4622      	mov	r2, r4
 800792a:	4621      	mov	r1, r4
 800792c:	4630      	mov	r0, r6
 800792e:	f7ff ff0b 	bl	8007748 <__multiply>
 8007932:	6020      	str	r0, [r4, #0]
 8007934:	f8c0 9000 	str.w	r9, [r0]
 8007938:	4604      	mov	r4, r0
 800793a:	e7e4      	b.n	8007906 <__pow5mult+0x6a>
 800793c:	4638      	mov	r0, r7
 800793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007942:	bf00      	nop
 8007944:	08016820 	.word	0x08016820
 8007948:	08016656 	.word	0x08016656
 800794c:	080166d6 	.word	0x080166d6

08007950 <__lshift>:
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	460c      	mov	r4, r1
 8007956:	6849      	ldr	r1, [r1, #4]
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800795e:	68a3      	ldr	r3, [r4, #8]
 8007960:	4607      	mov	r7, r0
 8007962:	4691      	mov	r9, r2
 8007964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007968:	f108 0601 	add.w	r6, r8, #1
 800796c:	42b3      	cmp	r3, r6
 800796e:	db0b      	blt.n	8007988 <__lshift+0x38>
 8007970:	4638      	mov	r0, r7
 8007972:	f7ff fd93 	bl	800749c <_Balloc>
 8007976:	4605      	mov	r5, r0
 8007978:	b948      	cbnz	r0, 800798e <__lshift+0x3e>
 800797a:	4602      	mov	r2, r0
 800797c:	4b28      	ldr	r3, [pc, #160]	; (8007a20 <__lshift+0xd0>)
 800797e:	4829      	ldr	r0, [pc, #164]	; (8007a24 <__lshift+0xd4>)
 8007980:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007984:	f001 fb10 	bl	8008fa8 <__assert_func>
 8007988:	3101      	adds	r1, #1
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	e7ee      	b.n	800796c <__lshift+0x1c>
 800798e:	2300      	movs	r3, #0
 8007990:	f100 0114 	add.w	r1, r0, #20
 8007994:	f100 0210 	add.w	r2, r0, #16
 8007998:	4618      	mov	r0, r3
 800799a:	4553      	cmp	r3, sl
 800799c:	db33      	blt.n	8007a06 <__lshift+0xb6>
 800799e:	6920      	ldr	r0, [r4, #16]
 80079a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079a4:	f104 0314 	add.w	r3, r4, #20
 80079a8:	f019 091f 	ands.w	r9, r9, #31
 80079ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079b4:	d02b      	beq.n	8007a0e <__lshift+0xbe>
 80079b6:	f1c9 0e20 	rsb	lr, r9, #32
 80079ba:	468a      	mov	sl, r1
 80079bc:	2200      	movs	r2, #0
 80079be:	6818      	ldr	r0, [r3, #0]
 80079c0:	fa00 f009 	lsl.w	r0, r0, r9
 80079c4:	4310      	orrs	r0, r2
 80079c6:	f84a 0b04 	str.w	r0, [sl], #4
 80079ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ce:	459c      	cmp	ip, r3
 80079d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80079d4:	d8f3      	bhi.n	80079be <__lshift+0x6e>
 80079d6:	ebac 0304 	sub.w	r3, ip, r4
 80079da:	3b15      	subs	r3, #21
 80079dc:	f023 0303 	bic.w	r3, r3, #3
 80079e0:	3304      	adds	r3, #4
 80079e2:	f104 0015 	add.w	r0, r4, #21
 80079e6:	4584      	cmp	ip, r0
 80079e8:	bf38      	it	cc
 80079ea:	2304      	movcc	r3, #4
 80079ec:	50ca      	str	r2, [r1, r3]
 80079ee:	b10a      	cbz	r2, 80079f4 <__lshift+0xa4>
 80079f0:	f108 0602 	add.w	r6, r8, #2
 80079f4:	3e01      	subs	r6, #1
 80079f6:	4638      	mov	r0, r7
 80079f8:	612e      	str	r6, [r5, #16]
 80079fa:	4621      	mov	r1, r4
 80079fc:	f7ff fd8e 	bl	800751c <_Bfree>
 8007a00:	4628      	mov	r0, r5
 8007a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a06:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	e7c5      	b.n	800799a <__lshift+0x4a>
 8007a0e:	3904      	subs	r1, #4
 8007a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a14:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a18:	459c      	cmp	ip, r3
 8007a1a:	d8f9      	bhi.n	8007a10 <__lshift+0xc0>
 8007a1c:	e7ea      	b.n	80079f4 <__lshift+0xa4>
 8007a1e:	bf00      	nop
 8007a20:	080166c5 	.word	0x080166c5
 8007a24:	080166d6 	.word	0x080166d6

08007a28 <__mcmp>:
 8007a28:	b530      	push	{r4, r5, lr}
 8007a2a:	6902      	ldr	r2, [r0, #16]
 8007a2c:	690c      	ldr	r4, [r1, #16]
 8007a2e:	1b12      	subs	r2, r2, r4
 8007a30:	d10e      	bne.n	8007a50 <__mcmp+0x28>
 8007a32:	f100 0314 	add.w	r3, r0, #20
 8007a36:	3114      	adds	r1, #20
 8007a38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a48:	42a5      	cmp	r5, r4
 8007a4a:	d003      	beq.n	8007a54 <__mcmp+0x2c>
 8007a4c:	d305      	bcc.n	8007a5a <__mcmp+0x32>
 8007a4e:	2201      	movs	r2, #1
 8007a50:	4610      	mov	r0, r2
 8007a52:	bd30      	pop	{r4, r5, pc}
 8007a54:	4283      	cmp	r3, r0
 8007a56:	d3f3      	bcc.n	8007a40 <__mcmp+0x18>
 8007a58:	e7fa      	b.n	8007a50 <__mcmp+0x28>
 8007a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5e:	e7f7      	b.n	8007a50 <__mcmp+0x28>

08007a60 <__mdiff>:
 8007a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	460c      	mov	r4, r1
 8007a66:	4606      	mov	r6, r0
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	4690      	mov	r8, r2
 8007a6e:	f7ff ffdb 	bl	8007a28 <__mcmp>
 8007a72:	1e05      	subs	r5, r0, #0
 8007a74:	d110      	bne.n	8007a98 <__mdiff+0x38>
 8007a76:	4629      	mov	r1, r5
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f7ff fd0f 	bl	800749c <_Balloc>
 8007a7e:	b930      	cbnz	r0, 8007a8e <__mdiff+0x2e>
 8007a80:	4b3a      	ldr	r3, [pc, #232]	; (8007b6c <__mdiff+0x10c>)
 8007a82:	4602      	mov	r2, r0
 8007a84:	f240 2137 	movw	r1, #567	; 0x237
 8007a88:	4839      	ldr	r0, [pc, #228]	; (8007b70 <__mdiff+0x110>)
 8007a8a:	f001 fa8d 	bl	8008fa8 <__assert_func>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	bfa4      	itt	ge
 8007a9a:	4643      	movge	r3, r8
 8007a9c:	46a0      	movge	r8, r4
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007aa4:	bfa6      	itte	ge
 8007aa6:	461c      	movge	r4, r3
 8007aa8:	2500      	movge	r5, #0
 8007aaa:	2501      	movlt	r5, #1
 8007aac:	f7ff fcf6 	bl	800749c <_Balloc>
 8007ab0:	b920      	cbnz	r0, 8007abc <__mdiff+0x5c>
 8007ab2:	4b2e      	ldr	r3, [pc, #184]	; (8007b6c <__mdiff+0x10c>)
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	f240 2145 	movw	r1, #581	; 0x245
 8007aba:	e7e5      	b.n	8007a88 <__mdiff+0x28>
 8007abc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007ac0:	6926      	ldr	r6, [r4, #16]
 8007ac2:	60c5      	str	r5, [r0, #12]
 8007ac4:	f104 0914 	add.w	r9, r4, #20
 8007ac8:	f108 0514 	add.w	r5, r8, #20
 8007acc:	f100 0e14 	add.w	lr, r0, #20
 8007ad0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ad4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ad8:	f108 0210 	add.w	r2, r8, #16
 8007adc:	46f2      	mov	sl, lr
 8007ade:	2100      	movs	r1, #0
 8007ae0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ae4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ae8:	fa11 f88b 	uxtah	r8, r1, fp
 8007aec:	b299      	uxth	r1, r3
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	eba8 0801 	sub.w	r8, r8, r1
 8007af4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007af8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007afc:	fa1f f888 	uxth.w	r8, r8
 8007b00:	1419      	asrs	r1, r3, #16
 8007b02:	454e      	cmp	r6, r9
 8007b04:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b08:	f84a 3b04 	str.w	r3, [sl], #4
 8007b0c:	d8e8      	bhi.n	8007ae0 <__mdiff+0x80>
 8007b0e:	1b33      	subs	r3, r6, r4
 8007b10:	3b15      	subs	r3, #21
 8007b12:	f023 0303 	bic.w	r3, r3, #3
 8007b16:	3304      	adds	r3, #4
 8007b18:	3415      	adds	r4, #21
 8007b1a:	42a6      	cmp	r6, r4
 8007b1c:	bf38      	it	cc
 8007b1e:	2304      	movcc	r3, #4
 8007b20:	441d      	add	r5, r3
 8007b22:	4473      	add	r3, lr
 8007b24:	469e      	mov	lr, r3
 8007b26:	462e      	mov	r6, r5
 8007b28:	4566      	cmp	r6, ip
 8007b2a:	d30e      	bcc.n	8007b4a <__mdiff+0xea>
 8007b2c:	f10c 0203 	add.w	r2, ip, #3
 8007b30:	1b52      	subs	r2, r2, r5
 8007b32:	f022 0203 	bic.w	r2, r2, #3
 8007b36:	3d03      	subs	r5, #3
 8007b38:	45ac      	cmp	ip, r5
 8007b3a:	bf38      	it	cc
 8007b3c:	2200      	movcc	r2, #0
 8007b3e:	4413      	add	r3, r2
 8007b40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007b44:	b17a      	cbz	r2, 8007b66 <__mdiff+0x106>
 8007b46:	6107      	str	r7, [r0, #16]
 8007b48:	e7a4      	b.n	8007a94 <__mdiff+0x34>
 8007b4a:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b4e:	fa11 f288 	uxtah	r2, r1, r8
 8007b52:	1414      	asrs	r4, r2, #16
 8007b54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b58:	b292      	uxth	r2, r2
 8007b5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007b5e:	f84e 2b04 	str.w	r2, [lr], #4
 8007b62:	1421      	asrs	r1, r4, #16
 8007b64:	e7e0      	b.n	8007b28 <__mdiff+0xc8>
 8007b66:	3f01      	subs	r7, #1
 8007b68:	e7ea      	b.n	8007b40 <__mdiff+0xe0>
 8007b6a:	bf00      	nop
 8007b6c:	080166c5 	.word	0x080166c5
 8007b70:	080166d6 	.word	0x080166d6

08007b74 <__ulp>:
 8007b74:	b082      	sub	sp, #8
 8007b76:	ed8d 0b00 	vstr	d0, [sp]
 8007b7a:	9a01      	ldr	r2, [sp, #4]
 8007b7c:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <__ulp+0x48>)
 8007b7e:	4013      	ands	r3, r2
 8007b80:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	dc08      	bgt.n	8007b9a <__ulp+0x26>
 8007b88:	425b      	negs	r3, r3
 8007b8a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007b8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007b92:	da04      	bge.n	8007b9e <__ulp+0x2a>
 8007b94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b98:	4113      	asrs	r3, r2
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	e008      	b.n	8007bb0 <__ulp+0x3c>
 8007b9e:	f1a2 0314 	sub.w	r3, r2, #20
 8007ba2:	2b1e      	cmp	r3, #30
 8007ba4:	bfda      	itte	le
 8007ba6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007baa:	40da      	lsrle	r2, r3
 8007bac:	2201      	movgt	r2, #1
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	ec41 0b10 	vmov	d0, r0, r1
 8007bb8:	b002      	add	sp, #8
 8007bba:	4770      	bx	lr
 8007bbc:	7ff00000 	.word	0x7ff00000

08007bc0 <__b2d>:
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	6906      	ldr	r6, [r0, #16]
 8007bc6:	f100 0814 	add.w	r8, r0, #20
 8007bca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007bce:	1f37      	subs	r7, r6, #4
 8007bd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f7ff fd53 	bl	8007680 <__hi0bits>
 8007bda:	f1c0 0320 	rsb	r3, r0, #32
 8007bde:	280a      	cmp	r0, #10
 8007be0:	600b      	str	r3, [r1, #0]
 8007be2:	491b      	ldr	r1, [pc, #108]	; (8007c50 <__b2d+0x90>)
 8007be4:	dc15      	bgt.n	8007c12 <__b2d+0x52>
 8007be6:	f1c0 0c0b 	rsb	ip, r0, #11
 8007bea:	fa22 f30c 	lsr.w	r3, r2, ip
 8007bee:	45b8      	cmp	r8, r7
 8007bf0:	ea43 0501 	orr.w	r5, r3, r1
 8007bf4:	bf34      	ite	cc
 8007bf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007bfa:	2300      	movcs	r3, #0
 8007bfc:	3015      	adds	r0, #21
 8007bfe:	fa02 f000 	lsl.w	r0, r2, r0
 8007c02:	fa23 f30c 	lsr.w	r3, r3, ip
 8007c06:	4303      	orrs	r3, r0
 8007c08:	461c      	mov	r4, r3
 8007c0a:	ec45 4b10 	vmov	d0, r4, r5
 8007c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c12:	45b8      	cmp	r8, r7
 8007c14:	bf3a      	itte	cc
 8007c16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007c1a:	f1a6 0708 	subcc.w	r7, r6, #8
 8007c1e:	2300      	movcs	r3, #0
 8007c20:	380b      	subs	r0, #11
 8007c22:	d012      	beq.n	8007c4a <__b2d+0x8a>
 8007c24:	f1c0 0120 	rsb	r1, r0, #32
 8007c28:	fa23 f401 	lsr.w	r4, r3, r1
 8007c2c:	4082      	lsls	r2, r0
 8007c2e:	4322      	orrs	r2, r4
 8007c30:	4547      	cmp	r7, r8
 8007c32:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007c36:	bf8c      	ite	hi
 8007c38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007c3c:	2200      	movls	r2, #0
 8007c3e:	4083      	lsls	r3, r0
 8007c40:	40ca      	lsrs	r2, r1
 8007c42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c46:	4313      	orrs	r3, r2
 8007c48:	e7de      	b.n	8007c08 <__b2d+0x48>
 8007c4a:	ea42 0501 	orr.w	r5, r2, r1
 8007c4e:	e7db      	b.n	8007c08 <__b2d+0x48>
 8007c50:	3ff00000 	.word	0x3ff00000

08007c54 <__d2b>:
 8007c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c58:	460f      	mov	r7, r1
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	ec59 8b10 	vmov	r8, r9, d0
 8007c60:	4616      	mov	r6, r2
 8007c62:	f7ff fc1b 	bl	800749c <_Balloc>
 8007c66:	4604      	mov	r4, r0
 8007c68:	b930      	cbnz	r0, 8007c78 <__d2b+0x24>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <__d2b+0xac>)
 8007c6e:	4825      	ldr	r0, [pc, #148]	; (8007d04 <__d2b+0xb0>)
 8007c70:	f240 310f 	movw	r1, #783	; 0x30f
 8007c74:	f001 f998 	bl	8008fa8 <__assert_func>
 8007c78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c80:	bb2d      	cbnz	r5, 8007cce <__d2b+0x7a>
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	f1b8 0300 	subs.w	r3, r8, #0
 8007c88:	d026      	beq.n	8007cd8 <__d2b+0x84>
 8007c8a:	4668      	mov	r0, sp
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	f7ff fd17 	bl	80076c0 <__lo0bits>
 8007c92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c96:	b1e8      	cbz	r0, 8007cd4 <__d2b+0x80>
 8007c98:	f1c0 0320 	rsb	r3, r0, #32
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	430b      	orrs	r3, r1
 8007ca2:	40c2      	lsrs	r2, r0
 8007ca4:	6163      	str	r3, [r4, #20]
 8007ca6:	9201      	str	r2, [sp, #4]
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	61a3      	str	r3, [r4, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf14      	ite	ne
 8007cb0:	2202      	movne	r2, #2
 8007cb2:	2201      	moveq	r2, #1
 8007cb4:	6122      	str	r2, [r4, #16]
 8007cb6:	b1bd      	cbz	r5, 8007ce8 <__d2b+0x94>
 8007cb8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cbc:	4405      	add	r5, r0
 8007cbe:	603d      	str	r5, [r7, #0]
 8007cc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cc4:	6030      	str	r0, [r6, #0]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	b003      	add	sp, #12
 8007cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cd2:	e7d6      	b.n	8007c82 <__d2b+0x2e>
 8007cd4:	6161      	str	r1, [r4, #20]
 8007cd6:	e7e7      	b.n	8007ca8 <__d2b+0x54>
 8007cd8:	a801      	add	r0, sp, #4
 8007cda:	f7ff fcf1 	bl	80076c0 <__lo0bits>
 8007cde:	9b01      	ldr	r3, [sp, #4]
 8007ce0:	6163      	str	r3, [r4, #20]
 8007ce2:	3020      	adds	r0, #32
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	e7e5      	b.n	8007cb4 <__d2b+0x60>
 8007ce8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007cec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007cf0:	6038      	str	r0, [r7, #0]
 8007cf2:	6918      	ldr	r0, [r3, #16]
 8007cf4:	f7ff fcc4 	bl	8007680 <__hi0bits>
 8007cf8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cfc:	e7e2      	b.n	8007cc4 <__d2b+0x70>
 8007cfe:	bf00      	nop
 8007d00:	080166c5 	.word	0x080166c5
 8007d04:	080166d6 	.word	0x080166d6

08007d08 <__ratio>:
 8007d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4688      	mov	r8, r1
 8007d0e:	4669      	mov	r1, sp
 8007d10:	4681      	mov	r9, r0
 8007d12:	f7ff ff55 	bl	8007bc0 <__b2d>
 8007d16:	a901      	add	r1, sp, #4
 8007d18:	4640      	mov	r0, r8
 8007d1a:	ec55 4b10 	vmov	r4, r5, d0
 8007d1e:	f7ff ff4f 	bl	8007bc0 <__b2d>
 8007d22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d2a:	eba3 0c02 	sub.w	ip, r3, r2
 8007d2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d32:	1a9b      	subs	r3, r3, r2
 8007d34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d38:	ec51 0b10 	vmov	r0, r1, d0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bfd6      	itet	le
 8007d40:	460a      	movle	r2, r1
 8007d42:	462a      	movgt	r2, r5
 8007d44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d48:	468b      	mov	fp, r1
 8007d4a:	462f      	mov	r7, r5
 8007d4c:	bfd4      	ite	le
 8007d4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007d52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007d56:	4620      	mov	r0, r4
 8007d58:	ee10 2a10 	vmov	r2, s0
 8007d5c:	465b      	mov	r3, fp
 8007d5e:	4639      	mov	r1, r7
 8007d60:	f7f8 fd7c 	bl	800085c <__aeabi_ddiv>
 8007d64:	ec41 0b10 	vmov	d0, r0, r1
 8007d68:	b003      	add	sp, #12
 8007d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d6e <__copybits>:
 8007d6e:	3901      	subs	r1, #1
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	1149      	asrs	r1, r1, #5
 8007d74:	6914      	ldr	r4, [r2, #16]
 8007d76:	3101      	adds	r1, #1
 8007d78:	f102 0314 	add.w	r3, r2, #20
 8007d7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d84:	1f05      	subs	r5, r0, #4
 8007d86:	42a3      	cmp	r3, r4
 8007d88:	d30c      	bcc.n	8007da4 <__copybits+0x36>
 8007d8a:	1aa3      	subs	r3, r4, r2
 8007d8c:	3b11      	subs	r3, #17
 8007d8e:	f023 0303 	bic.w	r3, r3, #3
 8007d92:	3211      	adds	r2, #17
 8007d94:	42a2      	cmp	r2, r4
 8007d96:	bf88      	it	hi
 8007d98:	2300      	movhi	r3, #0
 8007d9a:	4418      	add	r0, r3
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	4288      	cmp	r0, r1
 8007da0:	d305      	bcc.n	8007dae <__copybits+0x40>
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	f853 6b04 	ldr.w	r6, [r3], #4
 8007da8:	f845 6f04 	str.w	r6, [r5, #4]!
 8007dac:	e7eb      	b.n	8007d86 <__copybits+0x18>
 8007dae:	f840 3b04 	str.w	r3, [r0], #4
 8007db2:	e7f4      	b.n	8007d9e <__copybits+0x30>

08007db4 <__any_on>:
 8007db4:	f100 0214 	add.w	r2, r0, #20
 8007db8:	6900      	ldr	r0, [r0, #16]
 8007dba:	114b      	asrs	r3, r1, #5
 8007dbc:	4298      	cmp	r0, r3
 8007dbe:	b510      	push	{r4, lr}
 8007dc0:	db11      	blt.n	8007de6 <__any_on+0x32>
 8007dc2:	dd0a      	ble.n	8007dda <__any_on+0x26>
 8007dc4:	f011 011f 	ands.w	r1, r1, #31
 8007dc8:	d007      	beq.n	8007dda <__any_on+0x26>
 8007dca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007dce:	fa24 f001 	lsr.w	r0, r4, r1
 8007dd2:	fa00 f101 	lsl.w	r1, r0, r1
 8007dd6:	428c      	cmp	r4, r1
 8007dd8:	d10b      	bne.n	8007df2 <__any_on+0x3e>
 8007dda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d803      	bhi.n	8007dea <__any_on+0x36>
 8007de2:	2000      	movs	r0, #0
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	4603      	mov	r3, r0
 8007de8:	e7f7      	b.n	8007dda <__any_on+0x26>
 8007dea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dee:	2900      	cmp	r1, #0
 8007df0:	d0f5      	beq.n	8007dde <__any_on+0x2a>
 8007df2:	2001      	movs	r0, #1
 8007df4:	e7f6      	b.n	8007de4 <__any_on+0x30>

08007df6 <_malloc_usable_size_r>:
 8007df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dfa:	1f18      	subs	r0, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfbc      	itt	lt
 8007e00:	580b      	ldrlt	r3, [r1, r0]
 8007e02:	18c0      	addlt	r0, r0, r3
 8007e04:	4770      	bx	lr

08007e06 <sulp>:
 8007e06:	b570      	push	{r4, r5, r6, lr}
 8007e08:	4604      	mov	r4, r0
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	ec45 4b10 	vmov	d0, r4, r5
 8007e10:	4616      	mov	r6, r2
 8007e12:	f7ff feaf 	bl	8007b74 <__ulp>
 8007e16:	ec51 0b10 	vmov	r0, r1, d0
 8007e1a:	b17e      	cbz	r6, 8007e3c <sulp+0x36>
 8007e1c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	dd09      	ble.n	8007e3c <sulp+0x36>
 8007e28:	051b      	lsls	r3, r3, #20
 8007e2a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e2e:	2400      	movs	r4, #0
 8007e30:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e34:	4622      	mov	r2, r4
 8007e36:	462b      	mov	r3, r5
 8007e38:	f7f8 fbe6 	bl	8000608 <__aeabi_dmul>
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e40 <_strtod_l>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	ed2d 8b02 	vpush	{d8}
 8007e48:	b09b      	sub	sp, #108	; 0x6c
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8007e4e:	2200      	movs	r2, #0
 8007e50:	9216      	str	r2, [sp, #88]	; 0x58
 8007e52:	460d      	mov	r5, r1
 8007e54:	f04f 0800 	mov.w	r8, #0
 8007e58:	f04f 0900 	mov.w	r9, #0
 8007e5c:	460a      	mov	r2, r1
 8007e5e:	9215      	str	r2, [sp, #84]	; 0x54
 8007e60:	7811      	ldrb	r1, [r2, #0]
 8007e62:	292b      	cmp	r1, #43	; 0x2b
 8007e64:	d04c      	beq.n	8007f00 <_strtod_l+0xc0>
 8007e66:	d83a      	bhi.n	8007ede <_strtod_l+0x9e>
 8007e68:	290d      	cmp	r1, #13
 8007e6a:	d834      	bhi.n	8007ed6 <_strtod_l+0x96>
 8007e6c:	2908      	cmp	r1, #8
 8007e6e:	d834      	bhi.n	8007eda <_strtod_l+0x9a>
 8007e70:	2900      	cmp	r1, #0
 8007e72:	d03d      	beq.n	8007ef0 <_strtod_l+0xb0>
 8007e74:	2200      	movs	r2, #0
 8007e76:	920a      	str	r2, [sp, #40]	; 0x28
 8007e78:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007e7a:	7832      	ldrb	r2, [r6, #0]
 8007e7c:	2a30      	cmp	r2, #48	; 0x30
 8007e7e:	f040 80b4 	bne.w	8007fea <_strtod_l+0x1aa>
 8007e82:	7872      	ldrb	r2, [r6, #1]
 8007e84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007e88:	2a58      	cmp	r2, #88	; 0x58
 8007e8a:	d170      	bne.n	8007f6e <_strtod_l+0x12e>
 8007e8c:	9302      	str	r3, [sp, #8]
 8007e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	ab16      	add	r3, sp, #88	; 0x58
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	4a8e      	ldr	r2, [pc, #568]	; (80080d0 <_strtod_l+0x290>)
 8007e98:	ab17      	add	r3, sp, #92	; 0x5c
 8007e9a:	a915      	add	r1, sp, #84	; 0x54
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f001 f91f 	bl	80090e0 <__gethex>
 8007ea2:	f010 070f 	ands.w	r7, r0, #15
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	d005      	beq.n	8007eb6 <_strtod_l+0x76>
 8007eaa:	2f06      	cmp	r7, #6
 8007eac:	d12a      	bne.n	8007f04 <_strtod_l+0xc4>
 8007eae:	3601      	adds	r6, #1
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	9615      	str	r6, [sp, #84]	; 0x54
 8007eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8007eb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f040 857f 	bne.w	80089bc <_strtod_l+0xb7c>
 8007ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec0:	b1db      	cbz	r3, 8007efa <_strtod_l+0xba>
 8007ec2:	4642      	mov	r2, r8
 8007ec4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ec8:	ec43 2b10 	vmov	d0, r2, r3
 8007ecc:	b01b      	add	sp, #108	; 0x6c
 8007ece:	ecbd 8b02 	vpop	{d8}
 8007ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed6:	2920      	cmp	r1, #32
 8007ed8:	d1cc      	bne.n	8007e74 <_strtod_l+0x34>
 8007eda:	3201      	adds	r2, #1
 8007edc:	e7bf      	b.n	8007e5e <_strtod_l+0x1e>
 8007ede:	292d      	cmp	r1, #45	; 0x2d
 8007ee0:	d1c8      	bne.n	8007e74 <_strtod_l+0x34>
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	910a      	str	r1, [sp, #40]	; 0x28
 8007ee6:	1c51      	adds	r1, r2, #1
 8007ee8:	9115      	str	r1, [sp, #84]	; 0x54
 8007eea:	7852      	ldrb	r2, [r2, #1]
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	d1c3      	bne.n	8007e78 <_strtod_l+0x38>
 8007ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ef2:	9515      	str	r5, [sp, #84]	; 0x54
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f040 855f 	bne.w	80089b8 <_strtod_l+0xb78>
 8007efa:	4642      	mov	r2, r8
 8007efc:	464b      	mov	r3, r9
 8007efe:	e7e3      	b.n	8007ec8 <_strtod_l+0x88>
 8007f00:	2100      	movs	r1, #0
 8007f02:	e7ef      	b.n	8007ee4 <_strtod_l+0xa4>
 8007f04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f06:	b13a      	cbz	r2, 8007f18 <_strtod_l+0xd8>
 8007f08:	2135      	movs	r1, #53	; 0x35
 8007f0a:	a818      	add	r0, sp, #96	; 0x60
 8007f0c:	f7ff ff2f 	bl	8007d6e <__copybits>
 8007f10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f12:	4620      	mov	r0, r4
 8007f14:	f7ff fb02 	bl	800751c <_Bfree>
 8007f18:	3f01      	subs	r7, #1
 8007f1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f1c:	2f04      	cmp	r7, #4
 8007f1e:	d806      	bhi.n	8007f2e <_strtod_l+0xee>
 8007f20:	e8df f007 	tbb	[pc, r7]
 8007f24:	201d0314 	.word	0x201d0314
 8007f28:	14          	.byte	0x14
 8007f29:	00          	.byte	0x00
 8007f2a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007f2e:	05e9      	lsls	r1, r5, #23
 8007f30:	bf48      	it	mi
 8007f32:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007f36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f3a:	0d1b      	lsrs	r3, r3, #20
 8007f3c:	051b      	lsls	r3, r3, #20
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1b9      	bne.n	8007eb6 <_strtod_l+0x76>
 8007f42:	f7fe fba3 	bl	800668c <__errno>
 8007f46:	2322      	movs	r3, #34	; 0x22
 8007f48:	6003      	str	r3, [r0, #0]
 8007f4a:	e7b4      	b.n	8007eb6 <_strtod_l+0x76>
 8007f4c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007f50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f58:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007f5c:	e7e7      	b.n	8007f2e <_strtod_l+0xee>
 8007f5e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80080d8 <_strtod_l+0x298>
 8007f62:	e7e4      	b.n	8007f2e <_strtod_l+0xee>
 8007f64:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007f68:	f04f 38ff 	mov.w	r8, #4294967295
 8007f6c:	e7df      	b.n	8007f2e <_strtod_l+0xee>
 8007f6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	9215      	str	r2, [sp, #84]	; 0x54
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	2b30      	cmp	r3, #48	; 0x30
 8007f78:	d0f9      	beq.n	8007f6e <_strtod_l+0x12e>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d09b      	beq.n	8007eb6 <_strtod_l+0x76>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f04f 0a00 	mov.w	sl, #0
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f8a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007f8e:	46d3      	mov	fp, sl
 8007f90:	220a      	movs	r2, #10
 8007f92:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007f94:	7806      	ldrb	r6, [r0, #0]
 8007f96:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007f9a:	b2d9      	uxtb	r1, r3
 8007f9c:	2909      	cmp	r1, #9
 8007f9e:	d926      	bls.n	8007fee <_strtod_l+0x1ae>
 8007fa0:	494c      	ldr	r1, [pc, #304]	; (80080d4 <_strtod_l+0x294>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f000 ffe6 	bl	8008f74 <strncmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d030      	beq.n	800800e <_strtod_l+0x1ce>
 8007fac:	2000      	movs	r0, #0
 8007fae:	4632      	mov	r2, r6
 8007fb0:	9005      	str	r0, [sp, #20]
 8007fb2:	465e      	mov	r6, fp
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2a65      	cmp	r2, #101	; 0x65
 8007fb8:	d001      	beq.n	8007fbe <_strtod_l+0x17e>
 8007fba:	2a45      	cmp	r2, #69	; 0x45
 8007fbc:	d113      	bne.n	8007fe6 <_strtod_l+0x1a6>
 8007fbe:	b91e      	cbnz	r6, 8007fc8 <_strtod_l+0x188>
 8007fc0:	9a04      	ldr	r2, [sp, #16]
 8007fc2:	4302      	orrs	r2, r0
 8007fc4:	d094      	beq.n	8007ef0 <_strtod_l+0xb0>
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007fca:	1c6a      	adds	r2, r5, #1
 8007fcc:	9215      	str	r2, [sp, #84]	; 0x54
 8007fce:	786a      	ldrb	r2, [r5, #1]
 8007fd0:	2a2b      	cmp	r2, #43	; 0x2b
 8007fd2:	d074      	beq.n	80080be <_strtod_l+0x27e>
 8007fd4:	2a2d      	cmp	r2, #45	; 0x2d
 8007fd6:	d078      	beq.n	80080ca <_strtod_l+0x28a>
 8007fd8:	f04f 0c00 	mov.w	ip, #0
 8007fdc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007fe0:	2909      	cmp	r1, #9
 8007fe2:	d97f      	bls.n	80080e4 <_strtod_l+0x2a4>
 8007fe4:	9515      	str	r5, [sp, #84]	; 0x54
 8007fe6:	2700      	movs	r7, #0
 8007fe8:	e09e      	b.n	8008128 <_strtod_l+0x2e8>
 8007fea:	2300      	movs	r3, #0
 8007fec:	e7c8      	b.n	8007f80 <_strtod_l+0x140>
 8007fee:	f1bb 0f08 	cmp.w	fp, #8
 8007ff2:	bfd8      	it	le
 8007ff4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007ff6:	f100 0001 	add.w	r0, r0, #1
 8007ffa:	bfda      	itte	le
 8007ffc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008000:	9309      	strle	r3, [sp, #36]	; 0x24
 8008002:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008006:	f10b 0b01 	add.w	fp, fp, #1
 800800a:	9015      	str	r0, [sp, #84]	; 0x54
 800800c:	e7c1      	b.n	8007f92 <_strtod_l+0x152>
 800800e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	9215      	str	r2, [sp, #84]	; 0x54
 8008014:	785a      	ldrb	r2, [r3, #1]
 8008016:	f1bb 0f00 	cmp.w	fp, #0
 800801a:	d037      	beq.n	800808c <_strtod_l+0x24c>
 800801c:	9005      	str	r0, [sp, #20]
 800801e:	465e      	mov	r6, fp
 8008020:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008024:	2b09      	cmp	r3, #9
 8008026:	d912      	bls.n	800804e <_strtod_l+0x20e>
 8008028:	2301      	movs	r3, #1
 800802a:	e7c4      	b.n	8007fb6 <_strtod_l+0x176>
 800802c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	9215      	str	r2, [sp, #84]	; 0x54
 8008032:	785a      	ldrb	r2, [r3, #1]
 8008034:	3001      	adds	r0, #1
 8008036:	2a30      	cmp	r2, #48	; 0x30
 8008038:	d0f8      	beq.n	800802c <_strtod_l+0x1ec>
 800803a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800803e:	2b08      	cmp	r3, #8
 8008040:	f200 84c1 	bhi.w	80089c6 <_strtod_l+0xb86>
 8008044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008046:	9005      	str	r0, [sp, #20]
 8008048:	2000      	movs	r0, #0
 800804a:	930b      	str	r3, [sp, #44]	; 0x2c
 800804c:	4606      	mov	r6, r0
 800804e:	3a30      	subs	r2, #48	; 0x30
 8008050:	f100 0301 	add.w	r3, r0, #1
 8008054:	d014      	beq.n	8008080 <_strtod_l+0x240>
 8008056:	9905      	ldr	r1, [sp, #20]
 8008058:	4419      	add	r1, r3
 800805a:	9105      	str	r1, [sp, #20]
 800805c:	4633      	mov	r3, r6
 800805e:	eb00 0c06 	add.w	ip, r0, r6
 8008062:	210a      	movs	r1, #10
 8008064:	4563      	cmp	r3, ip
 8008066:	d113      	bne.n	8008090 <_strtod_l+0x250>
 8008068:	1833      	adds	r3, r6, r0
 800806a:	2b08      	cmp	r3, #8
 800806c:	f106 0601 	add.w	r6, r6, #1
 8008070:	4406      	add	r6, r0
 8008072:	dc1a      	bgt.n	80080aa <_strtod_l+0x26a>
 8008074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008076:	230a      	movs	r3, #10
 8008078:	fb03 2301 	mla	r3, r3, r1, r2
 800807c:	9309      	str	r3, [sp, #36]	; 0x24
 800807e:	2300      	movs	r3, #0
 8008080:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008082:	1c51      	adds	r1, r2, #1
 8008084:	9115      	str	r1, [sp, #84]	; 0x54
 8008086:	7852      	ldrb	r2, [r2, #1]
 8008088:	4618      	mov	r0, r3
 800808a:	e7c9      	b.n	8008020 <_strtod_l+0x1e0>
 800808c:	4658      	mov	r0, fp
 800808e:	e7d2      	b.n	8008036 <_strtod_l+0x1f6>
 8008090:	2b08      	cmp	r3, #8
 8008092:	f103 0301 	add.w	r3, r3, #1
 8008096:	dc03      	bgt.n	80080a0 <_strtod_l+0x260>
 8008098:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800809a:	434f      	muls	r7, r1
 800809c:	9709      	str	r7, [sp, #36]	; 0x24
 800809e:	e7e1      	b.n	8008064 <_strtod_l+0x224>
 80080a0:	2b10      	cmp	r3, #16
 80080a2:	bfd8      	it	le
 80080a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80080a8:	e7dc      	b.n	8008064 <_strtod_l+0x224>
 80080aa:	2e10      	cmp	r6, #16
 80080ac:	bfdc      	itt	le
 80080ae:	230a      	movle	r3, #10
 80080b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80080b4:	e7e3      	b.n	800807e <_strtod_l+0x23e>
 80080b6:	2300      	movs	r3, #0
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	2301      	movs	r3, #1
 80080bc:	e780      	b.n	8007fc0 <_strtod_l+0x180>
 80080be:	f04f 0c00 	mov.w	ip, #0
 80080c2:	1caa      	adds	r2, r5, #2
 80080c4:	9215      	str	r2, [sp, #84]	; 0x54
 80080c6:	78aa      	ldrb	r2, [r5, #2]
 80080c8:	e788      	b.n	8007fdc <_strtod_l+0x19c>
 80080ca:	f04f 0c01 	mov.w	ip, #1
 80080ce:	e7f8      	b.n	80080c2 <_strtod_l+0x282>
 80080d0:	08016830 	.word	0x08016830
 80080d4:	0801682c 	.word	0x0801682c
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080de:	1c51      	adds	r1, r2, #1
 80080e0:	9115      	str	r1, [sp, #84]	; 0x54
 80080e2:	7852      	ldrb	r2, [r2, #1]
 80080e4:	2a30      	cmp	r2, #48	; 0x30
 80080e6:	d0f9      	beq.n	80080dc <_strtod_l+0x29c>
 80080e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80080ec:	2908      	cmp	r1, #8
 80080ee:	f63f af7a 	bhi.w	8007fe6 <_strtod_l+0x1a6>
 80080f2:	3a30      	subs	r2, #48	; 0x30
 80080f4:	9208      	str	r2, [sp, #32]
 80080f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080f8:	920c      	str	r2, [sp, #48]	; 0x30
 80080fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080fc:	1c57      	adds	r7, r2, #1
 80080fe:	9715      	str	r7, [sp, #84]	; 0x54
 8008100:	7852      	ldrb	r2, [r2, #1]
 8008102:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008106:	f1be 0f09 	cmp.w	lr, #9
 800810a:	d938      	bls.n	800817e <_strtod_l+0x33e>
 800810c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800810e:	1a7f      	subs	r7, r7, r1
 8008110:	2f08      	cmp	r7, #8
 8008112:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008116:	dc03      	bgt.n	8008120 <_strtod_l+0x2e0>
 8008118:	9908      	ldr	r1, [sp, #32]
 800811a:	428f      	cmp	r7, r1
 800811c:	bfa8      	it	ge
 800811e:	460f      	movge	r7, r1
 8008120:	f1bc 0f00 	cmp.w	ip, #0
 8008124:	d000      	beq.n	8008128 <_strtod_l+0x2e8>
 8008126:	427f      	negs	r7, r7
 8008128:	2e00      	cmp	r6, #0
 800812a:	d14f      	bne.n	80081cc <_strtod_l+0x38c>
 800812c:	9904      	ldr	r1, [sp, #16]
 800812e:	4301      	orrs	r1, r0
 8008130:	f47f aec1 	bne.w	8007eb6 <_strtod_l+0x76>
 8008134:	2b00      	cmp	r3, #0
 8008136:	f47f aedb 	bne.w	8007ef0 <_strtod_l+0xb0>
 800813a:	2a69      	cmp	r2, #105	; 0x69
 800813c:	d029      	beq.n	8008192 <_strtod_l+0x352>
 800813e:	dc26      	bgt.n	800818e <_strtod_l+0x34e>
 8008140:	2a49      	cmp	r2, #73	; 0x49
 8008142:	d026      	beq.n	8008192 <_strtod_l+0x352>
 8008144:	2a4e      	cmp	r2, #78	; 0x4e
 8008146:	f47f aed3 	bne.w	8007ef0 <_strtod_l+0xb0>
 800814a:	499b      	ldr	r1, [pc, #620]	; (80083b8 <_strtod_l+0x578>)
 800814c:	a815      	add	r0, sp, #84	; 0x54
 800814e:	f001 fa07 	bl	8009560 <__match>
 8008152:	2800      	cmp	r0, #0
 8008154:	f43f aecc 	beq.w	8007ef0 <_strtod_l+0xb0>
 8008158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b28      	cmp	r3, #40	; 0x28
 800815e:	d12f      	bne.n	80081c0 <_strtod_l+0x380>
 8008160:	4996      	ldr	r1, [pc, #600]	; (80083bc <_strtod_l+0x57c>)
 8008162:	aa18      	add	r2, sp, #96	; 0x60
 8008164:	a815      	add	r0, sp, #84	; 0x54
 8008166:	f001 fa0f 	bl	8009588 <__hexnan>
 800816a:	2805      	cmp	r0, #5
 800816c:	d128      	bne.n	80081c0 <_strtod_l+0x380>
 800816e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008170:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008174:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008178:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800817c:	e69b      	b.n	8007eb6 <_strtod_l+0x76>
 800817e:	9f08      	ldr	r7, [sp, #32]
 8008180:	210a      	movs	r1, #10
 8008182:	fb01 2107 	mla	r1, r1, r7, r2
 8008186:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800818a:	9208      	str	r2, [sp, #32]
 800818c:	e7b5      	b.n	80080fa <_strtod_l+0x2ba>
 800818e:	2a6e      	cmp	r2, #110	; 0x6e
 8008190:	e7d9      	b.n	8008146 <_strtod_l+0x306>
 8008192:	498b      	ldr	r1, [pc, #556]	; (80083c0 <_strtod_l+0x580>)
 8008194:	a815      	add	r0, sp, #84	; 0x54
 8008196:	f001 f9e3 	bl	8009560 <__match>
 800819a:	2800      	cmp	r0, #0
 800819c:	f43f aea8 	beq.w	8007ef0 <_strtod_l+0xb0>
 80081a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a2:	4988      	ldr	r1, [pc, #544]	; (80083c4 <_strtod_l+0x584>)
 80081a4:	3b01      	subs	r3, #1
 80081a6:	a815      	add	r0, sp, #84	; 0x54
 80081a8:	9315      	str	r3, [sp, #84]	; 0x54
 80081aa:	f001 f9d9 	bl	8009560 <__match>
 80081ae:	b910      	cbnz	r0, 80081b6 <_strtod_l+0x376>
 80081b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081b2:	3301      	adds	r3, #1
 80081b4:	9315      	str	r3, [sp, #84]	; 0x54
 80081b6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80083d4 <_strtod_l+0x594>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	e67a      	b.n	8007eb6 <_strtod_l+0x76>
 80081c0:	4881      	ldr	r0, [pc, #516]	; (80083c8 <_strtod_l+0x588>)
 80081c2:	f000 fee9 	bl	8008f98 <nan>
 80081c6:	ec59 8b10 	vmov	r8, r9, d0
 80081ca:	e674      	b.n	8007eb6 <_strtod_l+0x76>
 80081cc:	9b05      	ldr	r3, [sp, #20]
 80081ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081d0:	1afb      	subs	r3, r7, r3
 80081d2:	f1bb 0f00 	cmp.w	fp, #0
 80081d6:	bf08      	it	eq
 80081d8:	46b3      	moveq	fp, r6
 80081da:	2e10      	cmp	r6, #16
 80081dc:	9308      	str	r3, [sp, #32]
 80081de:	4635      	mov	r5, r6
 80081e0:	bfa8      	it	ge
 80081e2:	2510      	movge	r5, #16
 80081e4:	f7f8 f996 	bl	8000514 <__aeabi_ui2d>
 80081e8:	2e09      	cmp	r6, #9
 80081ea:	4680      	mov	r8, r0
 80081ec:	4689      	mov	r9, r1
 80081ee:	dd13      	ble.n	8008218 <_strtod_l+0x3d8>
 80081f0:	4b76      	ldr	r3, [pc, #472]	; (80083cc <_strtod_l+0x58c>)
 80081f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80081f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80081fa:	f7f8 fa05 	bl	8000608 <__aeabi_dmul>
 80081fe:	4680      	mov	r8, r0
 8008200:	4650      	mov	r0, sl
 8008202:	4689      	mov	r9, r1
 8008204:	f7f8 f986 	bl	8000514 <__aeabi_ui2d>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4640      	mov	r0, r8
 800820e:	4649      	mov	r1, r9
 8008210:	f7f8 f844 	bl	800029c <__adddf3>
 8008214:	4680      	mov	r8, r0
 8008216:	4689      	mov	r9, r1
 8008218:	2e0f      	cmp	r6, #15
 800821a:	dc38      	bgt.n	800828e <_strtod_l+0x44e>
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f43f ae49 	beq.w	8007eb6 <_strtod_l+0x76>
 8008224:	dd24      	ble.n	8008270 <_strtod_l+0x430>
 8008226:	2b16      	cmp	r3, #22
 8008228:	dc0b      	bgt.n	8008242 <_strtod_l+0x402>
 800822a:	4968      	ldr	r1, [pc, #416]	; (80083cc <_strtod_l+0x58c>)
 800822c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008234:	4642      	mov	r2, r8
 8008236:	464b      	mov	r3, r9
 8008238:	f7f8 f9e6 	bl	8000608 <__aeabi_dmul>
 800823c:	4680      	mov	r8, r0
 800823e:	4689      	mov	r9, r1
 8008240:	e639      	b.n	8007eb6 <_strtod_l+0x76>
 8008242:	9a08      	ldr	r2, [sp, #32]
 8008244:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008248:	4293      	cmp	r3, r2
 800824a:	db20      	blt.n	800828e <_strtod_l+0x44e>
 800824c:	4c5f      	ldr	r4, [pc, #380]	; (80083cc <_strtod_l+0x58c>)
 800824e:	f1c6 060f 	rsb	r6, r6, #15
 8008252:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008256:	4642      	mov	r2, r8
 8008258:	464b      	mov	r3, r9
 800825a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825e:	f7f8 f9d3 	bl	8000608 <__aeabi_dmul>
 8008262:	9b08      	ldr	r3, [sp, #32]
 8008264:	1b9e      	subs	r6, r3, r6
 8008266:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800826a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800826e:	e7e3      	b.n	8008238 <_strtod_l+0x3f8>
 8008270:	9b08      	ldr	r3, [sp, #32]
 8008272:	3316      	adds	r3, #22
 8008274:	db0b      	blt.n	800828e <_strtod_l+0x44e>
 8008276:	9b05      	ldr	r3, [sp, #20]
 8008278:	1bdf      	subs	r7, r3, r7
 800827a:	4b54      	ldr	r3, [pc, #336]	; (80083cc <_strtod_l+0x58c>)
 800827c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008284:	4640      	mov	r0, r8
 8008286:	4649      	mov	r1, r9
 8008288:	f7f8 fae8 	bl	800085c <__aeabi_ddiv>
 800828c:	e7d6      	b.n	800823c <_strtod_l+0x3fc>
 800828e:	9b08      	ldr	r3, [sp, #32]
 8008290:	1b75      	subs	r5, r6, r5
 8008292:	441d      	add	r5, r3
 8008294:	2d00      	cmp	r5, #0
 8008296:	dd70      	ble.n	800837a <_strtod_l+0x53a>
 8008298:	f015 030f 	ands.w	r3, r5, #15
 800829c:	d00a      	beq.n	80082b4 <_strtod_l+0x474>
 800829e:	494b      	ldr	r1, [pc, #300]	; (80083cc <_strtod_l+0x58c>)
 80082a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ac:	f7f8 f9ac 	bl	8000608 <__aeabi_dmul>
 80082b0:	4680      	mov	r8, r0
 80082b2:	4689      	mov	r9, r1
 80082b4:	f035 050f 	bics.w	r5, r5, #15
 80082b8:	d04d      	beq.n	8008356 <_strtod_l+0x516>
 80082ba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80082be:	dd22      	ble.n	8008306 <_strtod_l+0x4c6>
 80082c0:	2500      	movs	r5, #0
 80082c2:	46ab      	mov	fp, r5
 80082c4:	9509      	str	r5, [sp, #36]	; 0x24
 80082c6:	9505      	str	r5, [sp, #20]
 80082c8:	2322      	movs	r3, #34	; 0x22
 80082ca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80083d4 <_strtod_l+0x594>
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	f04f 0800 	mov.w	r8, #0
 80082d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f43f aded 	beq.w	8007eb6 <_strtod_l+0x76>
 80082dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80082de:	4620      	mov	r0, r4
 80082e0:	f7ff f91c 	bl	800751c <_Bfree>
 80082e4:	9905      	ldr	r1, [sp, #20]
 80082e6:	4620      	mov	r0, r4
 80082e8:	f7ff f918 	bl	800751c <_Bfree>
 80082ec:	4659      	mov	r1, fp
 80082ee:	4620      	mov	r0, r4
 80082f0:	f7ff f914 	bl	800751c <_Bfree>
 80082f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082f6:	4620      	mov	r0, r4
 80082f8:	f7ff f910 	bl	800751c <_Bfree>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4620      	mov	r0, r4
 8008300:	f7ff f90c 	bl	800751c <_Bfree>
 8008304:	e5d7      	b.n	8007eb6 <_strtod_l+0x76>
 8008306:	4b32      	ldr	r3, [pc, #200]	; (80083d0 <_strtod_l+0x590>)
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	2300      	movs	r3, #0
 800830c:	112d      	asrs	r5, r5, #4
 800830e:	4640      	mov	r0, r8
 8008310:	4649      	mov	r1, r9
 8008312:	469a      	mov	sl, r3
 8008314:	2d01      	cmp	r5, #1
 8008316:	dc21      	bgt.n	800835c <_strtod_l+0x51c>
 8008318:	b10b      	cbz	r3, 800831e <_strtod_l+0x4de>
 800831a:	4680      	mov	r8, r0
 800831c:	4689      	mov	r9, r1
 800831e:	492c      	ldr	r1, [pc, #176]	; (80083d0 <_strtod_l+0x590>)
 8008320:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008324:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008328:	4642      	mov	r2, r8
 800832a:	464b      	mov	r3, r9
 800832c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008330:	f7f8 f96a 	bl	8000608 <__aeabi_dmul>
 8008334:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <_strtod_l+0x594>)
 8008336:	460a      	mov	r2, r1
 8008338:	400b      	ands	r3, r1
 800833a:	4927      	ldr	r1, [pc, #156]	; (80083d8 <_strtod_l+0x598>)
 800833c:	428b      	cmp	r3, r1
 800833e:	4680      	mov	r8, r0
 8008340:	d8be      	bhi.n	80082c0 <_strtod_l+0x480>
 8008342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008346:	428b      	cmp	r3, r1
 8008348:	bf86      	itte	hi
 800834a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80083dc <_strtod_l+0x59c>
 800834e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008352:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008356:	2300      	movs	r3, #0
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	e07b      	b.n	8008454 <_strtod_l+0x614>
 800835c:	07ea      	lsls	r2, r5, #31
 800835e:	d505      	bpl.n	800836c <_strtod_l+0x52c>
 8008360:	9b04      	ldr	r3, [sp, #16]
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7f8 f94f 	bl	8000608 <__aeabi_dmul>
 800836a:	2301      	movs	r3, #1
 800836c:	9a04      	ldr	r2, [sp, #16]
 800836e:	3208      	adds	r2, #8
 8008370:	f10a 0a01 	add.w	sl, sl, #1
 8008374:	106d      	asrs	r5, r5, #1
 8008376:	9204      	str	r2, [sp, #16]
 8008378:	e7cc      	b.n	8008314 <_strtod_l+0x4d4>
 800837a:	d0ec      	beq.n	8008356 <_strtod_l+0x516>
 800837c:	426d      	negs	r5, r5
 800837e:	f015 020f 	ands.w	r2, r5, #15
 8008382:	d00a      	beq.n	800839a <_strtod_l+0x55a>
 8008384:	4b11      	ldr	r3, [pc, #68]	; (80083cc <_strtod_l+0x58c>)
 8008386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800838a:	4640      	mov	r0, r8
 800838c:	4649      	mov	r1, r9
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f7f8 fa63 	bl	800085c <__aeabi_ddiv>
 8008396:	4680      	mov	r8, r0
 8008398:	4689      	mov	r9, r1
 800839a:	112d      	asrs	r5, r5, #4
 800839c:	d0db      	beq.n	8008356 <_strtod_l+0x516>
 800839e:	2d1f      	cmp	r5, #31
 80083a0:	dd1e      	ble.n	80083e0 <_strtod_l+0x5a0>
 80083a2:	2500      	movs	r5, #0
 80083a4:	46ab      	mov	fp, r5
 80083a6:	9509      	str	r5, [sp, #36]	; 0x24
 80083a8:	9505      	str	r5, [sp, #20]
 80083aa:	2322      	movs	r3, #34	; 0x22
 80083ac:	f04f 0800 	mov.w	r8, #0
 80083b0:	f04f 0900 	mov.w	r9, #0
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	e78d      	b.n	80082d4 <_strtod_l+0x494>
 80083b8:	0801661d 	.word	0x0801661d
 80083bc:	08016844 	.word	0x08016844
 80083c0:	08016615 	.word	0x08016615
 80083c4:	0801664c 	.word	0x0801664c
 80083c8:	080169d5 	.word	0x080169d5
 80083cc:	08016758 	.word	0x08016758
 80083d0:	08016730 	.word	0x08016730
 80083d4:	7ff00000 	.word	0x7ff00000
 80083d8:	7ca00000 	.word	0x7ca00000
 80083dc:	7fefffff 	.word	0x7fefffff
 80083e0:	f015 0310 	ands.w	r3, r5, #16
 80083e4:	bf18      	it	ne
 80083e6:	236a      	movne	r3, #106	; 0x6a
 80083e8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800878c <_strtod_l+0x94c>
 80083ec:	9304      	str	r3, [sp, #16]
 80083ee:	4640      	mov	r0, r8
 80083f0:	4649      	mov	r1, r9
 80083f2:	2300      	movs	r3, #0
 80083f4:	07ea      	lsls	r2, r5, #31
 80083f6:	d504      	bpl.n	8008402 <_strtod_l+0x5c2>
 80083f8:	e9da 2300 	ldrd	r2, r3, [sl]
 80083fc:	f7f8 f904 	bl	8000608 <__aeabi_dmul>
 8008400:	2301      	movs	r3, #1
 8008402:	106d      	asrs	r5, r5, #1
 8008404:	f10a 0a08 	add.w	sl, sl, #8
 8008408:	d1f4      	bne.n	80083f4 <_strtod_l+0x5b4>
 800840a:	b10b      	cbz	r3, 8008410 <_strtod_l+0x5d0>
 800840c:	4680      	mov	r8, r0
 800840e:	4689      	mov	r9, r1
 8008410:	9b04      	ldr	r3, [sp, #16]
 8008412:	b1bb      	cbz	r3, 8008444 <_strtod_l+0x604>
 8008414:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008418:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800841c:	2b00      	cmp	r3, #0
 800841e:	4649      	mov	r1, r9
 8008420:	dd10      	ble.n	8008444 <_strtod_l+0x604>
 8008422:	2b1f      	cmp	r3, #31
 8008424:	f340 811e 	ble.w	8008664 <_strtod_l+0x824>
 8008428:	2b34      	cmp	r3, #52	; 0x34
 800842a:	bfde      	ittt	le
 800842c:	f04f 33ff 	movle.w	r3, #4294967295
 8008430:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008434:	4093      	lslle	r3, r2
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	bfcc      	ite	gt
 800843c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008440:	ea03 0901 	andle.w	r9, r3, r1
 8008444:	2200      	movs	r2, #0
 8008446:	2300      	movs	r3, #0
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f8 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 8008450:	2800      	cmp	r0, #0
 8008452:	d1a6      	bne.n	80083a2 <_strtod_l+0x562>
 8008454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800845a:	4633      	mov	r3, r6
 800845c:	465a      	mov	r2, fp
 800845e:	4620      	mov	r0, r4
 8008460:	f7ff f8c4 	bl	80075ec <__s2b>
 8008464:	9009      	str	r0, [sp, #36]	; 0x24
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f af2a 	beq.w	80082c0 <_strtod_l+0x480>
 800846c:	9a08      	ldr	r2, [sp, #32]
 800846e:	9b05      	ldr	r3, [sp, #20]
 8008470:	2a00      	cmp	r2, #0
 8008472:	eba3 0307 	sub.w	r3, r3, r7
 8008476:	bfa8      	it	ge
 8008478:	2300      	movge	r3, #0
 800847a:	930c      	str	r3, [sp, #48]	; 0x30
 800847c:	2500      	movs	r5, #0
 800847e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008482:	9312      	str	r3, [sp, #72]	; 0x48
 8008484:	46ab      	mov	fp, r5
 8008486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008488:	4620      	mov	r0, r4
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	f7ff f806 	bl	800749c <_Balloc>
 8008490:	9005      	str	r0, [sp, #20]
 8008492:	2800      	cmp	r0, #0
 8008494:	f43f af18 	beq.w	80082c8 <_strtod_l+0x488>
 8008498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	3202      	adds	r2, #2
 800849e:	f103 010c 	add.w	r1, r3, #12
 80084a2:	0092      	lsls	r2, r2, #2
 80084a4:	300c      	adds	r0, #12
 80084a6:	f7fe f91e 	bl	80066e6 <memcpy>
 80084aa:	ec49 8b10 	vmov	d0, r8, r9
 80084ae:	aa18      	add	r2, sp, #96	; 0x60
 80084b0:	a917      	add	r1, sp, #92	; 0x5c
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7ff fbce 	bl	8007c54 <__d2b>
 80084b8:	ec49 8b18 	vmov	d8, r8, r9
 80084bc:	9016      	str	r0, [sp, #88]	; 0x58
 80084be:	2800      	cmp	r0, #0
 80084c0:	f43f af02 	beq.w	80082c8 <_strtod_l+0x488>
 80084c4:	2101      	movs	r1, #1
 80084c6:	4620      	mov	r0, r4
 80084c8:	f7ff f928 	bl	800771c <__i2b>
 80084cc:	4683      	mov	fp, r0
 80084ce:	2800      	cmp	r0, #0
 80084d0:	f43f aefa 	beq.w	80082c8 <_strtod_l+0x488>
 80084d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80084d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80084d8:	2e00      	cmp	r6, #0
 80084da:	bfab      	itete	ge
 80084dc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80084de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80084e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80084e2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80084e6:	bfac      	ite	ge
 80084e8:	eb06 0a03 	addge.w	sl, r6, r3
 80084ec:	1b9f      	sublt	r7, r3, r6
 80084ee:	9b04      	ldr	r3, [sp, #16]
 80084f0:	1af6      	subs	r6, r6, r3
 80084f2:	4416      	add	r6, r2
 80084f4:	4ba0      	ldr	r3, [pc, #640]	; (8008778 <_strtod_l+0x938>)
 80084f6:	3e01      	subs	r6, #1
 80084f8:	429e      	cmp	r6, r3
 80084fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084fe:	f280 80c4 	bge.w	800868a <_strtod_l+0x84a>
 8008502:	1b9b      	subs	r3, r3, r6
 8008504:	2b1f      	cmp	r3, #31
 8008506:	eba2 0203 	sub.w	r2, r2, r3
 800850a:	f04f 0101 	mov.w	r1, #1
 800850e:	f300 80b0 	bgt.w	8008672 <_strtod_l+0x832>
 8008512:	fa01 f303 	lsl.w	r3, r1, r3
 8008516:	930e      	str	r3, [sp, #56]	; 0x38
 8008518:	2300      	movs	r3, #0
 800851a:	930d      	str	r3, [sp, #52]	; 0x34
 800851c:	eb0a 0602 	add.w	r6, sl, r2
 8008520:	9b04      	ldr	r3, [sp, #16]
 8008522:	45b2      	cmp	sl, r6
 8008524:	4417      	add	r7, r2
 8008526:	441f      	add	r7, r3
 8008528:	4653      	mov	r3, sl
 800852a:	bfa8      	it	ge
 800852c:	4633      	movge	r3, r6
 800852e:	42bb      	cmp	r3, r7
 8008530:	bfa8      	it	ge
 8008532:	463b      	movge	r3, r7
 8008534:	2b00      	cmp	r3, #0
 8008536:	bfc2      	ittt	gt
 8008538:	1af6      	subgt	r6, r6, r3
 800853a:	1aff      	subgt	r7, r7, r3
 800853c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd17      	ble.n	8008576 <_strtod_l+0x736>
 8008546:	4659      	mov	r1, fp
 8008548:	461a      	mov	r2, r3
 800854a:	4620      	mov	r0, r4
 800854c:	f7ff f9a6 	bl	800789c <__pow5mult>
 8008550:	4683      	mov	fp, r0
 8008552:	2800      	cmp	r0, #0
 8008554:	f43f aeb8 	beq.w	80082c8 <_strtod_l+0x488>
 8008558:	4601      	mov	r1, r0
 800855a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800855c:	4620      	mov	r0, r4
 800855e:	f7ff f8f3 	bl	8007748 <__multiply>
 8008562:	900b      	str	r0, [sp, #44]	; 0x2c
 8008564:	2800      	cmp	r0, #0
 8008566:	f43f aeaf 	beq.w	80082c8 <_strtod_l+0x488>
 800856a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800856c:	4620      	mov	r0, r4
 800856e:	f7fe ffd5 	bl	800751c <_Bfree>
 8008572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008574:	9316      	str	r3, [sp, #88]	; 0x58
 8008576:	2e00      	cmp	r6, #0
 8008578:	f300 808c 	bgt.w	8008694 <_strtod_l+0x854>
 800857c:	9b08      	ldr	r3, [sp, #32]
 800857e:	2b00      	cmp	r3, #0
 8008580:	dd08      	ble.n	8008594 <_strtod_l+0x754>
 8008582:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008584:	9905      	ldr	r1, [sp, #20]
 8008586:	4620      	mov	r0, r4
 8008588:	f7ff f988 	bl	800789c <__pow5mult>
 800858c:	9005      	str	r0, [sp, #20]
 800858e:	2800      	cmp	r0, #0
 8008590:	f43f ae9a 	beq.w	80082c8 <_strtod_l+0x488>
 8008594:	2f00      	cmp	r7, #0
 8008596:	dd08      	ble.n	80085aa <_strtod_l+0x76a>
 8008598:	9905      	ldr	r1, [sp, #20]
 800859a:	463a      	mov	r2, r7
 800859c:	4620      	mov	r0, r4
 800859e:	f7ff f9d7 	bl	8007950 <__lshift>
 80085a2:	9005      	str	r0, [sp, #20]
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f43f ae8f 	beq.w	80082c8 <_strtod_l+0x488>
 80085aa:	f1ba 0f00 	cmp.w	sl, #0
 80085ae:	dd08      	ble.n	80085c2 <_strtod_l+0x782>
 80085b0:	4659      	mov	r1, fp
 80085b2:	4652      	mov	r2, sl
 80085b4:	4620      	mov	r0, r4
 80085b6:	f7ff f9cb 	bl	8007950 <__lshift>
 80085ba:	4683      	mov	fp, r0
 80085bc:	2800      	cmp	r0, #0
 80085be:	f43f ae83 	beq.w	80082c8 <_strtod_l+0x488>
 80085c2:	9a05      	ldr	r2, [sp, #20]
 80085c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7ff fa4a 	bl	8007a60 <__mdiff>
 80085cc:	4605      	mov	r5, r0
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f43f ae7a 	beq.w	80082c8 <_strtod_l+0x488>
 80085d4:	68c3      	ldr	r3, [r0, #12]
 80085d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80085d8:	2300      	movs	r3, #0
 80085da:	60c3      	str	r3, [r0, #12]
 80085dc:	4659      	mov	r1, fp
 80085de:	f7ff fa23 	bl	8007a28 <__mcmp>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	da60      	bge.n	80086a8 <_strtod_l+0x868>
 80085e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e8:	ea53 0308 	orrs.w	r3, r3, r8
 80085ec:	f040 8084 	bne.w	80086f8 <_strtod_l+0x8b8>
 80085f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d17f      	bne.n	80086f8 <_strtod_l+0x8b8>
 80085f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085fc:	0d1b      	lsrs	r3, r3, #20
 80085fe:	051b      	lsls	r3, r3, #20
 8008600:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008604:	d978      	bls.n	80086f8 <_strtod_l+0x8b8>
 8008606:	696b      	ldr	r3, [r5, #20]
 8008608:	b913      	cbnz	r3, 8008610 <_strtod_l+0x7d0>
 800860a:	692b      	ldr	r3, [r5, #16]
 800860c:	2b01      	cmp	r3, #1
 800860e:	dd73      	ble.n	80086f8 <_strtod_l+0x8b8>
 8008610:	4629      	mov	r1, r5
 8008612:	2201      	movs	r2, #1
 8008614:	4620      	mov	r0, r4
 8008616:	f7ff f99b 	bl	8007950 <__lshift>
 800861a:	4659      	mov	r1, fp
 800861c:	4605      	mov	r5, r0
 800861e:	f7ff fa03 	bl	8007a28 <__mcmp>
 8008622:	2800      	cmp	r0, #0
 8008624:	dd68      	ble.n	80086f8 <_strtod_l+0x8b8>
 8008626:	9904      	ldr	r1, [sp, #16]
 8008628:	4a54      	ldr	r2, [pc, #336]	; (800877c <_strtod_l+0x93c>)
 800862a:	464b      	mov	r3, r9
 800862c:	2900      	cmp	r1, #0
 800862e:	f000 8084 	beq.w	800873a <_strtod_l+0x8fa>
 8008632:	ea02 0109 	and.w	r1, r2, r9
 8008636:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800863a:	dc7e      	bgt.n	800873a <_strtod_l+0x8fa>
 800863c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008640:	f77f aeb3 	ble.w	80083aa <_strtod_l+0x56a>
 8008644:	4b4e      	ldr	r3, [pc, #312]	; (8008780 <_strtod_l+0x940>)
 8008646:	4640      	mov	r0, r8
 8008648:	4649      	mov	r1, r9
 800864a:	2200      	movs	r2, #0
 800864c:	f7f7 ffdc 	bl	8000608 <__aeabi_dmul>
 8008650:	4b4a      	ldr	r3, [pc, #296]	; (800877c <_strtod_l+0x93c>)
 8008652:	400b      	ands	r3, r1
 8008654:	4680      	mov	r8, r0
 8008656:	4689      	mov	r9, r1
 8008658:	2b00      	cmp	r3, #0
 800865a:	f47f ae3f 	bne.w	80082dc <_strtod_l+0x49c>
 800865e:	2322      	movs	r3, #34	; 0x22
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	e63b      	b.n	80082dc <_strtod_l+0x49c>
 8008664:	f04f 32ff 	mov.w	r2, #4294967295
 8008668:	fa02 f303 	lsl.w	r3, r2, r3
 800866c:	ea03 0808 	and.w	r8, r3, r8
 8008670:	e6e8      	b.n	8008444 <_strtod_l+0x604>
 8008672:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008676:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800867a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800867e:	36e2      	adds	r6, #226	; 0xe2
 8008680:	fa01 f306 	lsl.w	r3, r1, r6
 8008684:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008688:	e748      	b.n	800851c <_strtod_l+0x6dc>
 800868a:	2100      	movs	r1, #0
 800868c:	2301      	movs	r3, #1
 800868e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008692:	e743      	b.n	800851c <_strtod_l+0x6dc>
 8008694:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008696:	4632      	mov	r2, r6
 8008698:	4620      	mov	r0, r4
 800869a:	f7ff f959 	bl	8007950 <__lshift>
 800869e:	9016      	str	r0, [sp, #88]	; 0x58
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f47f af6b 	bne.w	800857c <_strtod_l+0x73c>
 80086a6:	e60f      	b.n	80082c8 <_strtod_l+0x488>
 80086a8:	46ca      	mov	sl, r9
 80086aa:	d171      	bne.n	8008790 <_strtod_l+0x950>
 80086ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086b2:	b352      	cbz	r2, 800870a <_strtod_l+0x8ca>
 80086b4:	4a33      	ldr	r2, [pc, #204]	; (8008784 <_strtod_l+0x944>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d12a      	bne.n	8008710 <_strtod_l+0x8d0>
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	4641      	mov	r1, r8
 80086be:	b1fb      	cbz	r3, 8008700 <_strtod_l+0x8c0>
 80086c0:	4b2e      	ldr	r3, [pc, #184]	; (800877c <_strtod_l+0x93c>)
 80086c2:	ea09 0303 	and.w	r3, r9, r3
 80086c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295
 80086ce:	d81a      	bhi.n	8008706 <_strtod_l+0x8c6>
 80086d0:	0d1b      	lsrs	r3, r3, #20
 80086d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086d6:	fa02 f303 	lsl.w	r3, r2, r3
 80086da:	4299      	cmp	r1, r3
 80086dc:	d118      	bne.n	8008710 <_strtod_l+0x8d0>
 80086de:	4b2a      	ldr	r3, [pc, #168]	; (8008788 <_strtod_l+0x948>)
 80086e0:	459a      	cmp	sl, r3
 80086e2:	d102      	bne.n	80086ea <_strtod_l+0x8aa>
 80086e4:	3101      	adds	r1, #1
 80086e6:	f43f adef 	beq.w	80082c8 <_strtod_l+0x488>
 80086ea:	4b24      	ldr	r3, [pc, #144]	; (800877c <_strtod_l+0x93c>)
 80086ec:	ea0a 0303 	and.w	r3, sl, r3
 80086f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80086f4:	f04f 0800 	mov.w	r8, #0
 80086f8:	9b04      	ldr	r3, [sp, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1a2      	bne.n	8008644 <_strtod_l+0x804>
 80086fe:	e5ed      	b.n	80082dc <_strtod_l+0x49c>
 8008700:	f04f 33ff 	mov.w	r3, #4294967295
 8008704:	e7e9      	b.n	80086da <_strtod_l+0x89a>
 8008706:	4613      	mov	r3, r2
 8008708:	e7e7      	b.n	80086da <_strtod_l+0x89a>
 800870a:	ea53 0308 	orrs.w	r3, r3, r8
 800870e:	d08a      	beq.n	8008626 <_strtod_l+0x7e6>
 8008710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008712:	b1e3      	cbz	r3, 800874e <_strtod_l+0x90e>
 8008714:	ea13 0f0a 	tst.w	r3, sl
 8008718:	d0ee      	beq.n	80086f8 <_strtod_l+0x8b8>
 800871a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800871c:	9a04      	ldr	r2, [sp, #16]
 800871e:	4640      	mov	r0, r8
 8008720:	4649      	mov	r1, r9
 8008722:	b1c3      	cbz	r3, 8008756 <_strtod_l+0x916>
 8008724:	f7ff fb6f 	bl	8007e06 <sulp>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	ec51 0b18 	vmov	r0, r1, d8
 8008730:	f7f7 fdb4 	bl	800029c <__adddf3>
 8008734:	4680      	mov	r8, r0
 8008736:	4689      	mov	r9, r1
 8008738:	e7de      	b.n	80086f8 <_strtod_l+0x8b8>
 800873a:	4013      	ands	r3, r2
 800873c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008740:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008744:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008748:	f04f 38ff 	mov.w	r8, #4294967295
 800874c:	e7d4      	b.n	80086f8 <_strtod_l+0x8b8>
 800874e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008750:	ea13 0f08 	tst.w	r3, r8
 8008754:	e7e0      	b.n	8008718 <_strtod_l+0x8d8>
 8008756:	f7ff fb56 	bl	8007e06 <sulp>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	ec51 0b18 	vmov	r0, r1, d8
 8008762:	f7f7 fd99 	bl	8000298 <__aeabi_dsub>
 8008766:	2200      	movs	r2, #0
 8008768:	2300      	movs	r3, #0
 800876a:	4680      	mov	r8, r0
 800876c:	4689      	mov	r9, r1
 800876e:	f7f8 f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008772:	2800      	cmp	r0, #0
 8008774:	d0c0      	beq.n	80086f8 <_strtod_l+0x8b8>
 8008776:	e618      	b.n	80083aa <_strtod_l+0x56a>
 8008778:	fffffc02 	.word	0xfffffc02
 800877c:	7ff00000 	.word	0x7ff00000
 8008780:	39500000 	.word	0x39500000
 8008784:	000fffff 	.word	0x000fffff
 8008788:	7fefffff 	.word	0x7fefffff
 800878c:	08016858 	.word	0x08016858
 8008790:	4659      	mov	r1, fp
 8008792:	4628      	mov	r0, r5
 8008794:	f7ff fab8 	bl	8007d08 <__ratio>
 8008798:	ec57 6b10 	vmov	r6, r7, d0
 800879c:	ee10 0a10 	vmov	r0, s0
 80087a0:	2200      	movs	r2, #0
 80087a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087a6:	4639      	mov	r1, r7
 80087a8:	f7f8 f9aa 	bl	8000b00 <__aeabi_dcmple>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d071      	beq.n	8008894 <_strtod_l+0xa54>
 80087b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d17c      	bne.n	80088b0 <_strtod_l+0xa70>
 80087b6:	f1b8 0f00 	cmp.w	r8, #0
 80087ba:	d15a      	bne.n	8008872 <_strtod_l+0xa32>
 80087bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d15d      	bne.n	8008880 <_strtod_l+0xa40>
 80087c4:	4b90      	ldr	r3, [pc, #576]	; (8008a08 <_strtod_l+0xbc8>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f8 f98e 	bl	8000aec <__aeabi_dcmplt>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d15c      	bne.n	800888e <_strtod_l+0xa4e>
 80087d4:	4630      	mov	r0, r6
 80087d6:	4639      	mov	r1, r7
 80087d8:	4b8c      	ldr	r3, [pc, #560]	; (8008a0c <_strtod_l+0xbcc>)
 80087da:	2200      	movs	r2, #0
 80087dc:	f7f7 ff14 	bl	8000608 <__aeabi_dmul>
 80087e0:	4606      	mov	r6, r0
 80087e2:	460f      	mov	r7, r1
 80087e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80087e8:	9606      	str	r6, [sp, #24]
 80087ea:	9307      	str	r3, [sp, #28]
 80087ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80087f4:	4b86      	ldr	r3, [pc, #536]	; (8008a10 <_strtod_l+0xbd0>)
 80087f6:	ea0a 0303 	and.w	r3, sl, r3
 80087fa:	930d      	str	r3, [sp, #52]	; 0x34
 80087fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087fe:	4b85      	ldr	r3, [pc, #532]	; (8008a14 <_strtod_l+0xbd4>)
 8008800:	429a      	cmp	r2, r3
 8008802:	f040 8090 	bne.w	8008926 <_strtod_l+0xae6>
 8008806:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800880a:	ec49 8b10 	vmov	d0, r8, r9
 800880e:	f7ff f9b1 	bl	8007b74 <__ulp>
 8008812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008816:	ec51 0b10 	vmov	r0, r1, d0
 800881a:	f7f7 fef5 	bl	8000608 <__aeabi_dmul>
 800881e:	4642      	mov	r2, r8
 8008820:	464b      	mov	r3, r9
 8008822:	f7f7 fd3b 	bl	800029c <__adddf3>
 8008826:	460b      	mov	r3, r1
 8008828:	4979      	ldr	r1, [pc, #484]	; (8008a10 <_strtod_l+0xbd0>)
 800882a:	4a7b      	ldr	r2, [pc, #492]	; (8008a18 <_strtod_l+0xbd8>)
 800882c:	4019      	ands	r1, r3
 800882e:	4291      	cmp	r1, r2
 8008830:	4680      	mov	r8, r0
 8008832:	d944      	bls.n	80088be <_strtod_l+0xa7e>
 8008834:	ee18 2a90 	vmov	r2, s17
 8008838:	4b78      	ldr	r3, [pc, #480]	; (8008a1c <_strtod_l+0xbdc>)
 800883a:	429a      	cmp	r2, r3
 800883c:	d104      	bne.n	8008848 <_strtod_l+0xa08>
 800883e:	ee18 3a10 	vmov	r3, s16
 8008842:	3301      	adds	r3, #1
 8008844:	f43f ad40 	beq.w	80082c8 <_strtod_l+0x488>
 8008848:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008a1c <_strtod_l+0xbdc>
 800884c:	f04f 38ff 	mov.w	r8, #4294967295
 8008850:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008852:	4620      	mov	r0, r4
 8008854:	f7fe fe62 	bl	800751c <_Bfree>
 8008858:	9905      	ldr	r1, [sp, #20]
 800885a:	4620      	mov	r0, r4
 800885c:	f7fe fe5e 	bl	800751c <_Bfree>
 8008860:	4659      	mov	r1, fp
 8008862:	4620      	mov	r0, r4
 8008864:	f7fe fe5a 	bl	800751c <_Bfree>
 8008868:	4629      	mov	r1, r5
 800886a:	4620      	mov	r0, r4
 800886c:	f7fe fe56 	bl	800751c <_Bfree>
 8008870:	e609      	b.n	8008486 <_strtod_l+0x646>
 8008872:	f1b8 0f01 	cmp.w	r8, #1
 8008876:	d103      	bne.n	8008880 <_strtod_l+0xa40>
 8008878:	f1b9 0f00 	cmp.w	r9, #0
 800887c:	f43f ad95 	beq.w	80083aa <_strtod_l+0x56a>
 8008880:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80089d8 <_strtod_l+0xb98>
 8008884:	4f60      	ldr	r7, [pc, #384]	; (8008a08 <_strtod_l+0xbc8>)
 8008886:	ed8d 7b06 	vstr	d7, [sp, #24]
 800888a:	2600      	movs	r6, #0
 800888c:	e7ae      	b.n	80087ec <_strtod_l+0x9ac>
 800888e:	4f5f      	ldr	r7, [pc, #380]	; (8008a0c <_strtod_l+0xbcc>)
 8008890:	2600      	movs	r6, #0
 8008892:	e7a7      	b.n	80087e4 <_strtod_l+0x9a4>
 8008894:	4b5d      	ldr	r3, [pc, #372]	; (8008a0c <_strtod_l+0xbcc>)
 8008896:	4630      	mov	r0, r6
 8008898:	4639      	mov	r1, r7
 800889a:	2200      	movs	r2, #0
 800889c:	f7f7 feb4 	bl	8000608 <__aeabi_dmul>
 80088a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d09c      	beq.n	80087e4 <_strtod_l+0x9a4>
 80088aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80088ae:	e79d      	b.n	80087ec <_strtod_l+0x9ac>
 80088b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80089e0 <_strtod_l+0xba0>
 80088b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088b8:	ec57 6b17 	vmov	r6, r7, d7
 80088bc:	e796      	b.n	80087ec <_strtod_l+0x9ac>
 80088be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80088c2:	9b04      	ldr	r3, [sp, #16]
 80088c4:	46ca      	mov	sl, r9
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1c2      	bne.n	8008850 <_strtod_l+0xa10>
 80088ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088d0:	0d1b      	lsrs	r3, r3, #20
 80088d2:	051b      	lsls	r3, r3, #20
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d1bb      	bne.n	8008850 <_strtod_l+0xa10>
 80088d8:	4630      	mov	r0, r6
 80088da:	4639      	mov	r1, r7
 80088dc:	f7f8 f9f4 	bl	8000cc8 <__aeabi_d2lz>
 80088e0:	f7f7 fe64 	bl	80005ac <__aeabi_l2d>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4630      	mov	r0, r6
 80088ea:	4639      	mov	r1, r7
 80088ec:	f7f7 fcd4 	bl	8000298 <__aeabi_dsub>
 80088f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088f6:	ea43 0308 	orr.w	r3, r3, r8
 80088fa:	4313      	orrs	r3, r2
 80088fc:	4606      	mov	r6, r0
 80088fe:	460f      	mov	r7, r1
 8008900:	d054      	beq.n	80089ac <_strtod_l+0xb6c>
 8008902:	a339      	add	r3, pc, #228	; (adr r3, 80089e8 <_strtod_l+0xba8>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f8 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800890c:	2800      	cmp	r0, #0
 800890e:	f47f ace5 	bne.w	80082dc <_strtod_l+0x49c>
 8008912:	a337      	add	r3, pc, #220	; (adr r3, 80089f0 <_strtod_l+0xbb0>)
 8008914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f8 f904 	bl	8000b28 <__aeabi_dcmpgt>
 8008920:	2800      	cmp	r0, #0
 8008922:	d095      	beq.n	8008850 <_strtod_l+0xa10>
 8008924:	e4da      	b.n	80082dc <_strtod_l+0x49c>
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	b333      	cbz	r3, 8008978 <_strtod_l+0xb38>
 800892a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800892c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008930:	d822      	bhi.n	8008978 <_strtod_l+0xb38>
 8008932:	a331      	add	r3, pc, #196	; (adr r3, 80089f8 <_strtod_l+0xbb8>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	4630      	mov	r0, r6
 800893a:	4639      	mov	r1, r7
 800893c:	f7f8 f8e0 	bl	8000b00 <__aeabi_dcmple>
 8008940:	b1a0      	cbz	r0, 800896c <_strtod_l+0xb2c>
 8008942:	4639      	mov	r1, r7
 8008944:	4630      	mov	r0, r6
 8008946:	f7f8 f937 	bl	8000bb8 <__aeabi_d2uiz>
 800894a:	2801      	cmp	r0, #1
 800894c:	bf38      	it	cc
 800894e:	2001      	movcc	r0, #1
 8008950:	f7f7 fde0 	bl	8000514 <__aeabi_ui2d>
 8008954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	bb23      	cbnz	r3, 80089a6 <_strtod_l+0xb66>
 800895c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008960:	9010      	str	r0, [sp, #64]	; 0x40
 8008962:	9311      	str	r3, [sp, #68]	; 0x44
 8008964:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008968:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800896c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800896e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008970:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	930f      	str	r3, [sp, #60]	; 0x3c
 8008978:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800897c:	eeb0 0a48 	vmov.f32	s0, s16
 8008980:	eef0 0a68 	vmov.f32	s1, s17
 8008984:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008988:	f7ff f8f4 	bl	8007b74 <__ulp>
 800898c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008990:	ec53 2b10 	vmov	r2, r3, d0
 8008994:	f7f7 fe38 	bl	8000608 <__aeabi_dmul>
 8008998:	ec53 2b18 	vmov	r2, r3, d8
 800899c:	f7f7 fc7e 	bl	800029c <__adddf3>
 80089a0:	4680      	mov	r8, r0
 80089a2:	4689      	mov	r9, r1
 80089a4:	e78d      	b.n	80088c2 <_strtod_l+0xa82>
 80089a6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80089aa:	e7db      	b.n	8008964 <_strtod_l+0xb24>
 80089ac:	a314      	add	r3, pc, #80	; (adr r3, 8008a00 <_strtod_l+0xbc0>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f7f8 f89b 	bl	8000aec <__aeabi_dcmplt>
 80089b6:	e7b3      	b.n	8008920 <_strtod_l+0xae0>
 80089b8:	2300      	movs	r3, #0
 80089ba:	930a      	str	r3, [sp, #40]	; 0x28
 80089bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	f7ff ba7c 	b.w	8007ebe <_strtod_l+0x7e>
 80089c6:	2a65      	cmp	r2, #101	; 0x65
 80089c8:	f43f ab75 	beq.w	80080b6 <_strtod_l+0x276>
 80089cc:	2a45      	cmp	r2, #69	; 0x45
 80089ce:	f43f ab72 	beq.w	80080b6 <_strtod_l+0x276>
 80089d2:	2301      	movs	r3, #1
 80089d4:	f7ff bbaa 	b.w	800812c <_strtod_l+0x2ec>
 80089d8:	00000000 	.word	0x00000000
 80089dc:	bff00000 	.word	0xbff00000
 80089e0:	00000000 	.word	0x00000000
 80089e4:	3ff00000 	.word	0x3ff00000
 80089e8:	94a03595 	.word	0x94a03595
 80089ec:	3fdfffff 	.word	0x3fdfffff
 80089f0:	35afe535 	.word	0x35afe535
 80089f4:	3fe00000 	.word	0x3fe00000
 80089f8:	ffc00000 	.word	0xffc00000
 80089fc:	41dfffff 	.word	0x41dfffff
 8008a00:	94a03595 	.word	0x94a03595
 8008a04:	3fcfffff 	.word	0x3fcfffff
 8008a08:	3ff00000 	.word	0x3ff00000
 8008a0c:	3fe00000 	.word	0x3fe00000
 8008a10:	7ff00000 	.word	0x7ff00000
 8008a14:	7fe00000 	.word	0x7fe00000
 8008a18:	7c9fffff 	.word	0x7c9fffff
 8008a1c:	7fefffff 	.word	0x7fefffff

08008a20 <_strtod_r>:
 8008a20:	4b01      	ldr	r3, [pc, #4]	; (8008a28 <_strtod_r+0x8>)
 8008a22:	f7ff ba0d 	b.w	8007e40 <_strtod_l>
 8008a26:	bf00      	nop
 8008a28:	20000794 	.word	0x20000794

08008a2c <_strtol_l.constprop.0>:
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a32:	d001      	beq.n	8008a38 <_strtol_l.constprop.0+0xc>
 8008a34:	2b24      	cmp	r3, #36	; 0x24
 8008a36:	d906      	bls.n	8008a46 <_strtol_l.constprop.0+0x1a>
 8008a38:	f7fd fe28 	bl	800668c <__errno>
 8008a3c:	2316      	movs	r3, #22
 8008a3e:	6003      	str	r3, [r0, #0]
 8008a40:	2000      	movs	r0, #0
 8008a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008b2c <_strtol_l.constprop.0+0x100>
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	462e      	mov	r6, r5
 8008a4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a52:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008a56:	f017 0708 	ands.w	r7, r7, #8
 8008a5a:	d1f7      	bne.n	8008a4c <_strtol_l.constprop.0+0x20>
 8008a5c:	2c2d      	cmp	r4, #45	; 0x2d
 8008a5e:	d132      	bne.n	8008ac6 <_strtol_l.constprop.0+0x9a>
 8008a60:	782c      	ldrb	r4, [r5, #0]
 8008a62:	2701      	movs	r7, #1
 8008a64:	1cb5      	adds	r5, r6, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d05b      	beq.n	8008b22 <_strtol_l.constprop.0+0xf6>
 8008a6a:	2b10      	cmp	r3, #16
 8008a6c:	d109      	bne.n	8008a82 <_strtol_l.constprop.0+0x56>
 8008a6e:	2c30      	cmp	r4, #48	; 0x30
 8008a70:	d107      	bne.n	8008a82 <_strtol_l.constprop.0+0x56>
 8008a72:	782c      	ldrb	r4, [r5, #0]
 8008a74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a78:	2c58      	cmp	r4, #88	; 0x58
 8008a7a:	d14d      	bne.n	8008b18 <_strtol_l.constprop.0+0xec>
 8008a7c:	786c      	ldrb	r4, [r5, #1]
 8008a7e:	2310      	movs	r3, #16
 8008a80:	3502      	adds	r5, #2
 8008a82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a86:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a8a:	f04f 0e00 	mov.w	lr, #0
 8008a8e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a92:	4676      	mov	r6, lr
 8008a94:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a98:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008a9c:	f1bc 0f09 	cmp.w	ip, #9
 8008aa0:	d816      	bhi.n	8008ad0 <_strtol_l.constprop.0+0xa4>
 8008aa2:	4664      	mov	r4, ip
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	dd24      	ble.n	8008af2 <_strtol_l.constprop.0+0xc6>
 8008aa8:	f1be 3fff 	cmp.w	lr, #4294967295
 8008aac:	d008      	beq.n	8008ac0 <_strtol_l.constprop.0+0x94>
 8008aae:	45b1      	cmp	r9, r6
 8008ab0:	d31c      	bcc.n	8008aec <_strtol_l.constprop.0+0xc0>
 8008ab2:	d101      	bne.n	8008ab8 <_strtol_l.constprop.0+0x8c>
 8008ab4:	45a2      	cmp	sl, r4
 8008ab6:	db19      	blt.n	8008aec <_strtol_l.constprop.0+0xc0>
 8008ab8:	fb06 4603 	mla	r6, r6, r3, r4
 8008abc:	f04f 0e01 	mov.w	lr, #1
 8008ac0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ac4:	e7e8      	b.n	8008a98 <_strtol_l.constprop.0+0x6c>
 8008ac6:	2c2b      	cmp	r4, #43	; 0x2b
 8008ac8:	bf04      	itt	eq
 8008aca:	782c      	ldrbeq	r4, [r5, #0]
 8008acc:	1cb5      	addeq	r5, r6, #2
 8008ace:	e7ca      	b.n	8008a66 <_strtol_l.constprop.0+0x3a>
 8008ad0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008ad4:	f1bc 0f19 	cmp.w	ip, #25
 8008ad8:	d801      	bhi.n	8008ade <_strtol_l.constprop.0+0xb2>
 8008ada:	3c37      	subs	r4, #55	; 0x37
 8008adc:	e7e2      	b.n	8008aa4 <_strtol_l.constprop.0+0x78>
 8008ade:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008ae2:	f1bc 0f19 	cmp.w	ip, #25
 8008ae6:	d804      	bhi.n	8008af2 <_strtol_l.constprop.0+0xc6>
 8008ae8:	3c57      	subs	r4, #87	; 0x57
 8008aea:	e7db      	b.n	8008aa4 <_strtol_l.constprop.0+0x78>
 8008aec:	f04f 3eff 	mov.w	lr, #4294967295
 8008af0:	e7e6      	b.n	8008ac0 <_strtol_l.constprop.0+0x94>
 8008af2:	f1be 3fff 	cmp.w	lr, #4294967295
 8008af6:	d105      	bne.n	8008b04 <_strtol_l.constprop.0+0xd8>
 8008af8:	2322      	movs	r3, #34	; 0x22
 8008afa:	6003      	str	r3, [r0, #0]
 8008afc:	4646      	mov	r6, r8
 8008afe:	b942      	cbnz	r2, 8008b12 <_strtol_l.constprop.0+0xe6>
 8008b00:	4630      	mov	r0, r6
 8008b02:	e79e      	b.n	8008a42 <_strtol_l.constprop.0+0x16>
 8008b04:	b107      	cbz	r7, 8008b08 <_strtol_l.constprop.0+0xdc>
 8008b06:	4276      	negs	r6, r6
 8008b08:	2a00      	cmp	r2, #0
 8008b0a:	d0f9      	beq.n	8008b00 <_strtol_l.constprop.0+0xd4>
 8008b0c:	f1be 0f00 	cmp.w	lr, #0
 8008b10:	d000      	beq.n	8008b14 <_strtol_l.constprop.0+0xe8>
 8008b12:	1e69      	subs	r1, r5, #1
 8008b14:	6011      	str	r1, [r2, #0]
 8008b16:	e7f3      	b.n	8008b00 <_strtol_l.constprop.0+0xd4>
 8008b18:	2430      	movs	r4, #48	; 0x30
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1b1      	bne.n	8008a82 <_strtol_l.constprop.0+0x56>
 8008b1e:	2308      	movs	r3, #8
 8008b20:	e7af      	b.n	8008a82 <_strtol_l.constprop.0+0x56>
 8008b22:	2c30      	cmp	r4, #48	; 0x30
 8008b24:	d0a5      	beq.n	8008a72 <_strtol_l.constprop.0+0x46>
 8008b26:	230a      	movs	r3, #10
 8008b28:	e7ab      	b.n	8008a82 <_strtol_l.constprop.0+0x56>
 8008b2a:	bf00      	nop
 8008b2c:	08016881 	.word	0x08016881

08008b30 <_strtol_r>:
 8008b30:	f7ff bf7c 	b.w	8008a2c <_strtol_l.constprop.0>

08008b34 <__ssputs_r>:
 8008b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	688e      	ldr	r6, [r1, #8]
 8008b3a:	461f      	mov	r7, r3
 8008b3c:	42be      	cmp	r6, r7
 8008b3e:	680b      	ldr	r3, [r1, #0]
 8008b40:	4682      	mov	sl, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	4690      	mov	r8, r2
 8008b46:	d82c      	bhi.n	8008ba2 <__ssputs_r+0x6e>
 8008b48:	898a      	ldrh	r2, [r1, #12]
 8008b4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b4e:	d026      	beq.n	8008b9e <__ssputs_r+0x6a>
 8008b50:	6965      	ldr	r5, [r4, #20]
 8008b52:	6909      	ldr	r1, [r1, #16]
 8008b54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b58:	eba3 0901 	sub.w	r9, r3, r1
 8008b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b60:	1c7b      	adds	r3, r7, #1
 8008b62:	444b      	add	r3, r9
 8008b64:	106d      	asrs	r5, r5, #1
 8008b66:	429d      	cmp	r5, r3
 8008b68:	bf38      	it	cc
 8008b6a:	461d      	movcc	r5, r3
 8008b6c:	0553      	lsls	r3, r2, #21
 8008b6e:	d527      	bpl.n	8008bc0 <__ssputs_r+0x8c>
 8008b70:	4629      	mov	r1, r5
 8008b72:	f7fc fc9d 	bl	80054b0 <_malloc_r>
 8008b76:	4606      	mov	r6, r0
 8008b78:	b360      	cbz	r0, 8008bd4 <__ssputs_r+0xa0>
 8008b7a:	6921      	ldr	r1, [r4, #16]
 8008b7c:	464a      	mov	r2, r9
 8008b7e:	f7fd fdb2 	bl	80066e6 <memcpy>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b8c:	81a3      	strh	r3, [r4, #12]
 8008b8e:	6126      	str	r6, [r4, #16]
 8008b90:	6165      	str	r5, [r4, #20]
 8008b92:	444e      	add	r6, r9
 8008b94:	eba5 0509 	sub.w	r5, r5, r9
 8008b98:	6026      	str	r6, [r4, #0]
 8008b9a:	60a5      	str	r5, [r4, #8]
 8008b9c:	463e      	mov	r6, r7
 8008b9e:	42be      	cmp	r6, r7
 8008ba0:	d900      	bls.n	8008ba4 <__ssputs_r+0x70>
 8008ba2:	463e      	mov	r6, r7
 8008ba4:	6820      	ldr	r0, [r4, #0]
 8008ba6:	4632      	mov	r2, r6
 8008ba8:	4641      	mov	r1, r8
 8008baa:	f000 f9c9 	bl	8008f40 <memmove>
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	1b9b      	subs	r3, r3, r6
 8008bb2:	60a3      	str	r3, [r4, #8]
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	4433      	add	r3, r6
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	f7fc fd01 	bl	80055c8 <_realloc_r>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d1e0      	bne.n	8008b8e <__ssputs_r+0x5a>
 8008bcc:	6921      	ldr	r1, [r4, #16]
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f7fe fc18 	bl	8007404 <_free_r>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	f8ca 3000 	str.w	r3, [sl]
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	f04f 30ff 	mov.w	r0, #4294967295
 8008be6:	e7e9      	b.n	8008bbc <__ssputs_r+0x88>

08008be8 <_svfiprintf_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	4698      	mov	r8, r3
 8008bee:	898b      	ldrh	r3, [r1, #12]
 8008bf0:	061b      	lsls	r3, r3, #24
 8008bf2:	b09d      	sub	sp, #116	; 0x74
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	4614      	mov	r4, r2
 8008bfa:	d50e      	bpl.n	8008c1a <_svfiprintf_r+0x32>
 8008bfc:	690b      	ldr	r3, [r1, #16]
 8008bfe:	b963      	cbnz	r3, 8008c1a <_svfiprintf_r+0x32>
 8008c00:	2140      	movs	r1, #64	; 0x40
 8008c02:	f7fc fc55 	bl	80054b0 <_malloc_r>
 8008c06:	6028      	str	r0, [r5, #0]
 8008c08:	6128      	str	r0, [r5, #16]
 8008c0a:	b920      	cbnz	r0, 8008c16 <_svfiprintf_r+0x2e>
 8008c0c:	230c      	movs	r3, #12
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	e0d0      	b.n	8008db8 <_svfiprintf_r+0x1d0>
 8008c16:	2340      	movs	r3, #64	; 0x40
 8008c18:	616b      	str	r3, [r5, #20]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	2320      	movs	r3, #32
 8008c20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c28:	2330      	movs	r3, #48	; 0x30
 8008c2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008dd0 <_svfiprintf_r+0x1e8>
 8008c2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c32:	f04f 0901 	mov.w	r9, #1
 8008c36:	4623      	mov	r3, r4
 8008c38:	469a      	mov	sl, r3
 8008c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c3e:	b10a      	cbz	r2, 8008c44 <_svfiprintf_r+0x5c>
 8008c40:	2a25      	cmp	r2, #37	; 0x25
 8008c42:	d1f9      	bne.n	8008c38 <_svfiprintf_r+0x50>
 8008c44:	ebba 0b04 	subs.w	fp, sl, r4
 8008c48:	d00b      	beq.n	8008c62 <_svfiprintf_r+0x7a>
 8008c4a:	465b      	mov	r3, fp
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4629      	mov	r1, r5
 8008c50:	4638      	mov	r0, r7
 8008c52:	f7ff ff6f 	bl	8008b34 <__ssputs_r>
 8008c56:	3001      	adds	r0, #1
 8008c58:	f000 80a9 	beq.w	8008dae <_svfiprintf_r+0x1c6>
 8008c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c5e:	445a      	add	r2, fp
 8008c60:	9209      	str	r2, [sp, #36]	; 0x24
 8008c62:	f89a 3000 	ldrb.w	r3, [sl]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 80a1 	beq.w	8008dae <_svfiprintf_r+0x1c6>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c76:	f10a 0a01 	add.w	sl, sl, #1
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	9307      	str	r3, [sp, #28]
 8008c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c82:	931a      	str	r3, [sp, #104]	; 0x68
 8008c84:	4654      	mov	r4, sl
 8008c86:	2205      	movs	r2, #5
 8008c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8c:	4850      	ldr	r0, [pc, #320]	; (8008dd0 <_svfiprintf_r+0x1e8>)
 8008c8e:	f7f7 faa7 	bl	80001e0 <memchr>
 8008c92:	9a04      	ldr	r2, [sp, #16]
 8008c94:	b9d8      	cbnz	r0, 8008cce <_svfiprintf_r+0xe6>
 8008c96:	06d0      	lsls	r0, r2, #27
 8008c98:	bf44      	itt	mi
 8008c9a:	2320      	movmi	r3, #32
 8008c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca0:	0711      	lsls	r1, r2, #28
 8008ca2:	bf44      	itt	mi
 8008ca4:	232b      	movmi	r3, #43	; 0x2b
 8008ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008caa:	f89a 3000 	ldrb.w	r3, [sl]
 8008cae:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb0:	d015      	beq.n	8008cde <_svfiprintf_r+0xf6>
 8008cb2:	9a07      	ldr	r2, [sp, #28]
 8008cb4:	4654      	mov	r4, sl
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f04f 0c0a 	mov.w	ip, #10
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc2:	3b30      	subs	r3, #48	; 0x30
 8008cc4:	2b09      	cmp	r3, #9
 8008cc6:	d94d      	bls.n	8008d64 <_svfiprintf_r+0x17c>
 8008cc8:	b1b0      	cbz	r0, 8008cf8 <_svfiprintf_r+0x110>
 8008cca:	9207      	str	r2, [sp, #28]
 8008ccc:	e014      	b.n	8008cf8 <_svfiprintf_r+0x110>
 8008cce:	eba0 0308 	sub.w	r3, r0, r8
 8008cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	46a2      	mov	sl, r4
 8008cdc:	e7d2      	b.n	8008c84 <_svfiprintf_r+0x9c>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	1d19      	adds	r1, r3, #4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	9103      	str	r1, [sp, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	bfbb      	ittet	lt
 8008cea:	425b      	neglt	r3, r3
 8008cec:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf0:	9307      	strge	r3, [sp, #28]
 8008cf2:	9307      	strlt	r3, [sp, #28]
 8008cf4:	bfb8      	it	lt
 8008cf6:	9204      	strlt	r2, [sp, #16]
 8008cf8:	7823      	ldrb	r3, [r4, #0]
 8008cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfc:	d10c      	bne.n	8008d18 <_svfiprintf_r+0x130>
 8008cfe:	7863      	ldrb	r3, [r4, #1]
 8008d00:	2b2a      	cmp	r3, #42	; 0x2a
 8008d02:	d134      	bne.n	8008d6e <_svfiprintf_r+0x186>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	1d1a      	adds	r2, r3, #4
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	9203      	str	r2, [sp, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bfb8      	it	lt
 8008d10:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d14:	3402      	adds	r4, #2
 8008d16:	9305      	str	r3, [sp, #20]
 8008d18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008de0 <_svfiprintf_r+0x1f8>
 8008d1c:	7821      	ldrb	r1, [r4, #0]
 8008d1e:	2203      	movs	r2, #3
 8008d20:	4650      	mov	r0, sl
 8008d22:	f7f7 fa5d 	bl	80001e0 <memchr>
 8008d26:	b138      	cbz	r0, 8008d38 <_svfiprintf_r+0x150>
 8008d28:	9b04      	ldr	r3, [sp, #16]
 8008d2a:	eba0 000a 	sub.w	r0, r0, sl
 8008d2e:	2240      	movs	r2, #64	; 0x40
 8008d30:	4082      	lsls	r2, r0
 8008d32:	4313      	orrs	r3, r2
 8008d34:	3401      	adds	r4, #1
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3c:	4825      	ldr	r0, [pc, #148]	; (8008dd4 <_svfiprintf_r+0x1ec>)
 8008d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d42:	2206      	movs	r2, #6
 8008d44:	f7f7 fa4c 	bl	80001e0 <memchr>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d038      	beq.n	8008dbe <_svfiprintf_r+0x1d6>
 8008d4c:	4b22      	ldr	r3, [pc, #136]	; (8008dd8 <_svfiprintf_r+0x1f0>)
 8008d4e:	bb1b      	cbnz	r3, 8008d98 <_svfiprintf_r+0x1b0>
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	3307      	adds	r3, #7
 8008d54:	f023 0307 	bic.w	r3, r3, #7
 8008d58:	3308      	adds	r3, #8
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5e:	4433      	add	r3, r6
 8008d60:	9309      	str	r3, [sp, #36]	; 0x24
 8008d62:	e768      	b.n	8008c36 <_svfiprintf_r+0x4e>
 8008d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d68:	460c      	mov	r4, r1
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	e7a6      	b.n	8008cbc <_svfiprintf_r+0xd4>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	3401      	adds	r4, #1
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	4619      	mov	r1, r3
 8008d76:	f04f 0c0a 	mov.w	ip, #10
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d80:	3a30      	subs	r2, #48	; 0x30
 8008d82:	2a09      	cmp	r2, #9
 8008d84:	d903      	bls.n	8008d8e <_svfiprintf_r+0x1a6>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0c6      	beq.n	8008d18 <_svfiprintf_r+0x130>
 8008d8a:	9105      	str	r1, [sp, #20]
 8008d8c:	e7c4      	b.n	8008d18 <_svfiprintf_r+0x130>
 8008d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d92:	4604      	mov	r4, r0
 8008d94:	2301      	movs	r3, #1
 8008d96:	e7f0      	b.n	8008d7a <_svfiprintf_r+0x192>
 8008d98:	ab03      	add	r3, sp, #12
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <_svfiprintf_r+0x1f4>)
 8008da0:	a904      	add	r1, sp, #16
 8008da2:	4638      	mov	r0, r7
 8008da4:	f7fc fce0 	bl	8005768 <_printf_float>
 8008da8:	1c42      	adds	r2, r0, #1
 8008daa:	4606      	mov	r6, r0
 8008dac:	d1d6      	bne.n	8008d5c <_svfiprintf_r+0x174>
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	065b      	lsls	r3, r3, #25
 8008db2:	f53f af2d 	bmi.w	8008c10 <_svfiprintf_r+0x28>
 8008db6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008db8:	b01d      	add	sp, #116	; 0x74
 8008dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbe:	ab03      	add	r3, sp, #12
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <_svfiprintf_r+0x1f4>)
 8008dc6:	a904      	add	r1, sp, #16
 8008dc8:	4638      	mov	r0, r7
 8008dca:	f7fc ff71 	bl	8005cb0 <_printf_i>
 8008dce:	e7eb      	b.n	8008da8 <_svfiprintf_r+0x1c0>
 8008dd0:	08016981 	.word	0x08016981
 8008dd4:	0801698b 	.word	0x0801698b
 8008dd8:	08005769 	.word	0x08005769
 8008ddc:	08008b35 	.word	0x08008b35
 8008de0:	08016987 	.word	0x08016987

08008de4 <__sflush_r>:
 8008de4:	898a      	ldrh	r2, [r1, #12]
 8008de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dea:	4605      	mov	r5, r0
 8008dec:	0710      	lsls	r0, r2, #28
 8008dee:	460c      	mov	r4, r1
 8008df0:	d458      	bmi.n	8008ea4 <__sflush_r+0xc0>
 8008df2:	684b      	ldr	r3, [r1, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dc05      	bgt.n	8008e04 <__sflush_r+0x20>
 8008df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	dc02      	bgt.n	8008e04 <__sflush_r+0x20>
 8008dfe:	2000      	movs	r0, #0
 8008e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e06:	2e00      	cmp	r6, #0
 8008e08:	d0f9      	beq.n	8008dfe <__sflush_r+0x1a>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e10:	682f      	ldr	r7, [r5, #0]
 8008e12:	6a21      	ldr	r1, [r4, #32]
 8008e14:	602b      	str	r3, [r5, #0]
 8008e16:	d032      	beq.n	8008e7e <__sflush_r+0x9a>
 8008e18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	075a      	lsls	r2, r3, #29
 8008e1e:	d505      	bpl.n	8008e2c <__sflush_r+0x48>
 8008e20:	6863      	ldr	r3, [r4, #4]
 8008e22:	1ac0      	subs	r0, r0, r3
 8008e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e26:	b10b      	cbz	r3, 8008e2c <__sflush_r+0x48>
 8008e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e2a:	1ac0      	subs	r0, r0, r3
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4602      	mov	r2, r0
 8008e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e32:	6a21      	ldr	r1, [r4, #32]
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b0      	blx	r6
 8008e38:	1c43      	adds	r3, r0, #1
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	d106      	bne.n	8008e4c <__sflush_r+0x68>
 8008e3e:	6829      	ldr	r1, [r5, #0]
 8008e40:	291d      	cmp	r1, #29
 8008e42:	d82b      	bhi.n	8008e9c <__sflush_r+0xb8>
 8008e44:	4a29      	ldr	r2, [pc, #164]	; (8008eec <__sflush_r+0x108>)
 8008e46:	410a      	asrs	r2, r1
 8008e48:	07d6      	lsls	r6, r2, #31
 8008e4a:	d427      	bmi.n	8008e9c <__sflush_r+0xb8>
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	6062      	str	r2, [r4, #4]
 8008e50:	04d9      	lsls	r1, r3, #19
 8008e52:	6922      	ldr	r2, [r4, #16]
 8008e54:	6022      	str	r2, [r4, #0]
 8008e56:	d504      	bpl.n	8008e62 <__sflush_r+0x7e>
 8008e58:	1c42      	adds	r2, r0, #1
 8008e5a:	d101      	bne.n	8008e60 <__sflush_r+0x7c>
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	b903      	cbnz	r3, 8008e62 <__sflush_r+0x7e>
 8008e60:	6560      	str	r0, [r4, #84]	; 0x54
 8008e62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e64:	602f      	str	r7, [r5, #0]
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d0c9      	beq.n	8008dfe <__sflush_r+0x1a>
 8008e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e6e:	4299      	cmp	r1, r3
 8008e70:	d002      	beq.n	8008e78 <__sflush_r+0x94>
 8008e72:	4628      	mov	r0, r5
 8008e74:	f7fe fac6 	bl	8007404 <_free_r>
 8008e78:	2000      	movs	r0, #0
 8008e7a:	6360      	str	r0, [r4, #52]	; 0x34
 8008e7c:	e7c0      	b.n	8008e00 <__sflush_r+0x1c>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	4628      	mov	r0, r5
 8008e82:	47b0      	blx	r6
 8008e84:	1c41      	adds	r1, r0, #1
 8008e86:	d1c8      	bne.n	8008e1a <__sflush_r+0x36>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0c5      	beq.n	8008e1a <__sflush_r+0x36>
 8008e8e:	2b1d      	cmp	r3, #29
 8008e90:	d001      	beq.n	8008e96 <__sflush_r+0xb2>
 8008e92:	2b16      	cmp	r3, #22
 8008e94:	d101      	bne.n	8008e9a <__sflush_r+0xb6>
 8008e96:	602f      	str	r7, [r5, #0]
 8008e98:	e7b1      	b.n	8008dfe <__sflush_r+0x1a>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea0:	81a3      	strh	r3, [r4, #12]
 8008ea2:	e7ad      	b.n	8008e00 <__sflush_r+0x1c>
 8008ea4:	690f      	ldr	r7, [r1, #16]
 8008ea6:	2f00      	cmp	r7, #0
 8008ea8:	d0a9      	beq.n	8008dfe <__sflush_r+0x1a>
 8008eaa:	0793      	lsls	r3, r2, #30
 8008eac:	680e      	ldr	r6, [r1, #0]
 8008eae:	bf08      	it	eq
 8008eb0:	694b      	ldreq	r3, [r1, #20]
 8008eb2:	600f      	str	r7, [r1, #0]
 8008eb4:	bf18      	it	ne
 8008eb6:	2300      	movne	r3, #0
 8008eb8:	eba6 0807 	sub.w	r8, r6, r7
 8008ebc:	608b      	str	r3, [r1, #8]
 8008ebe:	f1b8 0f00 	cmp.w	r8, #0
 8008ec2:	dd9c      	ble.n	8008dfe <__sflush_r+0x1a>
 8008ec4:	6a21      	ldr	r1, [r4, #32]
 8008ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ec8:	4643      	mov	r3, r8
 8008eca:	463a      	mov	r2, r7
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b0      	blx	r6
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	dc06      	bgt.n	8008ee2 <__sflush_r+0xfe>
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eda:	81a3      	strh	r3, [r4, #12]
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	e78e      	b.n	8008e00 <__sflush_r+0x1c>
 8008ee2:	4407      	add	r7, r0
 8008ee4:	eba8 0800 	sub.w	r8, r8, r0
 8008ee8:	e7e9      	b.n	8008ebe <__sflush_r+0xda>
 8008eea:	bf00      	nop
 8008eec:	dfbffffe 	.word	0xdfbffffe

08008ef0 <_fflush_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	690b      	ldr	r3, [r1, #16]
 8008ef4:	4605      	mov	r5, r0
 8008ef6:	460c      	mov	r4, r1
 8008ef8:	b913      	cbnz	r3, 8008f00 <_fflush_r+0x10>
 8008efa:	2500      	movs	r5, #0
 8008efc:	4628      	mov	r0, r5
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	b118      	cbz	r0, 8008f0a <_fflush_r+0x1a>
 8008f02:	6a03      	ldr	r3, [r0, #32]
 8008f04:	b90b      	cbnz	r3, 8008f0a <_fflush_r+0x1a>
 8008f06:	f7fd fa91 	bl	800642c <__sinit>
 8008f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0f3      	beq.n	8008efa <_fflush_r+0xa>
 8008f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f14:	07d0      	lsls	r0, r2, #31
 8008f16:	d404      	bmi.n	8008f22 <_fflush_r+0x32>
 8008f18:	0599      	lsls	r1, r3, #22
 8008f1a:	d402      	bmi.n	8008f22 <_fflush_r+0x32>
 8008f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f1e:	f7fd fbe0 	bl	80066e2 <__retarget_lock_acquire_recursive>
 8008f22:	4628      	mov	r0, r5
 8008f24:	4621      	mov	r1, r4
 8008f26:	f7ff ff5d 	bl	8008de4 <__sflush_r>
 8008f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f2c:	07da      	lsls	r2, r3, #31
 8008f2e:	4605      	mov	r5, r0
 8008f30:	d4e4      	bmi.n	8008efc <_fflush_r+0xc>
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	059b      	lsls	r3, r3, #22
 8008f36:	d4e1      	bmi.n	8008efc <_fflush_r+0xc>
 8008f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f3a:	f7fd fbd3 	bl	80066e4 <__retarget_lock_release_recursive>
 8008f3e:	e7dd      	b.n	8008efc <_fflush_r+0xc>

08008f40 <memmove>:
 8008f40:	4288      	cmp	r0, r1
 8008f42:	b510      	push	{r4, lr}
 8008f44:	eb01 0402 	add.w	r4, r1, r2
 8008f48:	d902      	bls.n	8008f50 <memmove+0x10>
 8008f4a:	4284      	cmp	r4, r0
 8008f4c:	4623      	mov	r3, r4
 8008f4e:	d807      	bhi.n	8008f60 <memmove+0x20>
 8008f50:	1e43      	subs	r3, r0, #1
 8008f52:	42a1      	cmp	r1, r4
 8008f54:	d008      	beq.n	8008f68 <memmove+0x28>
 8008f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f5e:	e7f8      	b.n	8008f52 <memmove+0x12>
 8008f60:	4402      	add	r2, r0
 8008f62:	4601      	mov	r1, r0
 8008f64:	428a      	cmp	r2, r1
 8008f66:	d100      	bne.n	8008f6a <memmove+0x2a>
 8008f68:	bd10      	pop	{r4, pc}
 8008f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f72:	e7f7      	b.n	8008f64 <memmove+0x24>

08008f74 <strncmp>:
 8008f74:	b510      	push	{r4, lr}
 8008f76:	b16a      	cbz	r2, 8008f94 <strncmp+0x20>
 8008f78:	3901      	subs	r1, #1
 8008f7a:	1884      	adds	r4, r0, r2
 8008f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d103      	bne.n	8008f90 <strncmp+0x1c>
 8008f88:	42a0      	cmp	r0, r4
 8008f8a:	d001      	beq.n	8008f90 <strncmp+0x1c>
 8008f8c:	2a00      	cmp	r2, #0
 8008f8e:	d1f5      	bne.n	8008f7c <strncmp+0x8>
 8008f90:	1ad0      	subs	r0, r2, r3
 8008f92:	bd10      	pop	{r4, pc}
 8008f94:	4610      	mov	r0, r2
 8008f96:	e7fc      	b.n	8008f92 <strncmp+0x1e>

08008f98 <nan>:
 8008f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008fa0 <nan+0x8>
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	00000000 	.word	0x00000000
 8008fa4:	7ff80000 	.word	0x7ff80000

08008fa8 <__assert_func>:
 8008fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008faa:	4614      	mov	r4, r2
 8008fac:	461a      	mov	r2, r3
 8008fae:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <__assert_func+0x2c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	68d8      	ldr	r0, [r3, #12]
 8008fb6:	b14c      	cbz	r4, 8008fcc <__assert_func+0x24>
 8008fb8:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <__assert_func+0x30>)
 8008fba:	9100      	str	r1, [sp, #0]
 8008fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fc0:	4906      	ldr	r1, [pc, #24]	; (8008fdc <__assert_func+0x34>)
 8008fc2:	462b      	mov	r3, r5
 8008fc4:	f000 fb9a 	bl	80096fc <fiprintf>
 8008fc8:	f000 fbaa 	bl	8009720 <abort>
 8008fcc:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <__assert_func+0x38>)
 8008fce:	461c      	mov	r4, r3
 8008fd0:	e7f3      	b.n	8008fba <__assert_func+0x12>
 8008fd2:	bf00      	nop
 8008fd4:	20000790 	.word	0x20000790
 8008fd8:	0801699a 	.word	0x0801699a
 8008fdc:	080169a7 	.word	0x080169a7
 8008fe0:	080169d5 	.word	0x080169d5

08008fe4 <_calloc_r>:
 8008fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fe6:	fba1 2402 	umull	r2, r4, r1, r2
 8008fea:	b94c      	cbnz	r4, 8009000 <_calloc_r+0x1c>
 8008fec:	4611      	mov	r1, r2
 8008fee:	9201      	str	r2, [sp, #4]
 8008ff0:	f7fc fa5e 	bl	80054b0 <_malloc_r>
 8008ff4:	9a01      	ldr	r2, [sp, #4]
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	b930      	cbnz	r0, 8009008 <_calloc_r+0x24>
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	b003      	add	sp, #12
 8008ffe:	bd30      	pop	{r4, r5, pc}
 8009000:	220c      	movs	r2, #12
 8009002:	6002      	str	r2, [r0, #0]
 8009004:	2500      	movs	r5, #0
 8009006:	e7f8      	b.n	8008ffa <_calloc_r+0x16>
 8009008:	4621      	mov	r1, r4
 800900a:	f7fd fadc 	bl	80065c6 <memset>
 800900e:	e7f4      	b.n	8008ffa <_calloc_r+0x16>

08009010 <rshift>:
 8009010:	6903      	ldr	r3, [r0, #16]
 8009012:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009016:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800901a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800901e:	f100 0414 	add.w	r4, r0, #20
 8009022:	dd45      	ble.n	80090b0 <rshift+0xa0>
 8009024:	f011 011f 	ands.w	r1, r1, #31
 8009028:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800902c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009030:	d10c      	bne.n	800904c <rshift+0x3c>
 8009032:	f100 0710 	add.w	r7, r0, #16
 8009036:	4629      	mov	r1, r5
 8009038:	42b1      	cmp	r1, r6
 800903a:	d334      	bcc.n	80090a6 <rshift+0x96>
 800903c:	1a9b      	subs	r3, r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	1eea      	subs	r2, r5, #3
 8009042:	4296      	cmp	r6, r2
 8009044:	bf38      	it	cc
 8009046:	2300      	movcc	r3, #0
 8009048:	4423      	add	r3, r4
 800904a:	e015      	b.n	8009078 <rshift+0x68>
 800904c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009050:	f1c1 0820 	rsb	r8, r1, #32
 8009054:	40cf      	lsrs	r7, r1
 8009056:	f105 0e04 	add.w	lr, r5, #4
 800905a:	46a1      	mov	r9, r4
 800905c:	4576      	cmp	r6, lr
 800905e:	46f4      	mov	ip, lr
 8009060:	d815      	bhi.n	800908e <rshift+0x7e>
 8009062:	1a9a      	subs	r2, r3, r2
 8009064:	0092      	lsls	r2, r2, #2
 8009066:	3a04      	subs	r2, #4
 8009068:	3501      	adds	r5, #1
 800906a:	42ae      	cmp	r6, r5
 800906c:	bf38      	it	cc
 800906e:	2200      	movcc	r2, #0
 8009070:	18a3      	adds	r3, r4, r2
 8009072:	50a7      	str	r7, [r4, r2]
 8009074:	b107      	cbz	r7, 8009078 <rshift+0x68>
 8009076:	3304      	adds	r3, #4
 8009078:	1b1a      	subs	r2, r3, r4
 800907a:	42a3      	cmp	r3, r4
 800907c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009080:	bf08      	it	eq
 8009082:	2300      	moveq	r3, #0
 8009084:	6102      	str	r2, [r0, #16]
 8009086:	bf08      	it	eq
 8009088:	6143      	streq	r3, [r0, #20]
 800908a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800908e:	f8dc c000 	ldr.w	ip, [ip]
 8009092:	fa0c fc08 	lsl.w	ip, ip, r8
 8009096:	ea4c 0707 	orr.w	r7, ip, r7
 800909a:	f849 7b04 	str.w	r7, [r9], #4
 800909e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090a2:	40cf      	lsrs	r7, r1
 80090a4:	e7da      	b.n	800905c <rshift+0x4c>
 80090a6:	f851 cb04 	ldr.w	ip, [r1], #4
 80090aa:	f847 cf04 	str.w	ip, [r7, #4]!
 80090ae:	e7c3      	b.n	8009038 <rshift+0x28>
 80090b0:	4623      	mov	r3, r4
 80090b2:	e7e1      	b.n	8009078 <rshift+0x68>

080090b4 <__hexdig_fun>:
 80090b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090b8:	2b09      	cmp	r3, #9
 80090ba:	d802      	bhi.n	80090c2 <__hexdig_fun+0xe>
 80090bc:	3820      	subs	r0, #32
 80090be:	b2c0      	uxtb	r0, r0
 80090c0:	4770      	bx	lr
 80090c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090c6:	2b05      	cmp	r3, #5
 80090c8:	d801      	bhi.n	80090ce <__hexdig_fun+0x1a>
 80090ca:	3847      	subs	r0, #71	; 0x47
 80090cc:	e7f7      	b.n	80090be <__hexdig_fun+0xa>
 80090ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090d2:	2b05      	cmp	r3, #5
 80090d4:	d801      	bhi.n	80090da <__hexdig_fun+0x26>
 80090d6:	3827      	subs	r0, #39	; 0x27
 80090d8:	e7f1      	b.n	80090be <__hexdig_fun+0xa>
 80090da:	2000      	movs	r0, #0
 80090dc:	4770      	bx	lr
	...

080090e0 <__gethex>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	4617      	mov	r7, r2
 80090e6:	680a      	ldr	r2, [r1, #0]
 80090e8:	b085      	sub	sp, #20
 80090ea:	f102 0b02 	add.w	fp, r2, #2
 80090ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80090f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80090f6:	4681      	mov	r9, r0
 80090f8:	468a      	mov	sl, r1
 80090fa:	9302      	str	r3, [sp, #8]
 80090fc:	32fe      	adds	r2, #254	; 0xfe
 80090fe:	eb02 030b 	add.w	r3, r2, fp
 8009102:	46d8      	mov	r8, fp
 8009104:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	2830      	cmp	r0, #48	; 0x30
 800910c:	d0f7      	beq.n	80090fe <__gethex+0x1e>
 800910e:	f7ff ffd1 	bl	80090b4 <__hexdig_fun>
 8009112:	4604      	mov	r4, r0
 8009114:	2800      	cmp	r0, #0
 8009116:	d138      	bne.n	800918a <__gethex+0xaa>
 8009118:	49a7      	ldr	r1, [pc, #668]	; (80093b8 <__gethex+0x2d8>)
 800911a:	2201      	movs	r2, #1
 800911c:	4640      	mov	r0, r8
 800911e:	f7ff ff29 	bl	8008f74 <strncmp>
 8009122:	4606      	mov	r6, r0
 8009124:	2800      	cmp	r0, #0
 8009126:	d169      	bne.n	80091fc <__gethex+0x11c>
 8009128:	f898 0001 	ldrb.w	r0, [r8, #1]
 800912c:	465d      	mov	r5, fp
 800912e:	f7ff ffc1 	bl	80090b4 <__hexdig_fun>
 8009132:	2800      	cmp	r0, #0
 8009134:	d064      	beq.n	8009200 <__gethex+0x120>
 8009136:	465a      	mov	r2, fp
 8009138:	7810      	ldrb	r0, [r2, #0]
 800913a:	2830      	cmp	r0, #48	; 0x30
 800913c:	4690      	mov	r8, r2
 800913e:	f102 0201 	add.w	r2, r2, #1
 8009142:	d0f9      	beq.n	8009138 <__gethex+0x58>
 8009144:	f7ff ffb6 	bl	80090b4 <__hexdig_fun>
 8009148:	2301      	movs	r3, #1
 800914a:	fab0 f480 	clz	r4, r0
 800914e:	0964      	lsrs	r4, r4, #5
 8009150:	465e      	mov	r6, fp
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	4642      	mov	r2, r8
 8009156:	4615      	mov	r5, r2
 8009158:	3201      	adds	r2, #1
 800915a:	7828      	ldrb	r0, [r5, #0]
 800915c:	f7ff ffaa 	bl	80090b4 <__hexdig_fun>
 8009160:	2800      	cmp	r0, #0
 8009162:	d1f8      	bne.n	8009156 <__gethex+0x76>
 8009164:	4994      	ldr	r1, [pc, #592]	; (80093b8 <__gethex+0x2d8>)
 8009166:	2201      	movs	r2, #1
 8009168:	4628      	mov	r0, r5
 800916a:	f7ff ff03 	bl	8008f74 <strncmp>
 800916e:	b978      	cbnz	r0, 8009190 <__gethex+0xb0>
 8009170:	b946      	cbnz	r6, 8009184 <__gethex+0xa4>
 8009172:	1c6e      	adds	r6, r5, #1
 8009174:	4632      	mov	r2, r6
 8009176:	4615      	mov	r5, r2
 8009178:	3201      	adds	r2, #1
 800917a:	7828      	ldrb	r0, [r5, #0]
 800917c:	f7ff ff9a 	bl	80090b4 <__hexdig_fun>
 8009180:	2800      	cmp	r0, #0
 8009182:	d1f8      	bne.n	8009176 <__gethex+0x96>
 8009184:	1b73      	subs	r3, r6, r5
 8009186:	009e      	lsls	r6, r3, #2
 8009188:	e004      	b.n	8009194 <__gethex+0xb4>
 800918a:	2400      	movs	r4, #0
 800918c:	4626      	mov	r6, r4
 800918e:	e7e1      	b.n	8009154 <__gethex+0x74>
 8009190:	2e00      	cmp	r6, #0
 8009192:	d1f7      	bne.n	8009184 <__gethex+0xa4>
 8009194:	782b      	ldrb	r3, [r5, #0]
 8009196:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800919a:	2b50      	cmp	r3, #80	; 0x50
 800919c:	d13d      	bne.n	800921a <__gethex+0x13a>
 800919e:	786b      	ldrb	r3, [r5, #1]
 80091a0:	2b2b      	cmp	r3, #43	; 0x2b
 80091a2:	d02f      	beq.n	8009204 <__gethex+0x124>
 80091a4:	2b2d      	cmp	r3, #45	; 0x2d
 80091a6:	d031      	beq.n	800920c <__gethex+0x12c>
 80091a8:	1c69      	adds	r1, r5, #1
 80091aa:	f04f 0b00 	mov.w	fp, #0
 80091ae:	7808      	ldrb	r0, [r1, #0]
 80091b0:	f7ff ff80 	bl	80090b4 <__hexdig_fun>
 80091b4:	1e42      	subs	r2, r0, #1
 80091b6:	b2d2      	uxtb	r2, r2
 80091b8:	2a18      	cmp	r2, #24
 80091ba:	d82e      	bhi.n	800921a <__gethex+0x13a>
 80091bc:	f1a0 0210 	sub.w	r2, r0, #16
 80091c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091c4:	f7ff ff76 	bl	80090b4 <__hexdig_fun>
 80091c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80091cc:	fa5f fc8c 	uxtb.w	ip, ip
 80091d0:	f1bc 0f18 	cmp.w	ip, #24
 80091d4:	d91d      	bls.n	8009212 <__gethex+0x132>
 80091d6:	f1bb 0f00 	cmp.w	fp, #0
 80091da:	d000      	beq.n	80091de <__gethex+0xfe>
 80091dc:	4252      	negs	r2, r2
 80091de:	4416      	add	r6, r2
 80091e0:	f8ca 1000 	str.w	r1, [sl]
 80091e4:	b1dc      	cbz	r4, 800921e <__gethex+0x13e>
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bf14      	ite	ne
 80091ec:	f04f 0800 	movne.w	r8, #0
 80091f0:	f04f 0806 	moveq.w	r8, #6
 80091f4:	4640      	mov	r0, r8
 80091f6:	b005      	add	sp, #20
 80091f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fc:	4645      	mov	r5, r8
 80091fe:	4626      	mov	r6, r4
 8009200:	2401      	movs	r4, #1
 8009202:	e7c7      	b.n	8009194 <__gethex+0xb4>
 8009204:	f04f 0b00 	mov.w	fp, #0
 8009208:	1ca9      	adds	r1, r5, #2
 800920a:	e7d0      	b.n	80091ae <__gethex+0xce>
 800920c:	f04f 0b01 	mov.w	fp, #1
 8009210:	e7fa      	b.n	8009208 <__gethex+0x128>
 8009212:	230a      	movs	r3, #10
 8009214:	fb03 0002 	mla	r0, r3, r2, r0
 8009218:	e7d0      	b.n	80091bc <__gethex+0xdc>
 800921a:	4629      	mov	r1, r5
 800921c:	e7e0      	b.n	80091e0 <__gethex+0x100>
 800921e:	eba5 0308 	sub.w	r3, r5, r8
 8009222:	3b01      	subs	r3, #1
 8009224:	4621      	mov	r1, r4
 8009226:	2b07      	cmp	r3, #7
 8009228:	dc0a      	bgt.n	8009240 <__gethex+0x160>
 800922a:	4648      	mov	r0, r9
 800922c:	f7fe f936 	bl	800749c <_Balloc>
 8009230:	4604      	mov	r4, r0
 8009232:	b940      	cbnz	r0, 8009246 <__gethex+0x166>
 8009234:	4b61      	ldr	r3, [pc, #388]	; (80093bc <__gethex+0x2dc>)
 8009236:	4602      	mov	r2, r0
 8009238:	21e4      	movs	r1, #228	; 0xe4
 800923a:	4861      	ldr	r0, [pc, #388]	; (80093c0 <__gethex+0x2e0>)
 800923c:	f7ff feb4 	bl	8008fa8 <__assert_func>
 8009240:	3101      	adds	r1, #1
 8009242:	105b      	asrs	r3, r3, #1
 8009244:	e7ef      	b.n	8009226 <__gethex+0x146>
 8009246:	f100 0a14 	add.w	sl, r0, #20
 800924a:	2300      	movs	r3, #0
 800924c:	495a      	ldr	r1, [pc, #360]	; (80093b8 <__gethex+0x2d8>)
 800924e:	f8cd a004 	str.w	sl, [sp, #4]
 8009252:	469b      	mov	fp, r3
 8009254:	45a8      	cmp	r8, r5
 8009256:	d342      	bcc.n	80092de <__gethex+0x1fe>
 8009258:	9801      	ldr	r0, [sp, #4]
 800925a:	f840 bb04 	str.w	fp, [r0], #4
 800925e:	eba0 000a 	sub.w	r0, r0, sl
 8009262:	1080      	asrs	r0, r0, #2
 8009264:	6120      	str	r0, [r4, #16]
 8009266:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800926a:	4658      	mov	r0, fp
 800926c:	f7fe fa08 	bl	8007680 <__hi0bits>
 8009270:	683d      	ldr	r5, [r7, #0]
 8009272:	eba8 0000 	sub.w	r0, r8, r0
 8009276:	42a8      	cmp	r0, r5
 8009278:	dd59      	ble.n	800932e <__gethex+0x24e>
 800927a:	eba0 0805 	sub.w	r8, r0, r5
 800927e:	4641      	mov	r1, r8
 8009280:	4620      	mov	r0, r4
 8009282:	f7fe fd97 	bl	8007db4 <__any_on>
 8009286:	4683      	mov	fp, r0
 8009288:	b1b8      	cbz	r0, 80092ba <__gethex+0x1da>
 800928a:	f108 33ff 	add.w	r3, r8, #4294967295
 800928e:	1159      	asrs	r1, r3, #5
 8009290:	f003 021f 	and.w	r2, r3, #31
 8009294:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009298:	f04f 0b01 	mov.w	fp, #1
 800929c:	fa0b f202 	lsl.w	r2, fp, r2
 80092a0:	420a      	tst	r2, r1
 80092a2:	d00a      	beq.n	80092ba <__gethex+0x1da>
 80092a4:	455b      	cmp	r3, fp
 80092a6:	dd06      	ble.n	80092b6 <__gethex+0x1d6>
 80092a8:	f1a8 0102 	sub.w	r1, r8, #2
 80092ac:	4620      	mov	r0, r4
 80092ae:	f7fe fd81 	bl	8007db4 <__any_on>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d138      	bne.n	8009328 <__gethex+0x248>
 80092b6:	f04f 0b02 	mov.w	fp, #2
 80092ba:	4641      	mov	r1, r8
 80092bc:	4620      	mov	r0, r4
 80092be:	f7ff fea7 	bl	8009010 <rshift>
 80092c2:	4446      	add	r6, r8
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	42b3      	cmp	r3, r6
 80092c8:	da41      	bge.n	800934e <__gethex+0x26e>
 80092ca:	4621      	mov	r1, r4
 80092cc:	4648      	mov	r0, r9
 80092ce:	f7fe f925 	bl	800751c <_Bfree>
 80092d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092d4:	2300      	movs	r3, #0
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80092dc:	e78a      	b.n	80091f4 <__gethex+0x114>
 80092de:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80092e2:	2a2e      	cmp	r2, #46	; 0x2e
 80092e4:	d014      	beq.n	8009310 <__gethex+0x230>
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d106      	bne.n	80092f8 <__gethex+0x218>
 80092ea:	9b01      	ldr	r3, [sp, #4]
 80092ec:	f843 bb04 	str.w	fp, [r3], #4
 80092f0:	f04f 0b00 	mov.w	fp, #0
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	465b      	mov	r3, fp
 80092f8:	7828      	ldrb	r0, [r5, #0]
 80092fa:	9303      	str	r3, [sp, #12]
 80092fc:	f7ff feda 	bl	80090b4 <__hexdig_fun>
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	f000 000f 	and.w	r0, r0, #15
 8009306:	4098      	lsls	r0, r3
 8009308:	ea4b 0b00 	orr.w	fp, fp, r0
 800930c:	3304      	adds	r3, #4
 800930e:	e7a1      	b.n	8009254 <__gethex+0x174>
 8009310:	45a8      	cmp	r8, r5
 8009312:	d8e8      	bhi.n	80092e6 <__gethex+0x206>
 8009314:	2201      	movs	r2, #1
 8009316:	4628      	mov	r0, r5
 8009318:	9303      	str	r3, [sp, #12]
 800931a:	f7ff fe2b 	bl	8008f74 <strncmp>
 800931e:	4926      	ldr	r1, [pc, #152]	; (80093b8 <__gethex+0x2d8>)
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	2800      	cmp	r0, #0
 8009324:	d1df      	bne.n	80092e6 <__gethex+0x206>
 8009326:	e795      	b.n	8009254 <__gethex+0x174>
 8009328:	f04f 0b03 	mov.w	fp, #3
 800932c:	e7c5      	b.n	80092ba <__gethex+0x1da>
 800932e:	da0b      	bge.n	8009348 <__gethex+0x268>
 8009330:	eba5 0800 	sub.w	r8, r5, r0
 8009334:	4621      	mov	r1, r4
 8009336:	4642      	mov	r2, r8
 8009338:	4648      	mov	r0, r9
 800933a:	f7fe fb09 	bl	8007950 <__lshift>
 800933e:	eba6 0608 	sub.w	r6, r6, r8
 8009342:	4604      	mov	r4, r0
 8009344:	f100 0a14 	add.w	sl, r0, #20
 8009348:	f04f 0b00 	mov.w	fp, #0
 800934c:	e7ba      	b.n	80092c4 <__gethex+0x1e4>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	42b3      	cmp	r3, r6
 8009352:	dd73      	ble.n	800943c <__gethex+0x35c>
 8009354:	1b9e      	subs	r6, r3, r6
 8009356:	42b5      	cmp	r5, r6
 8009358:	dc34      	bgt.n	80093c4 <__gethex+0x2e4>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d023      	beq.n	80093a8 <__gethex+0x2c8>
 8009360:	2b03      	cmp	r3, #3
 8009362:	d025      	beq.n	80093b0 <__gethex+0x2d0>
 8009364:	2b01      	cmp	r3, #1
 8009366:	d115      	bne.n	8009394 <__gethex+0x2b4>
 8009368:	42b5      	cmp	r5, r6
 800936a:	d113      	bne.n	8009394 <__gethex+0x2b4>
 800936c:	2d01      	cmp	r5, #1
 800936e:	d10b      	bne.n	8009388 <__gethex+0x2a8>
 8009370:	9a02      	ldr	r2, [sp, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6013      	str	r3, [r2, #0]
 8009376:	2301      	movs	r3, #1
 8009378:	6123      	str	r3, [r4, #16]
 800937a:	f8ca 3000 	str.w	r3, [sl]
 800937e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009380:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009384:	601c      	str	r4, [r3, #0]
 8009386:	e735      	b.n	80091f4 <__gethex+0x114>
 8009388:	1e69      	subs	r1, r5, #1
 800938a:	4620      	mov	r0, r4
 800938c:	f7fe fd12 	bl	8007db4 <__any_on>
 8009390:	2800      	cmp	r0, #0
 8009392:	d1ed      	bne.n	8009370 <__gethex+0x290>
 8009394:	4621      	mov	r1, r4
 8009396:	4648      	mov	r0, r9
 8009398:	f7fe f8c0 	bl	800751c <_Bfree>
 800939c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800939e:	2300      	movs	r3, #0
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80093a6:	e725      	b.n	80091f4 <__gethex+0x114>
 80093a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1f2      	bne.n	8009394 <__gethex+0x2b4>
 80093ae:	e7df      	b.n	8009370 <__gethex+0x290>
 80093b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1dc      	bne.n	8009370 <__gethex+0x290>
 80093b6:	e7ed      	b.n	8009394 <__gethex+0x2b4>
 80093b8:	0801682c 	.word	0x0801682c
 80093bc:	080166c5 	.word	0x080166c5
 80093c0:	080169d6 	.word	0x080169d6
 80093c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80093c8:	f1bb 0f00 	cmp.w	fp, #0
 80093cc:	d133      	bne.n	8009436 <__gethex+0x356>
 80093ce:	f1b8 0f00 	cmp.w	r8, #0
 80093d2:	d004      	beq.n	80093de <__gethex+0x2fe>
 80093d4:	4641      	mov	r1, r8
 80093d6:	4620      	mov	r0, r4
 80093d8:	f7fe fcec 	bl	8007db4 <__any_on>
 80093dc:	4683      	mov	fp, r0
 80093de:	ea4f 1268 	mov.w	r2, r8, asr #5
 80093e2:	2301      	movs	r3, #1
 80093e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80093e8:	f008 081f 	and.w	r8, r8, #31
 80093ec:	fa03 f308 	lsl.w	r3, r3, r8
 80093f0:	4213      	tst	r3, r2
 80093f2:	4631      	mov	r1, r6
 80093f4:	4620      	mov	r0, r4
 80093f6:	bf18      	it	ne
 80093f8:	f04b 0b02 	orrne.w	fp, fp, #2
 80093fc:	1bad      	subs	r5, r5, r6
 80093fe:	f7ff fe07 	bl	8009010 <rshift>
 8009402:	687e      	ldr	r6, [r7, #4]
 8009404:	f04f 0802 	mov.w	r8, #2
 8009408:	f1bb 0f00 	cmp.w	fp, #0
 800940c:	d04a      	beq.n	80094a4 <__gethex+0x3c4>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b02      	cmp	r3, #2
 8009412:	d016      	beq.n	8009442 <__gethex+0x362>
 8009414:	2b03      	cmp	r3, #3
 8009416:	d018      	beq.n	800944a <__gethex+0x36a>
 8009418:	2b01      	cmp	r3, #1
 800941a:	d109      	bne.n	8009430 <__gethex+0x350>
 800941c:	f01b 0f02 	tst.w	fp, #2
 8009420:	d006      	beq.n	8009430 <__gethex+0x350>
 8009422:	f8da 3000 	ldr.w	r3, [sl]
 8009426:	ea4b 0b03 	orr.w	fp, fp, r3
 800942a:	f01b 0f01 	tst.w	fp, #1
 800942e:	d10f      	bne.n	8009450 <__gethex+0x370>
 8009430:	f048 0810 	orr.w	r8, r8, #16
 8009434:	e036      	b.n	80094a4 <__gethex+0x3c4>
 8009436:	f04f 0b01 	mov.w	fp, #1
 800943a:	e7d0      	b.n	80093de <__gethex+0x2fe>
 800943c:	f04f 0801 	mov.w	r8, #1
 8009440:	e7e2      	b.n	8009408 <__gethex+0x328>
 8009442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009444:	f1c3 0301 	rsb	r3, r3, #1
 8009448:	930f      	str	r3, [sp, #60]	; 0x3c
 800944a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800944c:	2b00      	cmp	r3, #0
 800944e:	d0ef      	beq.n	8009430 <__gethex+0x350>
 8009450:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009454:	f104 0214 	add.w	r2, r4, #20
 8009458:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800945c:	9301      	str	r3, [sp, #4]
 800945e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009462:	2300      	movs	r3, #0
 8009464:	4694      	mov	ip, r2
 8009466:	f852 1b04 	ldr.w	r1, [r2], #4
 800946a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800946e:	d01e      	beq.n	80094ae <__gethex+0x3ce>
 8009470:	3101      	adds	r1, #1
 8009472:	f8cc 1000 	str.w	r1, [ip]
 8009476:	f1b8 0f02 	cmp.w	r8, #2
 800947a:	f104 0214 	add.w	r2, r4, #20
 800947e:	d13d      	bne.n	80094fc <__gethex+0x41c>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	3b01      	subs	r3, #1
 8009484:	42ab      	cmp	r3, r5
 8009486:	d10b      	bne.n	80094a0 <__gethex+0x3c0>
 8009488:	1169      	asrs	r1, r5, #5
 800948a:	2301      	movs	r3, #1
 800948c:	f005 051f 	and.w	r5, r5, #31
 8009490:	fa03 f505 	lsl.w	r5, r3, r5
 8009494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009498:	421d      	tst	r5, r3
 800949a:	bf18      	it	ne
 800949c:	f04f 0801 	movne.w	r8, #1
 80094a0:	f048 0820 	orr.w	r8, r8, #32
 80094a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094a6:	601c      	str	r4, [r3, #0]
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	601e      	str	r6, [r3, #0]
 80094ac:	e6a2      	b.n	80091f4 <__gethex+0x114>
 80094ae:	4290      	cmp	r0, r2
 80094b0:	f842 3c04 	str.w	r3, [r2, #-4]
 80094b4:	d8d6      	bhi.n	8009464 <__gethex+0x384>
 80094b6:	68a2      	ldr	r2, [r4, #8]
 80094b8:	4593      	cmp	fp, r2
 80094ba:	db17      	blt.n	80094ec <__gethex+0x40c>
 80094bc:	6861      	ldr	r1, [r4, #4]
 80094be:	4648      	mov	r0, r9
 80094c0:	3101      	adds	r1, #1
 80094c2:	f7fd ffeb 	bl	800749c <_Balloc>
 80094c6:	4682      	mov	sl, r0
 80094c8:	b918      	cbnz	r0, 80094d2 <__gethex+0x3f2>
 80094ca:	4b1b      	ldr	r3, [pc, #108]	; (8009538 <__gethex+0x458>)
 80094cc:	4602      	mov	r2, r0
 80094ce:	2184      	movs	r1, #132	; 0x84
 80094d0:	e6b3      	b.n	800923a <__gethex+0x15a>
 80094d2:	6922      	ldr	r2, [r4, #16]
 80094d4:	3202      	adds	r2, #2
 80094d6:	f104 010c 	add.w	r1, r4, #12
 80094da:	0092      	lsls	r2, r2, #2
 80094dc:	300c      	adds	r0, #12
 80094de:	f7fd f902 	bl	80066e6 <memcpy>
 80094e2:	4621      	mov	r1, r4
 80094e4:	4648      	mov	r0, r9
 80094e6:	f7fe f819 	bl	800751c <_Bfree>
 80094ea:	4654      	mov	r4, sl
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	1c51      	adds	r1, r2, #1
 80094f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80094f4:	6121      	str	r1, [r4, #16]
 80094f6:	2101      	movs	r1, #1
 80094f8:	6151      	str	r1, [r2, #20]
 80094fa:	e7bc      	b.n	8009476 <__gethex+0x396>
 80094fc:	6921      	ldr	r1, [r4, #16]
 80094fe:	4559      	cmp	r1, fp
 8009500:	dd0b      	ble.n	800951a <__gethex+0x43a>
 8009502:	2101      	movs	r1, #1
 8009504:	4620      	mov	r0, r4
 8009506:	f7ff fd83 	bl	8009010 <rshift>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	3601      	adds	r6, #1
 800950e:	42b3      	cmp	r3, r6
 8009510:	f6ff aedb 	blt.w	80092ca <__gethex+0x1ea>
 8009514:	f04f 0801 	mov.w	r8, #1
 8009518:	e7c2      	b.n	80094a0 <__gethex+0x3c0>
 800951a:	f015 051f 	ands.w	r5, r5, #31
 800951e:	d0f9      	beq.n	8009514 <__gethex+0x434>
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	441a      	add	r2, r3
 8009524:	f1c5 0520 	rsb	r5, r5, #32
 8009528:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800952c:	f7fe f8a8 	bl	8007680 <__hi0bits>
 8009530:	42a8      	cmp	r0, r5
 8009532:	dbe6      	blt.n	8009502 <__gethex+0x422>
 8009534:	e7ee      	b.n	8009514 <__gethex+0x434>
 8009536:	bf00      	nop
 8009538:	080166c5 	.word	0x080166c5

0800953c <L_shift>:
 800953c:	f1c2 0208 	rsb	r2, r2, #8
 8009540:	0092      	lsls	r2, r2, #2
 8009542:	b570      	push	{r4, r5, r6, lr}
 8009544:	f1c2 0620 	rsb	r6, r2, #32
 8009548:	6843      	ldr	r3, [r0, #4]
 800954a:	6804      	ldr	r4, [r0, #0]
 800954c:	fa03 f506 	lsl.w	r5, r3, r6
 8009550:	432c      	orrs	r4, r5
 8009552:	40d3      	lsrs	r3, r2
 8009554:	6004      	str	r4, [r0, #0]
 8009556:	f840 3f04 	str.w	r3, [r0, #4]!
 800955a:	4288      	cmp	r0, r1
 800955c:	d3f4      	bcc.n	8009548 <L_shift+0xc>
 800955e:	bd70      	pop	{r4, r5, r6, pc}

08009560 <__match>:
 8009560:	b530      	push	{r4, r5, lr}
 8009562:	6803      	ldr	r3, [r0, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800956a:	b914      	cbnz	r4, 8009572 <__match+0x12>
 800956c:	6003      	str	r3, [r0, #0]
 800956e:	2001      	movs	r0, #1
 8009570:	bd30      	pop	{r4, r5, pc}
 8009572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009576:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800957a:	2d19      	cmp	r5, #25
 800957c:	bf98      	it	ls
 800957e:	3220      	addls	r2, #32
 8009580:	42a2      	cmp	r2, r4
 8009582:	d0f0      	beq.n	8009566 <__match+0x6>
 8009584:	2000      	movs	r0, #0
 8009586:	e7f3      	b.n	8009570 <__match+0x10>

08009588 <__hexnan>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	680b      	ldr	r3, [r1, #0]
 800958e:	6801      	ldr	r1, [r0, #0]
 8009590:	115e      	asrs	r6, r3, #5
 8009592:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009596:	f013 031f 	ands.w	r3, r3, #31
 800959a:	b087      	sub	sp, #28
 800959c:	bf18      	it	ne
 800959e:	3604      	addne	r6, #4
 80095a0:	2500      	movs	r5, #0
 80095a2:	1f37      	subs	r7, r6, #4
 80095a4:	4682      	mov	sl, r0
 80095a6:	4690      	mov	r8, r2
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80095ae:	46b9      	mov	r9, r7
 80095b0:	463c      	mov	r4, r7
 80095b2:	9502      	str	r5, [sp, #8]
 80095b4:	46ab      	mov	fp, r5
 80095b6:	784a      	ldrb	r2, [r1, #1]
 80095b8:	1c4b      	adds	r3, r1, #1
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	b342      	cbz	r2, 8009610 <__hexnan+0x88>
 80095be:	4610      	mov	r0, r2
 80095c0:	9105      	str	r1, [sp, #20]
 80095c2:	9204      	str	r2, [sp, #16]
 80095c4:	f7ff fd76 	bl	80090b4 <__hexdig_fun>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d14f      	bne.n	800966c <__hexnan+0xe4>
 80095cc:	9a04      	ldr	r2, [sp, #16]
 80095ce:	9905      	ldr	r1, [sp, #20]
 80095d0:	2a20      	cmp	r2, #32
 80095d2:	d818      	bhi.n	8009606 <__hexnan+0x7e>
 80095d4:	9b02      	ldr	r3, [sp, #8]
 80095d6:	459b      	cmp	fp, r3
 80095d8:	dd13      	ble.n	8009602 <__hexnan+0x7a>
 80095da:	454c      	cmp	r4, r9
 80095dc:	d206      	bcs.n	80095ec <__hexnan+0x64>
 80095de:	2d07      	cmp	r5, #7
 80095e0:	dc04      	bgt.n	80095ec <__hexnan+0x64>
 80095e2:	462a      	mov	r2, r5
 80095e4:	4649      	mov	r1, r9
 80095e6:	4620      	mov	r0, r4
 80095e8:	f7ff ffa8 	bl	800953c <L_shift>
 80095ec:	4544      	cmp	r4, r8
 80095ee:	d950      	bls.n	8009692 <__hexnan+0x10a>
 80095f0:	2300      	movs	r3, #0
 80095f2:	f1a4 0904 	sub.w	r9, r4, #4
 80095f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80095fa:	f8cd b008 	str.w	fp, [sp, #8]
 80095fe:	464c      	mov	r4, r9
 8009600:	461d      	mov	r5, r3
 8009602:	9903      	ldr	r1, [sp, #12]
 8009604:	e7d7      	b.n	80095b6 <__hexnan+0x2e>
 8009606:	2a29      	cmp	r2, #41	; 0x29
 8009608:	d155      	bne.n	80096b6 <__hexnan+0x12e>
 800960a:	3102      	adds	r1, #2
 800960c:	f8ca 1000 	str.w	r1, [sl]
 8009610:	f1bb 0f00 	cmp.w	fp, #0
 8009614:	d04f      	beq.n	80096b6 <__hexnan+0x12e>
 8009616:	454c      	cmp	r4, r9
 8009618:	d206      	bcs.n	8009628 <__hexnan+0xa0>
 800961a:	2d07      	cmp	r5, #7
 800961c:	dc04      	bgt.n	8009628 <__hexnan+0xa0>
 800961e:	462a      	mov	r2, r5
 8009620:	4649      	mov	r1, r9
 8009622:	4620      	mov	r0, r4
 8009624:	f7ff ff8a 	bl	800953c <L_shift>
 8009628:	4544      	cmp	r4, r8
 800962a:	d934      	bls.n	8009696 <__hexnan+0x10e>
 800962c:	f1a8 0204 	sub.w	r2, r8, #4
 8009630:	4623      	mov	r3, r4
 8009632:	f853 1b04 	ldr.w	r1, [r3], #4
 8009636:	f842 1f04 	str.w	r1, [r2, #4]!
 800963a:	429f      	cmp	r7, r3
 800963c:	d2f9      	bcs.n	8009632 <__hexnan+0xaa>
 800963e:	1b3b      	subs	r3, r7, r4
 8009640:	f023 0303 	bic.w	r3, r3, #3
 8009644:	3304      	adds	r3, #4
 8009646:	3e03      	subs	r6, #3
 8009648:	3401      	adds	r4, #1
 800964a:	42a6      	cmp	r6, r4
 800964c:	bf38      	it	cc
 800964e:	2304      	movcc	r3, #4
 8009650:	4443      	add	r3, r8
 8009652:	2200      	movs	r2, #0
 8009654:	f843 2b04 	str.w	r2, [r3], #4
 8009658:	429f      	cmp	r7, r3
 800965a:	d2fb      	bcs.n	8009654 <__hexnan+0xcc>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	b91b      	cbnz	r3, 8009668 <__hexnan+0xe0>
 8009660:	4547      	cmp	r7, r8
 8009662:	d126      	bne.n	80096b2 <__hexnan+0x12a>
 8009664:	2301      	movs	r3, #1
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	2005      	movs	r0, #5
 800966a:	e025      	b.n	80096b8 <__hexnan+0x130>
 800966c:	3501      	adds	r5, #1
 800966e:	2d08      	cmp	r5, #8
 8009670:	f10b 0b01 	add.w	fp, fp, #1
 8009674:	dd06      	ble.n	8009684 <__hexnan+0xfc>
 8009676:	4544      	cmp	r4, r8
 8009678:	d9c3      	bls.n	8009602 <__hexnan+0x7a>
 800967a:	2300      	movs	r3, #0
 800967c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009680:	2501      	movs	r5, #1
 8009682:	3c04      	subs	r4, #4
 8009684:	6822      	ldr	r2, [r4, #0]
 8009686:	f000 000f 	and.w	r0, r0, #15
 800968a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800968e:	6020      	str	r0, [r4, #0]
 8009690:	e7b7      	b.n	8009602 <__hexnan+0x7a>
 8009692:	2508      	movs	r5, #8
 8009694:	e7b5      	b.n	8009602 <__hexnan+0x7a>
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d0df      	beq.n	800965c <__hexnan+0xd4>
 800969c:	f1c3 0320 	rsb	r3, r3, #32
 80096a0:	f04f 32ff 	mov.w	r2, #4294967295
 80096a4:	40da      	lsrs	r2, r3
 80096a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80096aa:	4013      	ands	r3, r2
 80096ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80096b0:	e7d4      	b.n	800965c <__hexnan+0xd4>
 80096b2:	3f04      	subs	r7, #4
 80096b4:	e7d2      	b.n	800965c <__hexnan+0xd4>
 80096b6:	2004      	movs	r0, #4
 80096b8:	b007      	add	sp, #28
 80096ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096be <__ascii_mbtowc>:
 80096be:	b082      	sub	sp, #8
 80096c0:	b901      	cbnz	r1, 80096c4 <__ascii_mbtowc+0x6>
 80096c2:	a901      	add	r1, sp, #4
 80096c4:	b142      	cbz	r2, 80096d8 <__ascii_mbtowc+0x1a>
 80096c6:	b14b      	cbz	r3, 80096dc <__ascii_mbtowc+0x1e>
 80096c8:	7813      	ldrb	r3, [r2, #0]
 80096ca:	600b      	str	r3, [r1, #0]
 80096cc:	7812      	ldrb	r2, [r2, #0]
 80096ce:	1e10      	subs	r0, r2, #0
 80096d0:	bf18      	it	ne
 80096d2:	2001      	movne	r0, #1
 80096d4:	b002      	add	sp, #8
 80096d6:	4770      	bx	lr
 80096d8:	4610      	mov	r0, r2
 80096da:	e7fb      	b.n	80096d4 <__ascii_mbtowc+0x16>
 80096dc:	f06f 0001 	mvn.w	r0, #1
 80096e0:	e7f8      	b.n	80096d4 <__ascii_mbtowc+0x16>

080096e2 <__ascii_wctomb>:
 80096e2:	b149      	cbz	r1, 80096f8 <__ascii_wctomb+0x16>
 80096e4:	2aff      	cmp	r2, #255	; 0xff
 80096e6:	bf85      	ittet	hi
 80096e8:	238a      	movhi	r3, #138	; 0x8a
 80096ea:	6003      	strhi	r3, [r0, #0]
 80096ec:	700a      	strbls	r2, [r1, #0]
 80096ee:	f04f 30ff 	movhi.w	r0, #4294967295
 80096f2:	bf98      	it	ls
 80096f4:	2001      	movls	r0, #1
 80096f6:	4770      	bx	lr
 80096f8:	4608      	mov	r0, r1
 80096fa:	4770      	bx	lr

080096fc <fiprintf>:
 80096fc:	b40e      	push	{r1, r2, r3}
 80096fe:	b503      	push	{r0, r1, lr}
 8009700:	4601      	mov	r1, r0
 8009702:	ab03      	add	r3, sp, #12
 8009704:	4805      	ldr	r0, [pc, #20]	; (800971c <fiprintf+0x20>)
 8009706:	f853 2b04 	ldr.w	r2, [r3], #4
 800970a:	6800      	ldr	r0, [r0, #0]
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	f000 f837 	bl	8009780 <_vfiprintf_r>
 8009712:	b002      	add	sp, #8
 8009714:	f85d eb04 	ldr.w	lr, [sp], #4
 8009718:	b003      	add	sp, #12
 800971a:	4770      	bx	lr
 800971c:	20000790 	.word	0x20000790

08009720 <abort>:
 8009720:	b508      	push	{r3, lr}
 8009722:	2006      	movs	r0, #6
 8009724:	f000 fa04 	bl	8009b30 <raise>
 8009728:	2001      	movs	r0, #1
 800972a:	f000 fc15 	bl	8009f58 <_exit>

0800972e <__sfputc_r>:
 800972e:	6893      	ldr	r3, [r2, #8]
 8009730:	3b01      	subs	r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	b410      	push	{r4}
 8009736:	6093      	str	r3, [r2, #8]
 8009738:	da08      	bge.n	800974c <__sfputc_r+0x1e>
 800973a:	6994      	ldr	r4, [r2, #24]
 800973c:	42a3      	cmp	r3, r4
 800973e:	db01      	blt.n	8009744 <__sfputc_r+0x16>
 8009740:	290a      	cmp	r1, #10
 8009742:	d103      	bne.n	800974c <__sfputc_r+0x1e>
 8009744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009748:	f000 b934 	b.w	80099b4 <__swbuf_r>
 800974c:	6813      	ldr	r3, [r2, #0]
 800974e:	1c58      	adds	r0, r3, #1
 8009750:	6010      	str	r0, [r2, #0]
 8009752:	7019      	strb	r1, [r3, #0]
 8009754:	4608      	mov	r0, r1
 8009756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800975a:	4770      	bx	lr

0800975c <__sfputs_r>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	4606      	mov	r6, r0
 8009760:	460f      	mov	r7, r1
 8009762:	4614      	mov	r4, r2
 8009764:	18d5      	adds	r5, r2, r3
 8009766:	42ac      	cmp	r4, r5
 8009768:	d101      	bne.n	800976e <__sfputs_r+0x12>
 800976a:	2000      	movs	r0, #0
 800976c:	e007      	b.n	800977e <__sfputs_r+0x22>
 800976e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009772:	463a      	mov	r2, r7
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ffda 	bl	800972e <__sfputc_r>
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	d1f3      	bne.n	8009766 <__sfputs_r+0xa>
 800977e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009780 <_vfiprintf_r>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	460d      	mov	r5, r1
 8009786:	b09d      	sub	sp, #116	; 0x74
 8009788:	4614      	mov	r4, r2
 800978a:	4698      	mov	r8, r3
 800978c:	4606      	mov	r6, r0
 800978e:	b118      	cbz	r0, 8009798 <_vfiprintf_r+0x18>
 8009790:	6a03      	ldr	r3, [r0, #32]
 8009792:	b90b      	cbnz	r3, 8009798 <_vfiprintf_r+0x18>
 8009794:	f7fc fe4a 	bl	800642c <__sinit>
 8009798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800979a:	07d9      	lsls	r1, r3, #31
 800979c:	d405      	bmi.n	80097aa <_vfiprintf_r+0x2a>
 800979e:	89ab      	ldrh	r3, [r5, #12]
 80097a0:	059a      	lsls	r2, r3, #22
 80097a2:	d402      	bmi.n	80097aa <_vfiprintf_r+0x2a>
 80097a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a6:	f7fc ff9c 	bl	80066e2 <__retarget_lock_acquire_recursive>
 80097aa:	89ab      	ldrh	r3, [r5, #12]
 80097ac:	071b      	lsls	r3, r3, #28
 80097ae:	d501      	bpl.n	80097b4 <_vfiprintf_r+0x34>
 80097b0:	692b      	ldr	r3, [r5, #16]
 80097b2:	b99b      	cbnz	r3, 80097dc <_vfiprintf_r+0x5c>
 80097b4:	4629      	mov	r1, r5
 80097b6:	4630      	mov	r0, r6
 80097b8:	f000 f93a 	bl	8009a30 <__swsetup_r>
 80097bc:	b170      	cbz	r0, 80097dc <_vfiprintf_r+0x5c>
 80097be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097c0:	07dc      	lsls	r4, r3, #31
 80097c2:	d504      	bpl.n	80097ce <_vfiprintf_r+0x4e>
 80097c4:	f04f 30ff 	mov.w	r0, #4294967295
 80097c8:	b01d      	add	sp, #116	; 0x74
 80097ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ce:	89ab      	ldrh	r3, [r5, #12]
 80097d0:	0598      	lsls	r0, r3, #22
 80097d2:	d4f7      	bmi.n	80097c4 <_vfiprintf_r+0x44>
 80097d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097d6:	f7fc ff85 	bl	80066e4 <__retarget_lock_release_recursive>
 80097da:	e7f3      	b.n	80097c4 <_vfiprintf_r+0x44>
 80097dc:	2300      	movs	r3, #0
 80097de:	9309      	str	r3, [sp, #36]	; 0x24
 80097e0:	2320      	movs	r3, #32
 80097e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80097ea:	2330      	movs	r3, #48	; 0x30
 80097ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80099a0 <_vfiprintf_r+0x220>
 80097f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097f4:	f04f 0901 	mov.w	r9, #1
 80097f8:	4623      	mov	r3, r4
 80097fa:	469a      	mov	sl, r3
 80097fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009800:	b10a      	cbz	r2, 8009806 <_vfiprintf_r+0x86>
 8009802:	2a25      	cmp	r2, #37	; 0x25
 8009804:	d1f9      	bne.n	80097fa <_vfiprintf_r+0x7a>
 8009806:	ebba 0b04 	subs.w	fp, sl, r4
 800980a:	d00b      	beq.n	8009824 <_vfiprintf_r+0xa4>
 800980c:	465b      	mov	r3, fp
 800980e:	4622      	mov	r2, r4
 8009810:	4629      	mov	r1, r5
 8009812:	4630      	mov	r0, r6
 8009814:	f7ff ffa2 	bl	800975c <__sfputs_r>
 8009818:	3001      	adds	r0, #1
 800981a:	f000 80a9 	beq.w	8009970 <_vfiprintf_r+0x1f0>
 800981e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009820:	445a      	add	r2, fp
 8009822:	9209      	str	r2, [sp, #36]	; 0x24
 8009824:	f89a 3000 	ldrb.w	r3, [sl]
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80a1 	beq.w	8009970 <_vfiprintf_r+0x1f0>
 800982e:	2300      	movs	r3, #0
 8009830:	f04f 32ff 	mov.w	r2, #4294967295
 8009834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009838:	f10a 0a01 	add.w	sl, sl, #1
 800983c:	9304      	str	r3, [sp, #16]
 800983e:	9307      	str	r3, [sp, #28]
 8009840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009844:	931a      	str	r3, [sp, #104]	; 0x68
 8009846:	4654      	mov	r4, sl
 8009848:	2205      	movs	r2, #5
 800984a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984e:	4854      	ldr	r0, [pc, #336]	; (80099a0 <_vfiprintf_r+0x220>)
 8009850:	f7f6 fcc6 	bl	80001e0 <memchr>
 8009854:	9a04      	ldr	r2, [sp, #16]
 8009856:	b9d8      	cbnz	r0, 8009890 <_vfiprintf_r+0x110>
 8009858:	06d1      	lsls	r1, r2, #27
 800985a:	bf44      	itt	mi
 800985c:	2320      	movmi	r3, #32
 800985e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009862:	0713      	lsls	r3, r2, #28
 8009864:	bf44      	itt	mi
 8009866:	232b      	movmi	r3, #43	; 0x2b
 8009868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800986c:	f89a 3000 	ldrb.w	r3, [sl]
 8009870:	2b2a      	cmp	r3, #42	; 0x2a
 8009872:	d015      	beq.n	80098a0 <_vfiprintf_r+0x120>
 8009874:	9a07      	ldr	r2, [sp, #28]
 8009876:	4654      	mov	r4, sl
 8009878:	2000      	movs	r0, #0
 800987a:	f04f 0c0a 	mov.w	ip, #10
 800987e:	4621      	mov	r1, r4
 8009880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009884:	3b30      	subs	r3, #48	; 0x30
 8009886:	2b09      	cmp	r3, #9
 8009888:	d94d      	bls.n	8009926 <_vfiprintf_r+0x1a6>
 800988a:	b1b0      	cbz	r0, 80098ba <_vfiprintf_r+0x13a>
 800988c:	9207      	str	r2, [sp, #28]
 800988e:	e014      	b.n	80098ba <_vfiprintf_r+0x13a>
 8009890:	eba0 0308 	sub.w	r3, r0, r8
 8009894:	fa09 f303 	lsl.w	r3, r9, r3
 8009898:	4313      	orrs	r3, r2
 800989a:	9304      	str	r3, [sp, #16]
 800989c:	46a2      	mov	sl, r4
 800989e:	e7d2      	b.n	8009846 <_vfiprintf_r+0xc6>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	1d19      	adds	r1, r3, #4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	9103      	str	r1, [sp, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bfbb      	ittet	lt
 80098ac:	425b      	neglt	r3, r3
 80098ae:	f042 0202 	orrlt.w	r2, r2, #2
 80098b2:	9307      	strge	r3, [sp, #28]
 80098b4:	9307      	strlt	r3, [sp, #28]
 80098b6:	bfb8      	it	lt
 80098b8:	9204      	strlt	r2, [sp, #16]
 80098ba:	7823      	ldrb	r3, [r4, #0]
 80098bc:	2b2e      	cmp	r3, #46	; 0x2e
 80098be:	d10c      	bne.n	80098da <_vfiprintf_r+0x15a>
 80098c0:	7863      	ldrb	r3, [r4, #1]
 80098c2:	2b2a      	cmp	r3, #42	; 0x2a
 80098c4:	d134      	bne.n	8009930 <_vfiprintf_r+0x1b0>
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	1d1a      	adds	r2, r3, #4
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	9203      	str	r2, [sp, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	bfb8      	it	lt
 80098d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80098d6:	3402      	adds	r4, #2
 80098d8:	9305      	str	r3, [sp, #20]
 80098da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80099b0 <_vfiprintf_r+0x230>
 80098de:	7821      	ldrb	r1, [r4, #0]
 80098e0:	2203      	movs	r2, #3
 80098e2:	4650      	mov	r0, sl
 80098e4:	f7f6 fc7c 	bl	80001e0 <memchr>
 80098e8:	b138      	cbz	r0, 80098fa <_vfiprintf_r+0x17a>
 80098ea:	9b04      	ldr	r3, [sp, #16]
 80098ec:	eba0 000a 	sub.w	r0, r0, sl
 80098f0:	2240      	movs	r2, #64	; 0x40
 80098f2:	4082      	lsls	r2, r0
 80098f4:	4313      	orrs	r3, r2
 80098f6:	3401      	adds	r4, #1
 80098f8:	9304      	str	r3, [sp, #16]
 80098fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fe:	4829      	ldr	r0, [pc, #164]	; (80099a4 <_vfiprintf_r+0x224>)
 8009900:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009904:	2206      	movs	r2, #6
 8009906:	f7f6 fc6b 	bl	80001e0 <memchr>
 800990a:	2800      	cmp	r0, #0
 800990c:	d03f      	beq.n	800998e <_vfiprintf_r+0x20e>
 800990e:	4b26      	ldr	r3, [pc, #152]	; (80099a8 <_vfiprintf_r+0x228>)
 8009910:	bb1b      	cbnz	r3, 800995a <_vfiprintf_r+0x1da>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	3307      	adds	r3, #7
 8009916:	f023 0307 	bic.w	r3, r3, #7
 800991a:	3308      	adds	r3, #8
 800991c:	9303      	str	r3, [sp, #12]
 800991e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009920:	443b      	add	r3, r7
 8009922:	9309      	str	r3, [sp, #36]	; 0x24
 8009924:	e768      	b.n	80097f8 <_vfiprintf_r+0x78>
 8009926:	fb0c 3202 	mla	r2, ip, r2, r3
 800992a:	460c      	mov	r4, r1
 800992c:	2001      	movs	r0, #1
 800992e:	e7a6      	b.n	800987e <_vfiprintf_r+0xfe>
 8009930:	2300      	movs	r3, #0
 8009932:	3401      	adds	r4, #1
 8009934:	9305      	str	r3, [sp, #20]
 8009936:	4619      	mov	r1, r3
 8009938:	f04f 0c0a 	mov.w	ip, #10
 800993c:	4620      	mov	r0, r4
 800993e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009942:	3a30      	subs	r2, #48	; 0x30
 8009944:	2a09      	cmp	r2, #9
 8009946:	d903      	bls.n	8009950 <_vfiprintf_r+0x1d0>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0c6      	beq.n	80098da <_vfiprintf_r+0x15a>
 800994c:	9105      	str	r1, [sp, #20]
 800994e:	e7c4      	b.n	80098da <_vfiprintf_r+0x15a>
 8009950:	fb0c 2101 	mla	r1, ip, r1, r2
 8009954:	4604      	mov	r4, r0
 8009956:	2301      	movs	r3, #1
 8009958:	e7f0      	b.n	800993c <_vfiprintf_r+0x1bc>
 800995a:	ab03      	add	r3, sp, #12
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	462a      	mov	r2, r5
 8009960:	4b12      	ldr	r3, [pc, #72]	; (80099ac <_vfiprintf_r+0x22c>)
 8009962:	a904      	add	r1, sp, #16
 8009964:	4630      	mov	r0, r6
 8009966:	f7fb feff 	bl	8005768 <_printf_float>
 800996a:	4607      	mov	r7, r0
 800996c:	1c78      	adds	r0, r7, #1
 800996e:	d1d6      	bne.n	800991e <_vfiprintf_r+0x19e>
 8009970:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009972:	07d9      	lsls	r1, r3, #31
 8009974:	d405      	bmi.n	8009982 <_vfiprintf_r+0x202>
 8009976:	89ab      	ldrh	r3, [r5, #12]
 8009978:	059a      	lsls	r2, r3, #22
 800997a:	d402      	bmi.n	8009982 <_vfiprintf_r+0x202>
 800997c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800997e:	f7fc feb1 	bl	80066e4 <__retarget_lock_release_recursive>
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	065b      	lsls	r3, r3, #25
 8009986:	f53f af1d 	bmi.w	80097c4 <_vfiprintf_r+0x44>
 800998a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800998c:	e71c      	b.n	80097c8 <_vfiprintf_r+0x48>
 800998e:	ab03      	add	r3, sp, #12
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	462a      	mov	r2, r5
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <_vfiprintf_r+0x22c>)
 8009996:	a904      	add	r1, sp, #16
 8009998:	4630      	mov	r0, r6
 800999a:	f7fc f989 	bl	8005cb0 <_printf_i>
 800999e:	e7e4      	b.n	800996a <_vfiprintf_r+0x1ea>
 80099a0:	08016981 	.word	0x08016981
 80099a4:	0801698b 	.word	0x0801698b
 80099a8:	08005769 	.word	0x08005769
 80099ac:	0800975d 	.word	0x0800975d
 80099b0:	08016987 	.word	0x08016987

080099b4 <__swbuf_r>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	460e      	mov	r6, r1
 80099b8:	4614      	mov	r4, r2
 80099ba:	4605      	mov	r5, r0
 80099bc:	b118      	cbz	r0, 80099c6 <__swbuf_r+0x12>
 80099be:	6a03      	ldr	r3, [r0, #32]
 80099c0:	b90b      	cbnz	r3, 80099c6 <__swbuf_r+0x12>
 80099c2:	f7fc fd33 	bl	800642c <__sinit>
 80099c6:	69a3      	ldr	r3, [r4, #24]
 80099c8:	60a3      	str	r3, [r4, #8]
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	071a      	lsls	r2, r3, #28
 80099ce:	d525      	bpl.n	8009a1c <__swbuf_r+0x68>
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	b31b      	cbz	r3, 8009a1c <__swbuf_r+0x68>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	6922      	ldr	r2, [r4, #16]
 80099d8:	1a98      	subs	r0, r3, r2
 80099da:	6963      	ldr	r3, [r4, #20]
 80099dc:	b2f6      	uxtb	r6, r6
 80099de:	4283      	cmp	r3, r0
 80099e0:	4637      	mov	r7, r6
 80099e2:	dc04      	bgt.n	80099ee <__swbuf_r+0x3a>
 80099e4:	4621      	mov	r1, r4
 80099e6:	4628      	mov	r0, r5
 80099e8:	f7ff fa82 	bl	8008ef0 <_fflush_r>
 80099ec:	b9e0      	cbnz	r0, 8009a28 <__swbuf_r+0x74>
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	60a3      	str	r3, [r4, #8]
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	1c5a      	adds	r2, r3, #1
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	701e      	strb	r6, [r3, #0]
 80099fc:	6962      	ldr	r2, [r4, #20]
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d004      	beq.n	8009a0e <__swbuf_r+0x5a>
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	07db      	lsls	r3, r3, #31
 8009a08:	d506      	bpl.n	8009a18 <__swbuf_r+0x64>
 8009a0a:	2e0a      	cmp	r6, #10
 8009a0c:	d104      	bne.n	8009a18 <__swbuf_r+0x64>
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4628      	mov	r0, r5
 8009a12:	f7ff fa6d 	bl	8008ef0 <_fflush_r>
 8009a16:	b938      	cbnz	r0, 8009a28 <__swbuf_r+0x74>
 8009a18:	4638      	mov	r0, r7
 8009a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 f806 	bl	8009a30 <__swsetup_r>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d0d5      	beq.n	80099d4 <__swbuf_r+0x20>
 8009a28:	f04f 37ff 	mov.w	r7, #4294967295
 8009a2c:	e7f4      	b.n	8009a18 <__swbuf_r+0x64>
	...

08009a30 <__swsetup_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4b2a      	ldr	r3, [pc, #168]	; (8009adc <__swsetup_r+0xac>)
 8009a34:	4605      	mov	r5, r0
 8009a36:	6818      	ldr	r0, [r3, #0]
 8009a38:	460c      	mov	r4, r1
 8009a3a:	b118      	cbz	r0, 8009a44 <__swsetup_r+0x14>
 8009a3c:	6a03      	ldr	r3, [r0, #32]
 8009a3e:	b90b      	cbnz	r3, 8009a44 <__swsetup_r+0x14>
 8009a40:	f7fc fcf4 	bl	800642c <__sinit>
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a4a:	0718      	lsls	r0, r3, #28
 8009a4c:	d422      	bmi.n	8009a94 <__swsetup_r+0x64>
 8009a4e:	06d9      	lsls	r1, r3, #27
 8009a50:	d407      	bmi.n	8009a62 <__swsetup_r+0x32>
 8009a52:	2309      	movs	r3, #9
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e034      	b.n	8009acc <__swsetup_r+0x9c>
 8009a62:	0758      	lsls	r0, r3, #29
 8009a64:	d512      	bpl.n	8009a8c <__swsetup_r+0x5c>
 8009a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a68:	b141      	cbz	r1, 8009a7c <__swsetup_r+0x4c>
 8009a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a6e:	4299      	cmp	r1, r3
 8009a70:	d002      	beq.n	8009a78 <__swsetup_r+0x48>
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7fd fcc6 	bl	8007404 <_free_r>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6363      	str	r3, [r4, #52]	; 0x34
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a82:	81a3      	strh	r3, [r4, #12]
 8009a84:	2300      	movs	r3, #0
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f043 0308 	orr.w	r3, r3, #8
 8009a92:	81a3      	strh	r3, [r4, #12]
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	b94b      	cbnz	r3, 8009aac <__swsetup_r+0x7c>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aa2:	d003      	beq.n	8009aac <__swsetup_r+0x7c>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f000 f884 	bl	8009bb4 <__smakebuf_r>
 8009aac:	89a0      	ldrh	r0, [r4, #12]
 8009aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ab2:	f010 0301 	ands.w	r3, r0, #1
 8009ab6:	d00a      	beq.n	8009ace <__swsetup_r+0x9e>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60a3      	str	r3, [r4, #8]
 8009abc:	6963      	ldr	r3, [r4, #20]
 8009abe:	425b      	negs	r3, r3
 8009ac0:	61a3      	str	r3, [r4, #24]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	b943      	cbnz	r3, 8009ad8 <__swsetup_r+0xa8>
 8009ac6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aca:	d1c4      	bne.n	8009a56 <__swsetup_r+0x26>
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	0781      	lsls	r1, r0, #30
 8009ad0:	bf58      	it	pl
 8009ad2:	6963      	ldrpl	r3, [r4, #20]
 8009ad4:	60a3      	str	r3, [r4, #8]
 8009ad6:	e7f4      	b.n	8009ac2 <__swsetup_r+0x92>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	e7f7      	b.n	8009acc <__swsetup_r+0x9c>
 8009adc:	20000790 	.word	0x20000790

08009ae0 <_raise_r>:
 8009ae0:	291f      	cmp	r1, #31
 8009ae2:	b538      	push	{r3, r4, r5, lr}
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	460d      	mov	r5, r1
 8009ae8:	d904      	bls.n	8009af4 <_raise_r+0x14>
 8009aea:	2316      	movs	r3, #22
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009af6:	b112      	cbz	r2, 8009afe <_raise_r+0x1e>
 8009af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009afc:	b94b      	cbnz	r3, 8009b12 <_raise_r+0x32>
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 f830 	bl	8009b64 <_getpid_r>
 8009b04:	462a      	mov	r2, r5
 8009b06:	4601      	mov	r1, r0
 8009b08:	4620      	mov	r0, r4
 8009b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b0e:	f000 b817 	b.w	8009b40 <_kill_r>
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d00a      	beq.n	8009b2c <_raise_r+0x4c>
 8009b16:	1c59      	adds	r1, r3, #1
 8009b18:	d103      	bne.n	8009b22 <_raise_r+0x42>
 8009b1a:	2316      	movs	r3, #22
 8009b1c:	6003      	str	r3, [r0, #0]
 8009b1e:	2001      	movs	r0, #1
 8009b20:	e7e7      	b.n	8009af2 <_raise_r+0x12>
 8009b22:	2400      	movs	r4, #0
 8009b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b28:	4628      	mov	r0, r5
 8009b2a:	4798      	blx	r3
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	e7e0      	b.n	8009af2 <_raise_r+0x12>

08009b30 <raise>:
 8009b30:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <raise+0xc>)
 8009b32:	4601      	mov	r1, r0
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	f7ff bfd3 	b.w	8009ae0 <_raise_r>
 8009b3a:	bf00      	nop
 8009b3c:	20000790 	.word	0x20000790

08009b40 <_kill_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_kill_r+0x20>)
 8009b44:	2300      	movs	r3, #0
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	602b      	str	r3, [r5, #0]
 8009b4e:	f000 f9e3 	bl	8009f18 <_kill>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	d102      	bne.n	8009b5c <_kill_r+0x1c>
 8009b56:	682b      	ldr	r3, [r5, #0]
 8009b58:	b103      	cbz	r3, 8009b5c <_kill_r+0x1c>
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	bf00      	nop
 8009b60:	200011e0 	.word	0x200011e0

08009b64 <_getpid_r>:
 8009b64:	f000 b9c8 	b.w	8009ef8 <_getpid>

08009b68 <__swhatbuf_r>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b70:	2900      	cmp	r1, #0
 8009b72:	b096      	sub	sp, #88	; 0x58
 8009b74:	4615      	mov	r5, r2
 8009b76:	461e      	mov	r6, r3
 8009b78:	da0d      	bge.n	8009b96 <__swhatbuf_r+0x2e>
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b80:	f04f 0100 	mov.w	r1, #0
 8009b84:	bf0c      	ite	eq
 8009b86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b8a:	2340      	movne	r3, #64	; 0x40
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	6031      	str	r1, [r6, #0]
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	b016      	add	sp, #88	; 0x58
 8009b94:	bd70      	pop	{r4, r5, r6, pc}
 8009b96:	466a      	mov	r2, sp
 8009b98:	f000 f848 	bl	8009c2c <_fstat_r>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	dbec      	blt.n	8009b7a <__swhatbuf_r+0x12>
 8009ba0:	9901      	ldr	r1, [sp, #4]
 8009ba2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009ba6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009baa:	4259      	negs	r1, r3
 8009bac:	4159      	adcs	r1, r3
 8009bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb2:	e7eb      	b.n	8009b8c <__swhatbuf_r+0x24>

08009bb4 <__smakebuf_r>:
 8009bb4:	898b      	ldrh	r3, [r1, #12]
 8009bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bb8:	079d      	lsls	r5, r3, #30
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	d507      	bpl.n	8009bd0 <__smakebuf_r+0x1c>
 8009bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	2301      	movs	r3, #1
 8009bca:	6163      	str	r3, [r4, #20]
 8009bcc:	b002      	add	sp, #8
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	ab01      	add	r3, sp, #4
 8009bd2:	466a      	mov	r2, sp
 8009bd4:	f7ff ffc8 	bl	8009b68 <__swhatbuf_r>
 8009bd8:	9900      	ldr	r1, [sp, #0]
 8009bda:	4605      	mov	r5, r0
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7fb fc67 	bl	80054b0 <_malloc_r>
 8009be2:	b948      	cbnz	r0, 8009bf8 <__smakebuf_r+0x44>
 8009be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be8:	059a      	lsls	r2, r3, #22
 8009bea:	d4ef      	bmi.n	8009bcc <__smakebuf_r+0x18>
 8009bec:	f023 0303 	bic.w	r3, r3, #3
 8009bf0:	f043 0302 	orr.w	r3, r3, #2
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	e7e3      	b.n	8009bc0 <__smakebuf_r+0xc>
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	6020      	str	r0, [r4, #0]
 8009bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c00:	81a3      	strh	r3, [r4, #12]
 8009c02:	9b00      	ldr	r3, [sp, #0]
 8009c04:	6163      	str	r3, [r4, #20]
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	6120      	str	r0, [r4, #16]
 8009c0a:	b15b      	cbz	r3, 8009c24 <__smakebuf_r+0x70>
 8009c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c10:	4630      	mov	r0, r6
 8009c12:	f000 f81d 	bl	8009c50 <_isatty_r>
 8009c16:	b128      	cbz	r0, 8009c24 <__smakebuf_r+0x70>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	431d      	orrs	r5, r3
 8009c28:	81a5      	strh	r5, [r4, #12]
 8009c2a:	e7cf      	b.n	8009bcc <__smakebuf_r+0x18>

08009c2c <_fstat_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d07      	ldr	r5, [pc, #28]	; (8009c4c <_fstat_r+0x20>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	4611      	mov	r1, r2
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	f000 f955 	bl	8009ee8 <_fstat>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	d102      	bne.n	8009c48 <_fstat_r+0x1c>
 8009c42:	682b      	ldr	r3, [r5, #0]
 8009c44:	b103      	cbz	r3, 8009c48 <_fstat_r+0x1c>
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	bf00      	nop
 8009c4c:	200011e0 	.word	0x200011e0

08009c50 <_isatty_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d06      	ldr	r5, [pc, #24]	; (8009c6c <_isatty_r+0x1c>)
 8009c54:	2300      	movs	r3, #0
 8009c56:	4604      	mov	r4, r0
 8009c58:	4608      	mov	r0, r1
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	f000 f954 	bl	8009f08 <_isatty>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d102      	bne.n	8009c6a <_isatty_r+0x1a>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	b103      	cbz	r3, 8009c6a <_isatty_r+0x1a>
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	bd38      	pop	{r3, r4, r5, pc}
 8009c6c:	200011e0 	.word	0x200011e0

08009c70 <expf>:
 8009c70:	b508      	push	{r3, lr}
 8009c72:	ed2d 8b02 	vpush	{d8}
 8009c76:	eef0 8a40 	vmov.f32	s17, s0
 8009c7a:	f000 f85f 	bl	8009d3c <__ieee754_expf>
 8009c7e:	eeb0 8a40 	vmov.f32	s16, s0
 8009c82:	eeb0 0a68 	vmov.f32	s0, s17
 8009c86:	f000 f829 	bl	8009cdc <finitef>
 8009c8a:	b160      	cbz	r0, 8009ca6 <expf+0x36>
 8009c8c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009ccc <expf+0x5c>
 8009c90:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c98:	dd0a      	ble.n	8009cb0 <expf+0x40>
 8009c9a:	f7fc fcf7 	bl	800668c <__errno>
 8009c9e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009cd0 <expf+0x60>
 8009ca2:	2322      	movs	r3, #34	; 0x22
 8009ca4:	6003      	str	r3, [r0, #0]
 8009ca6:	eeb0 0a48 	vmov.f32	s0, s16
 8009caa:	ecbd 8b02 	vpop	{d8}
 8009cae:	bd08      	pop	{r3, pc}
 8009cb0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009cd4 <expf+0x64>
 8009cb4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cbc:	d5f3      	bpl.n	8009ca6 <expf+0x36>
 8009cbe:	f7fc fce5 	bl	800668c <__errno>
 8009cc2:	2322      	movs	r3, #34	; 0x22
 8009cc4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009cd8 <expf+0x68>
 8009cc8:	6003      	str	r3, [r0, #0]
 8009cca:	e7ec      	b.n	8009ca6 <expf+0x36>
 8009ccc:	42b17217 	.word	0x42b17217
 8009cd0:	7f800000 	.word	0x7f800000
 8009cd4:	c2cff1b5 	.word	0xc2cff1b5
 8009cd8:	00000000 	.word	0x00000000

08009cdc <finitef>:
 8009cdc:	b082      	sub	sp, #8
 8009cde:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009ce2:	9801      	ldr	r0, [sp, #4]
 8009ce4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009ce8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009cec:	bfac      	ite	ge
 8009cee:	2000      	movge	r0, #0
 8009cf0:	2001      	movlt	r0, #1
 8009cf2:	b002      	add	sp, #8
 8009cf4:	4770      	bx	lr

08009cf6 <with_errnof>:
 8009cf6:	b513      	push	{r0, r1, r4, lr}
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009cfe:	f7fc fcc5 	bl	800668c <__errno>
 8009d02:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009d06:	6004      	str	r4, [r0, #0]
 8009d08:	b002      	add	sp, #8
 8009d0a:	bd10      	pop	{r4, pc}

08009d0c <xflowf>:
 8009d0c:	b130      	cbz	r0, 8009d1c <xflowf+0x10>
 8009d0e:	eef1 7a40 	vneg.f32	s15, s0
 8009d12:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d16:	2022      	movs	r0, #34	; 0x22
 8009d18:	f7ff bfed 	b.w	8009cf6 <with_errnof>
 8009d1c:	eef0 7a40 	vmov.f32	s15, s0
 8009d20:	e7f7      	b.n	8009d12 <xflowf+0x6>
	...

08009d24 <__math_uflowf>:
 8009d24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d2c <__math_uflowf+0x8>
 8009d28:	f7ff bff0 	b.w	8009d0c <xflowf>
 8009d2c:	10000000 	.word	0x10000000

08009d30 <__math_oflowf>:
 8009d30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d38 <__math_oflowf+0x8>
 8009d34:	f7ff bfea 	b.w	8009d0c <xflowf>
 8009d38:	70000000 	.word	0x70000000

08009d3c <__ieee754_expf>:
 8009d3c:	ee10 2a10 	vmov	r2, s0
 8009d40:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009d44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009d48:	d902      	bls.n	8009d50 <__ieee754_expf+0x14>
 8009d4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d4e:	4770      	bx	lr
 8009d50:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009d54:	d106      	bne.n	8009d64 <__ieee754_expf+0x28>
 8009d56:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009e90 <__ieee754_expf+0x154>
 8009d5a:	2900      	cmp	r1, #0
 8009d5c:	bf18      	it	ne
 8009d5e:	eeb0 0a67 	vmovne.f32	s0, s15
 8009d62:	4770      	bx	lr
 8009d64:	484b      	ldr	r0, [pc, #300]	; (8009e94 <__ieee754_expf+0x158>)
 8009d66:	4282      	cmp	r2, r0
 8009d68:	dd02      	ble.n	8009d70 <__ieee754_expf+0x34>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	f7ff bfe0 	b.w	8009d30 <__math_oflowf>
 8009d70:	2a00      	cmp	r2, #0
 8009d72:	da05      	bge.n	8009d80 <__ieee754_expf+0x44>
 8009d74:	4a48      	ldr	r2, [pc, #288]	; (8009e98 <__ieee754_expf+0x15c>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d902      	bls.n	8009d80 <__ieee754_expf+0x44>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	f7ff bfd2 	b.w	8009d24 <__math_uflowf>
 8009d80:	4a46      	ldr	r2, [pc, #280]	; (8009e9c <__ieee754_expf+0x160>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009d88:	d952      	bls.n	8009e30 <__ieee754_expf+0xf4>
 8009d8a:	4a45      	ldr	r2, [pc, #276]	; (8009ea0 <__ieee754_expf+0x164>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009d92:	d834      	bhi.n	8009dfe <__ieee754_expf+0xc2>
 8009d94:	4b43      	ldr	r3, [pc, #268]	; (8009ea4 <__ieee754_expf+0x168>)
 8009d96:	4413      	add	r3, r2
 8009d98:	ed93 7a00 	vldr	s14, [r3]
 8009d9c:	4b42      	ldr	r3, [pc, #264]	; (8009ea8 <__ieee754_expf+0x16c>)
 8009d9e:	4413      	add	r3, r2
 8009da0:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009da4:	f1c1 0201 	rsb	r2, r1, #1
 8009da8:	edd3 7a00 	vldr	s15, [r3]
 8009dac:	1a52      	subs	r2, r2, r1
 8009dae:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009db2:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009db6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009eac <__ieee754_expf+0x170>
 8009dba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009eb0 <__ieee754_expf+0x174>
 8009dbe:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009dc2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009eb4 <__ieee754_expf+0x178>
 8009dc6:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009dca:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009eb8 <__ieee754_expf+0x17c>
 8009dce:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009dd2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009ebc <__ieee754_expf+0x180>
 8009dd6:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009dda:	eef0 6a40 	vmov.f32	s13, s0
 8009dde:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009de2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009de6:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009dea:	bb92      	cbnz	r2, 8009e52 <__ieee754_expf+0x116>
 8009dec:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009df0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009df4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009df8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009dfc:	4770      	bx	lr
 8009dfe:	4b30      	ldr	r3, [pc, #192]	; (8009ec0 <__ieee754_expf+0x184>)
 8009e00:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009ec4 <__ieee754_expf+0x188>
 8009e04:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009ec8 <__ieee754_expf+0x18c>
 8009e08:	4413      	add	r3, r2
 8009e0a:	edd3 7a00 	vldr	s15, [r3]
 8009e0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009e12:	eeb0 7a40 	vmov.f32	s14, s0
 8009e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e1a:	ee17 2a90 	vmov	r2, s15
 8009e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e22:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009e26:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009ecc <__ieee754_expf+0x190>
 8009e2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e2e:	e7be      	b.n	8009dae <__ieee754_expf+0x72>
 8009e30:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8009e34:	d20b      	bcs.n	8009e4e <__ieee754_expf+0x112>
 8009e36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009ed0 <__ieee754_expf+0x194>
 8009e3a:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009e3e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e46:	dd02      	ble.n	8009e4e <__ieee754_expf+0x112>
 8009e48:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009e4c:	4770      	bx	lr
 8009e4e:	2200      	movs	r2, #0
 8009e50:	e7af      	b.n	8009db2 <__ieee754_expf+0x76>
 8009e52:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009e56:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009e5a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009e5e:	bfb8      	it	lt
 8009e60:	3264      	addlt	r2, #100	; 0x64
 8009e62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e6a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009e6e:	ee17 3a90 	vmov	r3, s15
 8009e72:	bfab      	itete	ge
 8009e74:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009e78:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009e7c:	ee00 3a10 	vmovge	s0, r3
 8009e80:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009ed4 <__ieee754_expf+0x198>
 8009e84:	bfbc      	itt	lt
 8009e86:	ee00 3a10 	vmovlt	s0, r3
 8009e8a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009e8e:	4770      	bx	lr
 8009e90:	00000000 	.word	0x00000000
 8009e94:	42b17217 	.word	0x42b17217
 8009e98:	42cff1b5 	.word	0x42cff1b5
 8009e9c:	3eb17218 	.word	0x3eb17218
 8009ea0:	3f851591 	.word	0x3f851591
 8009ea4:	08016a40 	.word	0x08016a40
 8009ea8:	08016a48 	.word	0x08016a48
 8009eac:	3331bb4c 	.word	0x3331bb4c
 8009eb0:	b5ddea0e 	.word	0xb5ddea0e
 8009eb4:	388ab355 	.word	0x388ab355
 8009eb8:	bb360b61 	.word	0xbb360b61
 8009ebc:	3e2aaaab 	.word	0x3e2aaaab
 8009ec0:	08016a38 	.word	0x08016a38
 8009ec4:	3fb8aa3b 	.word	0x3fb8aa3b
 8009ec8:	3f317180 	.word	0x3f317180
 8009ecc:	3717f7d1 	.word	0x3717f7d1
 8009ed0:	7149f2ca 	.word	0x7149f2ca
 8009ed4:	0d800000 	.word	0x0d800000

08009ed8 <_close>:
 8009ed8:	4b02      	ldr	r3, [pc, #8]	; (8009ee4 <_close+0xc>)
 8009eda:	2258      	movs	r2, #88	; 0x58
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee2:	4770      	bx	lr
 8009ee4:	200011e0 	.word	0x200011e0

08009ee8 <_fstat>:
 8009ee8:	4b02      	ldr	r3, [pc, #8]	; (8009ef4 <_fstat+0xc>)
 8009eea:	2258      	movs	r2, #88	; 0x58
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef2:	4770      	bx	lr
 8009ef4:	200011e0 	.word	0x200011e0

08009ef8 <_getpid>:
 8009ef8:	4b02      	ldr	r3, [pc, #8]	; (8009f04 <_getpid+0xc>)
 8009efa:	2258      	movs	r2, #88	; 0x58
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295
 8009f02:	4770      	bx	lr
 8009f04:	200011e0 	.word	0x200011e0

08009f08 <_isatty>:
 8009f08:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <_isatty+0xc>)
 8009f0a:	2258      	movs	r2, #88	; 0x58
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	2000      	movs	r0, #0
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	200011e0 	.word	0x200011e0

08009f18 <_kill>:
 8009f18:	4b02      	ldr	r3, [pc, #8]	; (8009f24 <_kill+0xc>)
 8009f1a:	2258      	movs	r2, #88	; 0x58
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f22:	4770      	bx	lr
 8009f24:	200011e0 	.word	0x200011e0

08009f28 <_lseek>:
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <_lseek+0xc>)
 8009f2a:	2258      	movs	r2, #88	; 0x58
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f32:	4770      	bx	lr
 8009f34:	200011e0 	.word	0x200011e0

08009f38 <_read>:
 8009f38:	4b02      	ldr	r3, [pc, #8]	; (8009f44 <_read+0xc>)
 8009f3a:	2258      	movs	r2, #88	; 0x58
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f42:	4770      	bx	lr
 8009f44:	200011e0 	.word	0x200011e0

08009f48 <_write>:
 8009f48:	4b02      	ldr	r3, [pc, #8]	; (8009f54 <_write+0xc>)
 8009f4a:	2258      	movs	r2, #88	; 0x58
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f52:	4770      	bx	lr
 8009f54:	200011e0 	.word	0x200011e0

08009f58 <_exit>:
 8009f58:	e7fe      	b.n	8009f58 <_exit>
	...

08009f5c <_init>:
 8009f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5e:	bf00      	nop
 8009f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f62:	bc08      	pop	{r3}
 8009f64:	469e      	mov	lr, r3
 8009f66:	4770      	bx	lr

08009f68 <_fini>:
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	bf00      	nop
 8009f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6e:	bc08      	pop	{r3}
 8009f70:	469e      	mov	lr, r3
 8009f72:	4770      	bx	lr
